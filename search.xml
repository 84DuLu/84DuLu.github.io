<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C Primer Plus note_1</title>
      <link href="//c58d4f4.html"/>
      <url>//c58d4f4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="第一章-初识C语言"><a href="#第一章-初识C语言" class="headerlink" title="第一章 初识C语言"></a>第一章 初识C语言</h2><h3 id="编程的七个步骤"><a href="#编程的七个步骤" class="headerlink" title="编程的七个步骤"></a>编程的七个步骤</h3><blockquote><ol><li>Define the program objectives</li><li>Design the program</li><li>Write the code</li><li>Compile</li><li>Run the program</li><li>Test and debug the program</li><li>Maintain and modify the program</li></ol></blockquote><p> The moral here is that you should develop the habit of planning before coding. Use the ancient but honorable pen-and-pencil technology to jot down the objectives of your program and to outline the design. If you do so, you eventually will reap substantial dividends in time saved and satisfaction gained. </p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411193803765.png" alt="image-20220411193803765"></p><h3 id="编译器和连接器"><a href="#编译器和连接器" class="headerlink" title="编译器和连接器"></a>编译器和连接器</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411191643812.png" alt="image-20220411191643812"></p><hr><h2 id="第二章-C语言概述"><a href="#第二章-C语言概述" class="headerlink" title="第二章 C语言概述"></a>第二章 C语言概述</h2><h3 id="include-指令和头文件"><a href="#include-指令和头文件" class="headerlink" title="#include 指令和头文件"></a>#include 指令和头文件</h3><blockquote><p><code>#include &lt;stdio.h&gt;</code></p></blockquote><p> The <code>#include</code> statement is an example of a <strong>C</strong> <em>preprocessor directive</em>. In general, <strong>C</strong> compilers perform some preparatory work on source code before compiling; this is termed <em>preprocessing</em>.</p><p> The <code>stdio.h</code> file is supplied as part of all <strong>C</strong> compiler packages. It contains information about input and output functions, such as <code>printf()</code> , for the compiler to use. The name stands for <em>standard input/output header</em>. <strong>C</strong> peaple call a collection of information that goes at the top of a file a header, and <strong>C</strong> implementations typically come with several header files.  </p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main() 函数"></a>main() 函数</h3><blockquote><p><code>int main (void)</code></p></blockquote><p> The <strong>int</strong> is the <code>main()</code> function’s return type. That means that kind of value of value <code>main()</code> can return is an integer.  </p><p> The parentheses following a function name generally enclose information being passed along to the function. For this simple example, nothing is being passed along, so the parentheses contain the word <strong>void</strong>.  </p><blockquote><p>main()</p></blockquote><p> If you browse through ancient <strong>C</strong> code, you’ll often see programs starting off with the following format: <code>main()</code>  </p><p> The C90 standard grudgingly tolerated this form, but the C99 and C11 standards don’t. So even if you current compiler lets you do this, don’t.</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p> 在程序中，被<code>/* */</code>两个符号括起来的是程序的注释。  </p><p> C99 新增了另一种风格的注释<code>//</code>，仅限于单行。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote><p><code>int num;</code></p></blockquote><p> The word <strong>int</strong> is a <strong>C</strong> <em>keyword</em> identifying one of the basic <strong>C</strong> data types. The word <strong>num</strong> in this example is an <em>identifier</em> —— that is, a name you select for a variable, a function, or somme other entity.  </p><p> In <strong>C</strong>, all variables must be declared before they are used.  </p><p> Traditionally, <strong>C</strong> has required that variables be declared at the beginning of a block with no other kind of statement allowed to come before and of the declarations.  </p><p> C99 and C11, following the practice of C++, let you place declarations about anywhere in a block. However, you still must declare a variable before its first use.</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p> 可以用小写字母、大写字母、数字和下划线（_）来命名。而且，名称的第1个字符必须是字母或下划线，不能是数字。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411200854738.png" alt="image-20220411200854738"></p><h3 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf() 函数"></a>printf() 函数</h3><p> the <strong>f</strong> in <code>printf()</code> is a reminder that this is a <em>formatting</em> print function.</p><hr><h2 id="数据和-C"><a href="#数据和-C" class="headerlink" title="数据和 C"></a>数据和 C</h2><blockquote><ul><li>The smallest unit of memory called a <em>bit</em>. It can hold one of  the two values: 0 or 1.</li><li>The <em>byte</em> is the usual unit of computer memory. For nearly all machines, a byte is 8 bits, and that is the standard definition, at least when used to measure storage.</li><li>A <em>word</em> is the natural unit of memory for a given computer design. For 8-bit microcomputers, such as the original Apples, a word is just 8 bits. Since then, personal computers moved up to 16-bit words. 32-bit words, and, at the present, 64-bit words. Larger word sizes enable faster transfer of data and allow more memory to be accessed.</li></ul></blockquote><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="int-类型"><a href="#int-类型" class="headerlink" title="int 类型"></a>int 类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 int 变量</span></span><br><span class="line"><span class="type">int</span> erns;</span><br><span class="line"><span class="type">int</span> hogs, cows, goats;</span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="type">int</span> hogs = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> cows = <span class="number">32</span>, goats = <span class="number">14</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">int</span> snow;</span><br><span class="line">snow = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p> <strong>C</strong> 语言把大多数整型常量视为 <strong>int</strong> 类型，但是非常大的整数除外。  </p><p> The <strong>%d</strong> notation is used to indicate just where in a line the integer is to be printed. The <strong>%d</strong> is called a <em>format specifier</em> because it indicates the form that <code>printf()</code> uses to display a value.</p><h5 id="显示八进制和十六进制"><a href="#显示八进制和十六进制" class="headerlink" title="显示八进制和十六进制"></a>显示八进制和十六进制</h5><blockquote><ul><li>以十进制显示数字，使用<strong>%d</strong></li><li>以八进制显示数字，使用<strong>%o</strong></li><li>以十六进制显示数字，使用<strong>%x</strong></li><li>要显示各进制数的前缀0、0x 和 0X，分别使用<strong>%#o</strong>、<strong>%#x</strong>、<strong>%#X</strong></li></ul><p>八进制：Octal</p><p>十六进制：Hexadecimal</p></blockquote><h4 id="其他整数类型"><a href="#其他整数类型" class="headerlink" title="其他整数类型"></a>其他整数类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思考short、long和unsigned的含义 </span></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> estine;</span><br><span class="line"><span class="type">long</span> johns; <span class="comment">//打印用 %ld</span></span><br><span class="line"><span class="type">short</span> <span class="type">int</span> erns;</span><br><span class="line"><span class="type">short</span> ribs; <span class="comment">//打印用 %hd</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s_count;</span><br><span class="line"><span class="type">unsigned</span> players; <span class="comment">//打印用 %u</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> headcount; <span class="comment">//打印用 %lu</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> yesvotes;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ago; <span class="comment">//打印用 %lld</span></span><br></pre></td></tr></table></figure><p> 现在，个人计算机常见的设置是，<strong>long long</strong> 占64位，<strong>long</strong> 占32位，<strong>short</strong> 占16位，<strong>int</strong> 占16位或32位（依计算机的自然字长而定）。  </p><p> 16 位 <strong>unsigned int</strong> 允许的取值范围是 0~65535，而不是-32768~32767。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411211443768.png" alt="image-20220411211443768"></p><p> 在 <strong>int</strong> 为16位、<strong>long</strong> 为32位的系统中，会把7作为16位存储，把7L作为32位存储。类似地，在支持 <strong>long long</strong> 类型的系统中，也可以使用 ll 或 LL 后缀来表示该类型的值。</p><h4 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">4294967295</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, i, i+<span class="number">1</span>, i+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u %u %u\n&quot;</span>, j, j+<span class="number">1</span>, j+<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411212214163.png" alt="image-20220411212214163"></p><p> The unsigned integer j is acting like a car’s odometer. When it reaches its maximun value, it starts over at the beginning. The in teger i acts similarly. The main differences is that the <strong>unsigned int</strong> variable j, like an odoometer, begins at 0, but the <strong>int</strong> variabel i begins at -2147483648.</p><p> The behavior described here is mandated by the rules of C for unsigned types. The standard doesn’t define how signed types should behave. The behavior shown here is typical, but you could encounter somrthing different.</p><h3 id="char-类型"><a href="#char-类型" class="headerlink" title="char 类型"></a>char 类型</h3><p> The <strong>char</strong> type is used for storing characters such as and punctuation marks, but technically it is an integer type.Because the <strong>char</strong> type actually stores integers, not characters.  </p><p> The standard <strong>ASCII</strong> code runs numerically from 0 to 127. This range is small enough that 7 bits can hold it. The <strong>char</strong> typpe is typically defined as an 8-bit unit of memory, so it is more than large enough to encompass the standard <strong>ASCII</strong> code. </p><p>  The <strong>C</strong> language defines a byte to be the number of bits used by type <strong>char</strong>.</p><p> 使用 ASCII 码时，注意数字和数字字符的区别。例如，字符4对应的 ASCII 码是52. ‘4’ 表示字符4，而不是数字4.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="type">char</span> snow;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">snow = <span class="string">&#x27;S&#x27;</span>; <span class="comment">// 只能用单引号包括，不加单引号或用双引号是不对的</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">char</span> snow = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果把&#x27;SNOW&#x27;赋给snow，snow的值将会是&#x27;W&#x27;，想想为什么</span></span><br></pre></td></tr></table></figure><h4 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411220935369.png" alt="image-20220411220935369"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转义序列赋给字符变量</span></span><br><span class="line"><span class="type">char</span> nerf = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 稍后打印变量 nerf 的效果是，在屏幕上另起一行</span></span><br><span class="line"><span class="type">char</span> beep = <span class="string">&#x27;\007&#x27;</span><span class="comment">// 用八进制ASCII码表示字符，效果与&#x27;\a&#x27;等同</span></span><br></pre></td></tr></table></figure><h4 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412081420834.png" alt="image-20220412081420834"></p><h4 id="Signed-or-Unsigned"><a href="#Signed-or-Unsigned" class="headerlink" title="Signed or Unsigned?"></a>Signed or Unsigned?</h4><p> Some <strong>C</strong> implementations make <strong>char</strong> a signed type. This means a <strong>char</strong> can hold values typically in the range -128 through 127. Other implementations make <strong>char</strong> an unsigned type, which provides a range of 0 through 255.  </p><p> As of C90, <strong>C</strong> enabled you to use the keywords <strong>signed</strong> and <strong>unsigned</strong> with <strong>char</strong>.</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412082611769.png" alt="image-20220412082611769"></p><p> 指数计数法是科学计数法在计算机中的写法。  </p><p> <strong>C</strong> 标准规定，<strong>float</strong> 类型必须至少能表示6位有效数字，且取值范围至少是$10^{-37}$ ~ $10^{+37}$ 。通常，系统储存一个浮点数要占用32位。其中8位用于表示指数的值和符号，剩下24位用于表示非指数部分（也叫做尾数或有效数）及其符号。  </p><p> <strong>C</strong> 语言提供的另一种浮点类型是 <strong>double</strong>（意为双精度）。<strong>double</strong>类型和 <strong>float</strong> 类型的最小取值范围相同，但至少必须能表示10位有效数字。一般情况下，<strong>double</strong> 占用64位而不是32位。一些系统将多出的 32 位全部用来表示非指数部分，这不仅增加了有效数字的位数（即提高了精度），而且还减少了舍入误差。另一些系统把其中的一些位分配给指数部分，以容纳更大的指数，从而增加了可表示数的范围。无论哪种方法，<strong>double</strong> 类型的值至少有13位有效数字，超过了标准的最低位数规定。  </p><p> <strong>C</strong> 语言的第3种浮点数类型是 <strong>long double</strong>，以满足比 <strong>double</strong> 类型更高的精度要求。  </p><p>  默认情况下，编译器假设浮点型常量是 <strong>double</strong> 类型的精度。在浮点数后面加上 f 或 F 后缀可覆盖默认设置，编译器会将浮点型常量看作 <strong>float</strong> 类型。使用 l 或 L 后缀使得数字成为 <strong>long double</strong> 类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> aboat = <span class="number">32000.0</span>; </span><br><span class="line"><span class="type">double</span> abet = <span class="number">2.14e9</span>;</span><br><span class="line"><span class="comment">// %f 打印十进制，%e 打印指数计数法，%a 打印十六进制格式</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> dip = <span class="number">5.32e-5</span>;</span><br><span class="line"><span class="comment">// 打印使用 %Lf、%Le、%La</span></span><br></pre></td></tr></table></figure><h4 id="浮点值的上溢和下溢"><a href="#浮点值的上溢和下溢" class="headerlink" title="浮点值的上溢和下溢"></a>浮点值的上溢和下溢</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> overflow = <span class="number">3.4E38</span> * <span class="number">100.0f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, overflow);<span class="comment">// 上溢</span></span><br><span class="line"><span class="type">float</span> underflow = <span class="number">0.1234E-38</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, underflow / <span class="number">10</span>);<span class="comment">// 下溢</span></span><br><span class="line"><span class="type">float</span> x = <span class="number">5.1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="built_in">asin</span>(x));</span><br><span class="line"><span class="type">float</span> a, b;</span><br><span class="line">b = <span class="number">2.0e20</span> + <span class="number">1.0</span>;</span><br><span class="line">a = b - <span class="number">2.0e20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, a);<span class="comment">// 浮点数舍入错误，计算机缺少足够的小数位数来完成正确的运算。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412092359300.png" alt="image-20220412092359300"></p><h3 id="类型大小"><a href="#类型大小" class="headerlink" title="类型大小"></a>类型大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* c99 provides a %zd specifier for sizes */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type int has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type char has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long long has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412093309133.png" alt="image-20220412093309133"></p><h3 id="刷新输出"><a href="#刷新输出" class="headerlink" title="刷新输出"></a>刷新输出</h3><p> <code>printf()</code> statements send output to an intermediate storage area called a <em>buffer</em>. It is sent when the buffer gets full, when a newline character is encountered, or when there is impending input.</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记（一）</title>
      <link href="//62d7d297.html"/>
      <url>//62d7d297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>注意：对于中文网页需要使用<code>&lt;meta charest=&quot;UTF-8&quot;&gt;</code>声明编码，否则会出现乱码。</p><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>学习HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407091709917.png" alt="image-20220407091709917"></p><p>注意：doctype声明可以不区分大小写</p><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p>HTML使用来描述网页的一种语言。</p><ul><li>HTML: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li><li>HTML 不是一种编程语言， 而是一种<strong>标记</strong>语言</li><li>标记语言是一套<strong>标记标签</strong></li><li>HTML 使用标记标签来<strong>描述</strong>网页</li><li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li><li>HTML文档也叫做 <strong>web</strong> 页面</li></ul><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ul><li>HTML 标签是由<strong>尖括号</strong>包围的关键词，比如<code>&lt;html&gt;</code></li><li>HTML 标签总是<strong>成对出现</strong>的， 比如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li></ul><h3 id="Web-浏览器"><a href="#Web-浏览器" class="headerlink" title="Web 浏览器"></a>Web 浏览器</h3><p>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p><h3 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407093357883.png" alt="image-20220407093357883"></p><h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>HTML 标题是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>HTML 段落是通过标签<code>&lt;p&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><p>HTML 链接是通过标签<code>&lt;a&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href 是 hypertext reference 的缩写</p><h3 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h3><p>HTML 图像是通过标签<code>&lt;img&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>src 是 Source 的缩写</p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407104014764.png" alt="image-20220407104014764"></p><h3 id="实例解析"><a href="#实例解析" class="headerlink" title="实例解析"></a>实例解析</h3><p><code>&lt;p&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;p&gt;</code>元素定义了 HTML 文档中的一个段落。  </p><p><code>&lt;body&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;body&gt;</code>元素定义了 HTML 文档的主体。  </p><p><code>&lt;html&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;html&gt;</code>元素定义了整个 HTML 文档。</p><h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><p>属性是 HTML 元素提供的附加信息。</p><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称/值对的形式出现，<strong>比如：name=”value”</strong>。</li></ul><h3 id="属性实例"><a href="#属性实例" class="headerlink" title="属性实例"></a>属性实例</h3><p>HTML 链接由<code>&lt;a&gt;</code>标签定义。链接的地址在 <strong>href 属性</strong> 中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：属性值应该被包括在引号内。双引号常用，使用单引号也没有问题。但若属性值本身就含有双引号，我们应该使用单引号。</p><h2 id="HTML-标题-1"><a href="#HTML-标题-1" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><h3 id="HTML-标题-2"><a href="#HTML-标题-2" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>标题通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来进行定义。  </p><p><code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题。  </p><p>浏览器会自动地在标题的前后添加空行。</p><h3 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h3><p><code>&lt;hr&gt;</code>标签在 HTML 页面中创建水平线，可用于分隔内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-段落-1"><a href="#HTML-段落-1" class="headerlink" title="HTML 段落"></a>HTML 段落</h2><h3 id="HTML-段落-2"><a href="#HTML-段落-2" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>段落是通过<code>&lt;p&gt;</code>标签定义的。  </p><p>浏览器会自动地在段落的前后添加空行。（<code>&lt;/p&gt;</code>是块级元素）</p><h3 id="HTML-拆行"><a href="#HTML-拆行" class="headerlink" title="HTML 拆行"></a>HTML 拆行</h3><p>想要换行可以使用<code>&lt;br&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落<span class="tag">&lt;<span class="name">br</span>&gt;</span>演示了分行的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于关闭标签没有任何意义，因此它没有结束标签。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407113955408.png" alt="image-20220407113955408"></p><p>贴一下评论区的笔记，我学的这个教程应该是比较老的，先学一遍基础，以后有时间再学新的内容。</p><h3 id="HTML-输出"><a href="#HTML-输出" class="headerlink" title="HTML 输出"></a>HTML 输出</h3><p>对于 HTML ，我们无法通过在 HTML 代码中添加额外的空格或换行来改变输出的结果。  </p><p>当显示页面时，浏览器会移除源代码中多余的空格和红行。所有连续的空格或空行都会被算作一个空格。</p><h2 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>放大文本<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>缩小文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407120057808.png" alt="image-20220407120057808"></p><blockquote><p><code>&lt;b&gt;</code>—-bold</p><p><code>&lt;i&gt;</code>—-italic</p><p><code>&lt;em&gt;</code>—-emphasize</p><p><code>&lt;sub&gt;</code>—-subscript</p><p><code>&lt;sup&gt;</code>—-superscript</p></blockquote><p>贴两篇别人写的笔记。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121629519.png" alt="image-20220407121629519"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121706994.png" alt="image-20220407121706994"></p>]]></content>
      
      
      <categories>
          
          <category> HTML笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(二)</title>
      <link href="//add6a14e.html"/>
      <url>//add6a14e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="分析笔记（一）中的格式错误"><a href="#分析笔记（一）中的格式错误" class="headerlink" title="分析笔记（一）中的格式错误"></a>分析笔记（一）中的格式错误</h1><p>别忘了井号和标题间要有空格，刚才弄了半天没生成标题。</p><h2 id="MD041-First-line-in-a-file-should-be-a-top-level-heading"><a href="#MD041-First-line-in-a-file-should-be-a-top-level-heading" class="headerlink" title="MD041 - First line in a file should be a top-level heading"></a>MD041 - First line in a file should be a top-level heading</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406161917301.png" alt="image-20220406161917301"></p><p>第一行必须是一级标题，如果不是，就会产生格式错误。</p><h2 id="MD010-Hard-tabs"><a href="#MD010-Hard-tabs" class="headerlink" title="MD010 - Hard tabs"></a>MD010 - Hard tabs</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162311727.png" alt="image-20220406162311727"></p><p>This rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead.</p><h2 id="MD049-Emphasis-style-should-be-consistent"><a href="#MD049-Emphasis-style-should-be-consistent" class="headerlink" title="MD049 - Emphasis style should be consistent"></a>MD049 - Emphasis style should be consistent</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406183749148.png" alt="image-20220406183749148"></p><p>斜体文本的生成在整篇文章中必须保持一致，要不全都用单个*包围，要不全都用单个_包围。</p><h2 id="MD050-Strong-style-should-be-consisten"><a href="#MD050-Strong-style-should-be-consisten" class="headerlink" title="MD050 - Strong style should be consisten"></a>MD050 - Strong style should be consisten</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162936867.png" alt="image-20220406162936867"></p><p>与MD049的规则一致。</p><h2 id="MD009-Trailing-spaces"><a href="#MD009-Trailing-spaces" class="headerlink" title="MD009 - Trailing spaces"></a>MD009 - Trailing spaces</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406171247624.png" alt="image-20220406171247624"></p><p>行尾出现了不必要的空格，应该移除它。其实有些空格是允许的，比如用于换行的空格。</p><h2 id="MD035-Horizontal-rule-style"><a href="#MD035-Horizontal-rule-style" class="headerlink" title="MD035 - Horizontal rule style"></a>MD035 - Horizontal rule style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406172226056.png" alt="image-20220406172226056"></p><p>与MD049和MD050的规则一致。</p><h2 id="MD033-Inline-HTML"><a href="#MD033-Inline-HTML" class="headerlink" title="MD033 - Inline HTML"></a>MD033 - Inline HTML</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173031498.png" alt="image-20220406173031498"></p><p>Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include “pure” markdown, or for those who are rendering markdown documents in something other than HTML.</p><h2 id="MD007-Unordered-list-indentation"><a href="#MD007-Unordered-list-indentation" class="headerlink" title="MD007 - Unordered list indentation"></a>MD007 - Unordered list indentation</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173240596.png" alt="image-20220406173240596"></p><p>大概因为是第一层嵌套，都应该顶格写。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174628026.png" alt="image-20220406174628026"></p><p>This rule is triggered when list items are not indented by the configured number of spaces (default: 2).</p><h2 id="MD004-Unordered-list-style"><a href="#MD004-Unordered-list-style" class="headerlink" title="MD004 - Unordered list style"></a>MD004 - Unordered list style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174355522.png" alt="image-20220406174355522"></p><p>生成无序列表的符号从头到尾应保持一致。</p><h2 id="MD032-Lists-should-be-surrounded-by-blank-lines"><a href="#MD032-Lists-should-be-surrounded-by-blank-lines" class="headerlink" title="MD032 - Lists should be surrounded by blank lines"></a>MD032 - Lists should be surrounded by blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406175608011.png" alt="image-20220406175608011"></p><p>This rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line.</p><p>想要解决问题，把数字那行的内容删去即可。</p><h2 id="MD012-Multiple-consecutive-blank-lines"><a href="#MD012-Multiple-consecutive-blank-lines" class="headerlink" title="MD012 - Multiple consecutive blank lines"></a>MD012 - Multiple consecutive blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406180110741.png" alt="image-20220406180110741"></p><p>删除多余的两行空行即可。</p><h2 id="MD046-Code-block-style"><a href="#MD046-Code-block-style" class="headerlink" title="MD046 - Code block style"></a>MD046 - Code block style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182141643.png" alt="image-20220406182141643"></p><p>昨天犯了一个非常严重的错误，花了一个小时意外解决但不知道原理，今天总算明白了问题所在。Markdown中生成代码块是有两种方式的：</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182455741.png" alt="image-20220406182455741"></p><p>一种是我知道的```生成代码块，另外一种就是图中先展示的。所以我们在生成代码块的时候最好统一用下面的形式，避免无意间用到上面的形式。</p><h1 id="空行和缩进"><a href="#空行和缩进" class="headerlink" title="空行和缩进"></a>空行和缩进</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp;或&amp;#8194; //半角的空格</span><br><span class="line">&amp;emsp;或&amp;#8195; //全角的空格</span><br><span class="line">&amp;nbsp;或&amp;#160;  //不断行的空格</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;内容 //中文作文一样的缩进</span><br><span class="line">&amp;nbsp; //放在一行中不加任何其他东西即生成空行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(一)</title>
      <link href="//2e73a2c.html"/>
      <url>//2e73a2c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用#号创建标题，几个#对应的就是几级标题，最多6级。</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>​    用*或_包裹创建斜体文本</p><p>​        <em>斜体文本</em><em>斜体文本</em></p><p>​    用**或__包裹创建粗体文本</p><p>​        <strong>粗体文本</strong><strong>粗体文本</strong></p><p>​    用<em>*</em>或<em>_</em>包裹创建粗斜体文本    </p><p>​        <strong><em>粗斜体文本</em></strong><strong><em>粗斜体文本</em></strong></p><p>​    在一行中用三个以上的星号*、减号-、下划线_来建立一个分隔线，行内不能有其他东西。</p><hr><hr><hr><p>​    文字两端加上两个波浪线实现删除线的效果。</p><p>​        <del>删除线</del></p><p>​    下划线可以通过HTML的<u></u>标签包裹来实现：</p><p>​        <u>带下划线文本</u></p><p>​    脚注用<sup><a href="#fn_" id="reffn_"></a></sup>来生产：</p><p>​        学习Markdown语法<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="菜鸟教程">[1]</span></a></sup>。</p><p>​    无序列表使用星号*、加号+或是减号-作为列表标记，这些标记后面要添加一个空格，然后再填写内容:</p><ul><li>第一项</li><li><p>第二项</p><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li>第一项</li><li>第二项<ul><li>第一项</li></ul></li></ul><p>有序列表使用数字并加上.号来表示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li></ul><p>​    列表嵌套要在子列表中的选项前面添加四个空格：</p><ol><li>第一项：<ul><li>第一项</li><li>第二项</li></ul></li><li>第二项：<ul><li>第一项</li><li>第二项</li></ul></li></ol><p>​    Markdown区块引用实在段落开头使用&gt;符号，然后后面紧跟一个空格符号:</p><blockquote><p>区块引用</p><p>必须是一行的最左边好像才能生效</p></blockquote><p>​    区块是可以嵌套的，一个&gt;符号是最外层，两个&gt;符号是第一层嵌套，以此类推：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote></blockquote><p>​    区块中可以使用列表：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><p>​    列表中也可以使用区块：</p><ul><li><p>第一项</p><blockquote><p>区块示例</p><p>啦啦啦</p></blockquote></li><li><p>第二项</p><blockquote><p>啦啦啦</p></blockquote></li></ul><p>​    Markdown 表格:</p><p>​Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><p>​Typora 中似乎设置完表头，表格就能可视化了。</p><p>​    段落中的代码可以用单个反引号`把它们包裹起来:</p><p>​        C语言中的<code>printf()</code>函数</p><p>​    可以用```(在最开头)包裹一段代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    链接使用方法:</p><ol><li><p>[链接名称] (链接地址)      ]和(中间没有空格,这里只为演示方便。</p></li><li><p>链接地址两边用尖括号包围</p><ul><li>第一种方法：<a href="[Snow&#39;s Blog (84dulu.github.io">我的博客</a>](<a href="https://84dulu.github.io/">https://84dulu.github.io/</a>))</li><li>第二种方法：&lt;<a href="https://84dulu.github.io/">Snow’s Blog (84dulu.github.io)</a>&gt;</li></ul></li></ol><p>​    我们可以用两组方括号通过变量来设置一个链接，第一组方括号里面填入我们想设置的名称，第二组方括号里面填入变量，变量赋值在文档末尾进行:</p><p>​        好友的博客<a href="Jonathan的小窝" title="jonathanbest7.github.io)](https://jonathanbest7.github.io/">bj777</a></p><p>​    </p><p>​    Markdown 图片语法格式:</p><ul><li><p>开头一个感叹号</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个圆括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的’title’属性的文字。</p><p> ​    <img src="https://www.ghibli.jp/gallery/thumb-totoro044.png" alt="pexels"></p><p> ​    Markdown没有办法指定图片的高度和宽度，如果需要，可以使用普通的 img 标签。</p><p> ​      </p><p> Markdown 还支持HTML元素，我不会用哈哈。kbd 标签定义键盘文本</p><p> ​    使用 <kbd>Ctrl</kbd>+<kbd>v</kbd>粘贴</p><p> 显示*等字符可以用反斜杠\来转义：</p><p> ​    <strong>文本加粗</strong></p></li></ul><p>**文本加粗**<br><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-04-05%20164932.png" alt="111"></p><p>尝试下LaTeX:</p><script type="math/tex; mode=display">a^2 + b^2 = c^2</script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">菜鸟教程<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
