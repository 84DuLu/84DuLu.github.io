<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C Primer Plus note_6</title>
      <link href="//b3510ec.html"/>
      <url>//b3510ec.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第八章-字符输入-输出"><a href="#第八章-字符输入-输出" class="headerlink" title="第八章 字符输入/输出"></a>第八章 字符输入/输出</h1><h2 id="单字符I-O：getchar-和-putchar"><a href="#单字符I-O：getchar-和-putchar" class="headerlink" title="单字符I/O：getchar() 和 putchar()"></a>单字符I/O：getchar() 和 putchar()</h2><p><code>getchar()</code> 和 <code>putchar</code> 每次只处理一个字符。自从 ANSI C 标准发布以后，<strong>C</strong> 就把 stdio.h 头文件与使用 <code>getchar()</code> 和 <code>putchar()</code> 相关联。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220415195844577.png" alt="image-20220415195844577"></p><p>缓冲分为两类：完全缓冲 I/O 和行缓冲 I/O。完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区，通常出现在文件输入中。缓冲区的大小取决于系统，常见的大小是 512 字节和 4096 字节。行缓冲 I/O 指的是在出现换行符时刷新缓冲区。键盘输入通常是行缓冲输入，所以在按下 Enter 键后才刷新缓冲区。</p><p>虽然缓冲输入好处很多，但是某些交互式程序也需要无缓冲输入。例如，在游戏中。</p><h2 id="结束键盘输入"><a href="#结束键盘输入" class="headerlink" title="结束键盘输入"></a>结束键盘输入</h2><h3 id="文件、流和键盘输入"><a href="#文件、流和键盘输入" class="headerlink" title="文件、流和键盘输入"></a>文件、流和键盘输入</h3><p>A <em>file</em> is an area of memory in which information is stored. Normally, a file is kept in some sort of permanent memory, such as a hard disk, USB flash drive.</p><p>When you are using the standard I/O package, you are shielded from differences in different systems. Therefore, to check for a new line, you can use <code>if (ch == &#39;\n&#39;)</code>. If the system actually uses the carriage return/linefeed combination, the I/O functions automatically translate back and forth between the two representations.</p><p>Conceptually, the <strong>C</strong> program deals with a stream instead of directly with a file. A <em>stream</em> is an idealized flow of date to which the actual input or output is mapped. That means various kinds of input with differing properties are represented by streams with more uniform properties. The process of opening a file then becomes one of associating a stream with the file, and reading and writing take place via the stream.</p><h3 id="The-End-of-File"><a href="#The-End-of-File" class="headerlink" title="The End of File"></a>The End of File</h3><p>无论操作系统实际使用何种方法检测文件结尾，在C语言中，用<code>getchar()</code>读取文件检测到文件结尾时将返回一个特殊的值，即 <strong>EOF</strong>（end of file 的缩写)。<code>scanf()</code>函数检测到文件结尾时也返回 EOF 。通常， EOF 定义在 stdio.h 文件中：</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220415203947670.png" alt="image-20220415203947670"></p><p>Why -1? Normally, <code>getchar()</code> returns a value in the range 0 through 127, because those are values corresponding to the standard character set, but it might return values from 0 through 255 if the system recognizes an extended character set. In either case, the value -1 does not correspond to any character, so it can be used to signal the end of a file.</p><p>以下程序展现了怎么使用 EOF 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无需再定义 EOF ，因为 stdio.h 中已经定义过了。</li><li>变量 ch 的类型要用 <strong>int</strong> ，因为 <strong>char</strong> 类型的变量只能表示 0 ~ 255 的无符号整数，但是 EOF 的值是 -1。<code>getchar()</code> 函数的实际返回值的类型是 <strong>int</strong> ，所以它可以读取 EOF 字符。如果实现使用有符号的 <strong>char</strong> 类型，也可以把 ch 声明为 <strong>char</strong> 类型，但最好还是用更通用的形式。</li><li>由于 <code>getchar()</code>函数的返回类型是 <strong>int</strong> ，如果把<code>getchar()</code>的返回值赋给 <strong>char</strong> 类型的变量，一些编译器会警告可能丢失数据。</li><li>使用该程序进行键盘输入，要设法输入 EOF 字符。不能只输入字符 EOF ，也不能只输入 -1。正确的方法是，必须找出当前系统的要求。例如，在大多数 UNIX 和 LINUX 系统中，在一行开始处按下 <kbd>Ctrl</kbd>+<kbd>D</kbd>会传输文件结尾信号；在 PC中，要按下<kbd>Ctrl</kbd>+<kbd>Z</kbd>。</li></ul><h2 id="重定向和文件"><a href="#重定向和文件" class="headerlink" title="重定向和文件"></a>重定向和文件</h2><p>重定向输入让程序使用文件而不是键盘来输入，重定向输出让程序输出至文件而不是屏幕。</p><h3 id="重定向输入"><a href="#重定向输入" class="headerlink" title="重定向输入"></a>重定向输入</h3><p>假设已经编译了 echo_eof.c 程序，并生成了一个名为 echo_eof （或者在 Windows 系统中名为 echo_eof.exe）的可执行文件。运行该程序，输入可执行文件名：<code>./echo_eof</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416083513919.png" alt="image-20220416083513919"></p><p>我们在当前目录新建一个名为 hello.txt 的文件，并输入一些字符。我们使用重定向运算符 <strong>&lt;</strong> 使 hello.txt 文件与 stdin 流相关联，把文件中的内容导入 echo_eof 程序。echo_eof 程序本身并不知道（或不关心）输入的内容来自文件还是键盘，它只知道这是需要导入的字符流。<br>我们在终端上打上 <code>./echo_eof &lt; hello.txt</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416084842633.png" alt="image-20220416084842633"></p><p>屏幕上显示了我们之前在 hello.txt 中编辑的内容。</p><h3 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h3><p>现在假设要用 echo_eof 把键盘输入的内容发送到名为 snow 的文件中。然后，输入以下命令并开始输入：</p><p><code>./echo_eof&gt;snow</code></p><p><strong>&gt;</strong> 符号是第2个重定向运算符。它创建了一个名为 snow 的新文件，然后把 echo_eof 的输出重定向至该文件中。重定向把 stdout 从显示设备赋给 snow 文件。在新一行的开始处按下 <kbd>Crtl</kbd>+<kbd>Z</kbd>结束该程序。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416090207480.png" alt="image-20220416090207480"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416090717130.png" alt="image-20220416090717130"></p><h3 id="组合重定向"><a href="#组合重定向" class="headerlink" title="组合重定向"></a>组合重定向</h3><p>现在，建设你希望制作一份 snow 文件的副本，并命名为 savesnow。只需输入以下命令即可：</p><p><code>./echo_eof &lt; snow &gt; savesnow</code></p><p>下面的命令也起作用，因为命令与重定向运算符的顺序无关：</p><p><code>./echo_eof &gt; savesnow &lt; save</code></p><p>使用重定向运算符需要遵循的原则：</p><ul><li>重定向运算符连接一个可执行程序和一个数据文件，不能用于连接一个数据文件和另一个数据文件，也不能用于连接一个程序和另一个程序。</li><li>使用重定向运算符不能读取多个文件的输入，也不能把输出定向至多个文件。</li><li>通常，文件名和运算符之间的空格不是必须的。</li></ul><h2 id="创建更友好的用户界面"><a href="#创建更友好的用户界面" class="headerlink" title="创建更友好的用户界面"></a>创建更友好的用户界面</h2><h3 id="使用缓冲输入"><a href="#使用缓冲输入" class="headerlink" title="使用缓冲输入"></a>使用缓冲输入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* guess.c -- an inefficient and faulty number-guesser */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> guess = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pick an integer from 1 to 100. I will try to guess &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;it.\nRespond with a y if my guess is right and with&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nan n if it is wrong.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Uh...is your number %d?\n&quot;</span>, guess);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;y&#x27;</span>)      <span class="comment">/* get response, compare to y */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I knew I could do it!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416093951228.png" alt="image-20220416093951228"></p><p>我们来看看这个程序中都有什么问题。我们输入 n，程序居然打印了两条消息，假如我们心里想的是2，那么就猜失败了。错误的原因是，<code>getchar()</code>不仅读取了 n，还读取了我们为了刷新缓冲区的换行符，no 的错误同理。我们来修正这个问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416094828992.png" alt="image-20220416094828992"></p><p>我们先来分析下新加的这两行代码的好处。如果输入一个 n 和一个换行符的话，n 被外层 <strong>while</strong> 的<code>getchar()</code>接受，换行符被内层 <strong>while</strong> 接受，由于换行符不满足内层 <strong>while</strong> 的条件，会开启一轮新的外层循环。如果 n 之后有别的字符，其满足内层 <strong>while</strong> 的条件，进入后遇到 <code>continue;</code>，将会重新开始内层循环。所以这两行代码及解决掉了换行符的问题，也解决掉了多余字符的问题。</p><p>但是，该程序仍会把别的字符视为 n 。我们来解决这个问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((response = getchar()) != <span class="string">&#x27;y&#x27;</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Sorry, I understand only y or n.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;                 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们添加一个 <strong>char</strong> 类型的变量和 <strong>if</strong> 语句来进行筛选。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416100225969.png" alt="image-20220416100225969"></p><h3 id="混合数值和字符输入"><a href="#混合数值和字符输入" class="headerlink" title="混合数值和字符输入"></a>混合数值和字符输入</h3><p>该程序读入一个字符和两个数字，然后根据输入的两个数字指定的行数和列数打印该字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">char</span> cr, <span class="type">int</span> lines, <span class="type">int</span> width)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch;             <span class="comment">/* character to be printed    */</span></span><br><span class="line">    <span class="type">int</span> rows, cols;     <span class="comment">/* number of rows and columns */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a character and two integers:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;rows, &amp;cols);</span><br><span class="line">        display(ch, rows, cols);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter another character and two integers;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a newline to quit.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">char</span> cr, <span class="type">int</span> lines, <span class="type">int</span> width)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> row, col;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (row = <span class="number">1</span>; row &lt;= lines; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (col = <span class="number">1</span>; col &lt;= width; col++)</span><br><span class="line">            <span class="built_in">putchar</span>(cr);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);  <span class="comment">/* end line and start a new one */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416101937714.png" alt="image-20220416101937714"></p><p>屏幕上提示我们再输入字符，但没来得及输出，程序就退出了，这是什么原因呢？其实跟上例相似，又是换行符的问题。<code>scanf()</code>把我们用于刷新缓冲区的换行符仍留在输入队列中。和<code>scanf()</code>不同，<code>getchar()</code>不会跳过换行符，所以在进入下一轮迭代时，还没来得及输入字符，它就读取了换行符，然后将其赋给 ch 。</p><p>我们用与上例相仿的解决方案 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;rows, &amp;cols) != <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        display(ch, rows, cols);</span><br><span class="line">        <span class="keyword">while</span> (getchar() !=  <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter another character and two integers;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a newline to quit.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>while</strong> 循环实现了丢弃<code>scanf()</code>输入后面所有字符（包括换行符）的功能。值得注意的是，我们在 <strong>if</strong>  语句中使用一个 <strong>break</strong> 语句，可以在 <code>scanf()</code> 的返回值不等于2时终止程序，即如果一个或两个输入值不是整数或者遇到文件结尾就终止程序。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus note_5</title>
      <link href="//b3510ed.html"/>
      <url>//b3510ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="C-控制语句：分支和跳转"><a href="#C-控制语句：分支和跳转" class="headerlink" title="C 控制语句：分支和跳转"></a>C 控制语句：分支和跳转</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形式一</span></span><br><span class="line"><span class="keyword">if</span> (expression)</span><br><span class="line">    statement</span><br><span class="line"><span class="comment">// 形式二</span></span><br><span class="line"><span class="keyword">if</span> (expression)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement2</span><br><span class="line"><span class="comment">// 形式三</span></span><br><span class="line"><span class="keyword">if</span> (expression1)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (expression2)</span><br><span class="line">    statement2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement3</span><br><span class="line"><span class="comment">/*若是多条语句，必须用花括号包裹</span></span><br></pre></td></tr></table></figure><h3 id="ctype-h-系列的函数"><a href="#ctype-h-系列的函数" class="headerlink" title="ctype.h 系列的函数"></a>ctype.h 系列的函数</h3><p><strong>C</strong> 有一系列专门处理字符的函数，ctype.h头文件包含了这些函数的原型。这些函数接收一个字符作为参数，如果该字符属于某特殊的类别，就返回一个非零值（真）；否则，返回0（假）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换输入的字母，非字母字符保持不变</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span>            <span class="comment">// for isalpha()</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch))      <span class="comment">// if a letter,</span></span><br><span class="line">            <span class="built_in">putchar</span>(ch + <span class="number">1</span>);  <span class="comment">// display next letter</span></span><br><span class="line">        <span class="keyword">else</span>                  <span class="comment">// otherwise,</span></span><br><span class="line">            <span class="built_in">putchar</span>(ch);      <span class="comment">// display as is</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);              <span class="comment">// display the newline</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414193956898.png" alt="image-20220414193956898"></p><p>字符映射函数不会修改原始的参数，这些函数只会返回已修改的值。也就是说，下面的语句不改变 ch 的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tolower</span>(ch); <span class="comment">// 不影响 ch 的值</span></span><br><span class="line">ch = <span class="built_in">tolower</span>(ch); <span class="comment">//这样才会把 ch 转换成小写字母</span></span><br></pre></td></tr></table></figure><h3 id="else-与-if-配对"><a href="#else-与-if-配对" class="headerlink" title="else 与 if 配对"></a>else 与 if 配对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">6</span>)</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not good\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414195752705.png" alt="image-20220414195752705"></p><p>如果没有花括号，<strong>else</strong> 与离它最近的 <strong>if</strong> 匹配。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414200543289.png" alt="image-20220414200543289"></p><h3 id="备选拼写：iso646-h头文件"><a href="#备选拼写：iso646-h头文件" class="headerlink" title="备选拼写：iso646.h头文件"></a>备选拼写：iso646.h头文件</h3><p>如果在程序中包含该头文件，就可以使用 and 代替 &amp;&amp; 、or 代替 || 、not 代替 ！。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>!</strong> 运算符的优先级很高，比乘法运算符还高，与递增的运算符的优先级相同，只比圆括号的优先级低。<strong>&amp;&amp;</strong> 运算符的优先级比 <strong>||</strong> 运算符高，但是两者的优先级都比关系运算符低，比赋值运算符高。</p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p><code>while (90 &lt;= range &lt;= 100)</code>这种数学式的写法是不正确的。  </p><p>90 &lt;= range 返回 0 或 1，这两个值都小于 100，最终的返回值为1，这个循环会一直进行下去。</p><p>正确的写法为<code>while (90 &lt;= range &amp;&amp; range &lt;= 100)</code>。  </p><p>再来看一个例子。假设 ch 是 <strong>char</strong> 类型的变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定一个字符是否为小写字母</span></span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s a lowercase character.\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>该方法仅对像 ASCII 这样的字符编码有效，这些编码中相邻字母与相邻数字一一对应。但是，对于像 EBCDIC 这样的代码就没用了。相应的可移植方法是，用 ctype.h 系列中的 <code>islower()</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">islower</span>(ch))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s a lowercase character.\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符:  ?:"></a>条件运算符:  ?:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1 ? expression2 : expression3</span><br></pre></td></tr></table></figure><p>如果 expression1 为真，整个条件表达式的值是 expression2 的值；否则，是 expression3 的值。</p><h2 id="循环辅助：continue-和-break"><a href="#循环辅助：continue-和-break" class="headerlink" title="循环辅助：continue 和 break"></a>循环辅助：continue 和 break</h2><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>3种循环都可以使用 <strong>continue</strong> 语句。执行到该语句时，会跳过本次迭代的剩余部分，并开始下一轮迭代。如果 <strong>continue</strong> 语句在嵌套循环内，则只会影响包含该语句的内层循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a score (q to quit): &quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">100</span> || num &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is an invalid value. Try again: &quot;</span>, num);</span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">//跳转至 while 循环的测试条件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Valid value!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter another score (q to quit): &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414205428347.png" alt="image-20220414205428347"></p><p>更多例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该循环读取10个字符并重新显示它们，其中不包括换行符。</p><p>对于 <strong>for</strong> 循环，执行 <strong>continue</strong> 后的下一个行为是对更新表达式求值，然后是对循环测试表达式求值，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">10</span>; count++)</span><br><span class="line">&#123;</span><br><span class="line">ch = getchar()</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>while</strong> 循环的例子中，除了换行符，其余字符都显示；而本例中，换行符也计算在内，所以读取的10个字符中也包含换行符。</p><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>程序执行到循环的 <strong>break</strong> 语句中，会终止包含它的循环，并继续执行下一阶段。如果 <strong>break</strong> 语句位于嵌套循环内，它只会影响包含它的当前循环。</p><p>我们把演示 <strong>continue</strong> 的第一个例子中的 <strong>continue</strong> 改为 <strong>break</strong>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a score (q to quit): &quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">100</span> || num &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is an invalid value. Try again: &quot;</span>, num);</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出当前循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Valid value!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter another score (q to quit): &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414211933525.png" alt="image-20220414211933525"></p><h2 id="多重选择：switch-和-break"><a href="#多重选择：switch-和-break" class="headerlink" title="多重选择：switch 和 break"></a>多重选择：switch 和 break</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414213443430.png" alt="image-20220414213443430"></p><p>圆括号中的值是一个整数值（包括 <strong>char</strong> 类型），case 标签必须是整数类型（包括 <strong>char</strong> 类型）的常量或整型常量表达式。</p><p>我们来看一个使用多重标签的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vowels.c -- uses multiple labels</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> a_ct, e_ct, i_ct, o_ct, u_ct;</span><br><span class="line">    </span><br><span class="line">    a_ct = e_ct = i_ct = o_ct = u_ct = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter some text; enter # to quit.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> :  a_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span> :  e_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> :  i_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span> :  o_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span> :  u_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :   <span class="keyword">break</span>;</span><br><span class="line">        &#125;                    <span class="comment">// end of switch</span></span><br><span class="line">    &#125;                        <span class="comment">// while loop end</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number of vowels:   A    E    I    O    U\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                 %4d %4d %4d %4d %4d\n&quot;</span>,</span><br><span class="line">           a_ct, e_ct, i_ct, o_ct, u_ct);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414214549718.png" alt="image-20220414214549718"></p><p>如果 ch 是字母 i，<strong>switch</strong> 语句会定位到标签为 case ‘i’: 的位置。由于该标签没有关联 <strong>break</strong> 语句，所以程序流直接执行下一条语句，即 <code>i_ct++;</code>。如果 ch 是字母 I ，程序流会直接定位到 case ‘I’: 。假如我们把 <strong>switch</strong> 语句中所有的 <strong>break</strong> 去掉，如果 ch 是 字母 i，<code>i_ct++</code> <code>o_ct++</code> <code>u_ct++</code> 都会被执行。注意 <strong>switch</strong> 语句中的 <strong>break</strong> 只能跳出 <strong>switch</strong> ，不能跳出外层的 <strong>while</strong>。</p><p>如果使用 ctype.h 系列中的 <code>toupper()</code> 函数可以避免使用多重标签，比如改为<code>switch(toupper(ch))</code>。</p><h2 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a>goto 语句</h2><p>Kernighan and Ritchie refer to the <strong>goto</strong> statement as “infinitely abusable” and suggest that it “be used sparingly, if at all.”</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414221051238.png" alt="image-20220414221051238"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus note_4</title>
      <link href="//7c32207b.html"/>
      <url>//7c32207b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第六章-C控制语句：循环"><a href="#第六章-C控制语句：循环" class="headerlink" title="第六章 C控制语句：循环"></a>第六章 C控制语句：循环</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> num;</span><br><span class="line">    <span class="type">long</span> sum = <span class="number">0L</span>;      </span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter an integer to be summed &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(q to quit): &quot;</span>);</span><br><span class="line">    status = <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">while</span> (status == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter next integer (q to quit): &quot;</span>);</span><br><span class="line">        status = <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Those integers sum to %ld.\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093125376.png" alt="image-20220414093125376"></p><p>这个例子中有价值的不是 <strong>while</strong>，而是<code>scanf()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, scanf_value;</span><br><span class="line">scanf_value = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , scanf_value = %d&quot;</span>, a, scanf_value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093753800.png" alt="image-20220414093753800"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093820409.png" alt="image-20220414093820409"></p><p><code>scanf()</code>返回成功读取项的数量。在上述例子中，如果我们正确输入整数，<code>scanf()</code>会返回1；反之，<code>scanf()</code>读取失败返回0。在最开始的程序中，输入q退出只是一个提示，输入其他非数字字符也会退出。</p><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( expression ) <span class="comment">// 通用形式</span></span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>如果是单行语句，不需要用花括号；如果是多行语句，则需要用花括号。</p><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p>如果表达式的值非0，则会执行 statement 部分；反之，则不会执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414095159040.png" alt="image-20220414095159040"></p><p>把1改为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414095431881.png" alt="image-20220414095431881"></p><p>一般而言，所有的非零值都视为真，只有0被视为假。利用这一特性，我们可以用<code>while (goats)</code> 替换 <code>while (goats != 0)</code>。</p><h3 id="分号的位置"><a href="#分号的位置" class="headerlink" title="分号的位置"></a>分号的位置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n++ &lt; <span class="number">3</span>); <span class="comment">// line 7            </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n is %d\n&quot;</span>, n); <span class="comment">// line 8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s all this program does.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414100524507.png" alt="image-20220414100524507"></p><p>为什么我们使用了循环，只打印出来一行语句？  </p><p>原因在于第7行我们多加了一个分号，分号的加入会使得这一行执行完再进入下一行中，把分号去掉就是正常情况了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n++ &lt; <span class="number">3</span>)           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n is %d\n&quot;</span>, n);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s all this program does.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414101245984.png" alt="image-20220414101245984"></p><p>但有时候也可以故意使用这种写法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num)) != <span class="number">1</span></span><br><span class="line">; <span class="comment">// 不放在同一行，提高代码可读性</span></span><br></pre></td></tr></table></figure><p>如果输入的不是整数的话，循环会继续执行，直到我们输入了一个整数。</p><h3 id="优先级与关系运算符"><a href="#优先级与关系运算符" class="headerlink" title="优先级与关系运算符"></a>优先级与关系运算符</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414102627881.png" alt="image-20220414102627881"></p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (startExpression; testExpression; countExpression)<span class="comment">// 用分号隔开</span></span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414103232477.png" alt="image-20220414103232477"></p><h3 id="for-循环的变式"><a href="#for-循环的变式" class="headerlink" title="for 循环的变式"></a>for 循环的变式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递减计数器</span></span><br><span class="line"><span class="keyword">for</span> (secs = <span class="number">5</span>; secs &gt; <span class="number">0</span>; secs--)</span><br><span class="line"><span class="comment">// 可以递增其他的数字</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">2</span>; n &lt; <span class="number">60</span>; n = n + <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 可以用字符代替数字计数</span></span><br><span class="line"><span class="keyword">for</span> (ch = <span class="string">&#x27;a&#x27;</span>; ch &lt;= <span class="string">&#x27;z&#x27;</span>; ch++)</span><br><span class="line"><span class="comment">// 更改第二个表达式</span></span><br><span class="line"><span class="keyword">for</span> (num = <span class="number">1</span>; num*num &lt;= <span class="number">36</span>; num++)</span><br><span class="line"><span class="comment">// 更改第三个表达式为乘增</span></span><br><span class="line"><span class="keyword">for</span> (debt = <span class="number">100.0</span>;  debt &lt; <span class="number">150.0</span>; debt = debt * <span class="number">1.1</span>)</span><br><span class="line"><span class="comment">/* 第三个表达式可以使用任意合法的表达式。无论是什么表达式，每次迭代都会更新该表达式的值 */</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; y &lt;= <span class="number">75</span>; y = (++x * <span class="number">5</span>) + <span class="number">50</span>)</span><br><span class="line"><span class="comment">/* 可以省略一个或多个表达式（但不能省略分号），只要在循环中包含能结束循环的语句即可。 */</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">3</span>; ans &lt;= <span class="number">25</span>;)</span><br><span class="line">    ans = ans * n;</span><br><span class="line"><span class="comment">// 省略第二个表达式被始为真，所以下面的循环会一直执行</span></span><br><span class="line"><span class="keyword">for</span> (; ; )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Loop!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个表达式不一定是给变量赋初值，也可以使用printf()。</span></span><br><span class="line"><span class="comment">// 在执行循环的其他部分之前，只对第1个表达式求值一次或执行一次</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">printf</span>(<span class="string">&quot;Keep entering numbers!\n&quot;</span>); num != <span class="number">6</span>;  )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s the one I want!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414105229706.png" alt="image-20220414105229706"></p><h2 id="其他赋值运算符"><a href="#其他赋值运算符" class="headerlink" title="其他赋值运算符"></a>其他赋值运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414105728035.png" alt="image-20220414105728035"></p><p>以上提到的赋值运算符与 = 的优先级相同，即比 + 或 * 优先级低。</p><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>我们可以使用逗号运算符，在 <strong>for</strong> 循环头中包含更多的表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> FIRST_OZ = <span class="number">46</span>; <span class="comment">// 2013 rate</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> NEXT_OZ = <span class="number">20</span>;  <span class="comment">// 2013 rate</span></span><br><span class="line">    <span class="type">int</span> ounces, cost;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; ounces  cost\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ounces=<span class="number">1</span>, cost=FIRST_OZ; ounces &lt;= <span class="number">5</span>; ounces++,</span><br><span class="line">         cost += NEXT_OZ)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d   $%4.2f\n&quot;</span>, ounces, cost/<span class="number">100.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414110244025.png" alt="image-20220414110244025"></p><p>逗号运算符的性质：</p><ol><li>保证了被它分隔的表达式从左往右求值</li><li>整个逗号表达式的值是右侧项的值</li></ol><p>举个例子，语句<code>x = (y = 3, (z = ++y + 2) + 5);</code>的效果是：  </p><p>先把 3 赋给 y ，递增 y 为 4 ，然后把 4 加 2 之和 6 赋给 z ，接着加上5，最后把结果11 赋给 x 。</p><h2 id="出口条件循环：do-while"><a href="#出口条件循环：do-while" class="headerlink" title="出口条件循环：do while"></a>出口条件循环：do while</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">statement</span><br><span class="line"><span class="title function_">while</span> <span class="params">(expression)</span>; <span class="comment">// 注意分号</span></span><br></pre></td></tr></table></figure><p><strong>do while</strong> 能保证至少执行循环体中的内容一次。</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">6</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> CHARS = <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; ROWS; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (ch = (<span class="string">&#x27;A&#x27;</span> + row);  ch &lt; (<span class="string">&#x27;A&#x27;</span> + CHARS); ch++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414112040409.png" alt="image-20220414112040409"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus note_3</title>
      <link href="//a9cba629.html"/>
      <url>//a9cba629.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第五章-运算符、表达式和语句"><a href="#第五章-运算符、表达式和语句" class="headerlink" title="第五章 运算符、表达式和语句"></a>第五章 运算符、表达式和语句</h1><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><blockquote><p>赋值运算符： =</p><p>加法运算符： +</p><p>减法运算符： -</p><p>符号运算符： - 和 +</p><p>乘法运算符： *</p><p>除法运算符： /</p></blockquote><p>在除法运算中要注意，浮点数除法的结果是浮点数，而整数除法的结果是整数，整数除法结果的小数部分被丢弃。</p><h3 id="运算符优先级（从高至低）"><a href="#运算符优先级（从高至低）" class="headerlink" title="运算符优先级（从高至低）"></a>运算符优先级（从高至低）</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>结合律</th></tr></thead><tbody><tr><td>( )</td><td>从左到右</td></tr><tr><td>+ - （一元）</td><td>从右往左</td></tr><tr><td>*  /</td><td>从左往右</td></tr><tr><td>+ - （二元）</td><td>从左往右</td></tr><tr><td>=</td><td>从右往左</td></tr></tbody></table></div><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><h3 id="sizeof-运算符和-size-t-类型"><a href="#sizeof-运算符和-size-t-类型" class="headerlink" title="sizeof 运算符和 size_t 类型"></a>sizeof 运算符和 size_t 类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> intsize;</span><br><span class="line">    </span><br><span class="line">    intsize = <span class="keyword">sizeof</span> (<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d, n has %zd bytes; all ints have %zd bytes.\n&quot;</span>,</span><br><span class="line">           n, <span class="keyword">sizeof</span> n, intsize );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413175156982.png" alt="image-20220413175156982"></p><h3 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符%"></a>求模运算符%</h3><p>没什么好说的。</p><h3 id="递增运算符和递减运算符"><a href="#递增运算符和递减运算符" class="headerlink" title="递增运算符和递减运算符"></a>递增运算符和递减运算符</h3><blockquote><p>++ 和 —</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_post = a++; <span class="comment">// postfix: a is changed after its value is used</span></span><br><span class="line">b_pre = ++b; <span class="comment">// prefix: b is changed before its value is used</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, ++a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413180342859.png" alt="image-20220413180342859"></p><h2 id="Expressions-and-Statements"><a href="#Expressions-and-Statements" class="headerlink" title="Expressions and Statements"></a>Expressions and Statements</h2><h3 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h3><p>An <em>expression</em> consists of a combination of operators and operands.(An operand, recall, is what an operator operates on.)  An important property of <strong>C</strong> is that every <strong>C</strong> has a value.</p><blockquote><p>4</p><p>4 + 21</p><p>c = 3 + 8</p><p>5 &gt; 3</p></blockquote><h3 id="Statements"><a href="#Statements" class="headerlink" title="Statements"></a>Statements</h3><p><em>Statements</em> are the primary building blocks of a program. A program is a series of statements with some necessary punctuation. A statement is a complete instruction to the computer. In <strong>C</strong>, statements are indicated by a semicolon at the end.</p><blockquote><p>legs = 4;</p><p>;    // null statement</p><p>++x;</p></blockquote><p>根据 <strong>C</strong> 标准，声明不是语句。</p><h3 id="Side-Effects-and-Sequence-Points"><a href="#Side-Effects-and-Sequence-Points" class="headerlink" title="Side Effects and Sequence Points"></a>Side Effects and Sequence Points</h3><p>A <em>side effect</em> is the modification of a data object or file. For instance, the side effect of the statement <code>states = 50;</code> is to set the states variable to 50. Side effect? This looks more like main intent! From the standpoint of <strong>C</strong>, however, the main intent is evaluating expressions. Show <strong>C</strong> the expression <code>states = 50;</code>, and <strong>C</strong> evaluates it to 50. Evaluating that expression has the side effect of changing the states variable to 50. Similarly when you call the <code>printf()</code> function, the fact that is displays information is a side effect. (The value of <code>printf()</code>, recall, is the number of items displayed.)  </p><p>A <em>sequence point</em> is a point in program execution at which all side effects are evaluated before going on to the next step. In <strong>C</strong>, the semicolon in a statement marks a sequence point. That means all changes made by assignment operators, increment operators, and decrement operators in a statement must take place a program proceeds to the next statement.</p><h3 id="Compound-Statements-Blocks"><a href="#Compound-Statements-Blocks" class="headerlink" title="Compound Statements (Blocks)"></a>Compound Statements (Blocks)</h3><p>A <em>compound statements</em> is two or more statements grouped together by enclosing them in braces{}, it is else called a <em>block</em>.</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>通常，在语句和表达式中应使用相同的变量和常量。但是，如果使用混合类型，<strong>C</strong> 会采用一套规则进行自动类型转换。</p><ol><li>当类型转换出现在表达式时，无论是 <strong>unsigned</strong> 还是 <strong>signed</strong> 的 <strong>char</strong> 和 <strong>short</strong> 都会被自动转换为 <strong>int</strong>，如有必要时会被转换为 <strong>unsigned int</strong>（如果 <strong>short</strong> 与 <strong>int</strong> 的大小相同，<strong>unsigned short</strong> 就会比 <strong>int</strong> 大。这种情况下，<strong>unsigned short</strong> 会被转换成 <strong>unsigned int</strong>）。在<strong>K&amp;R</strong> 那时的 <strong>C</strong> 中，<strong>float</strong> 会被自动转换成 <strong>double</strong> （目前的 <strong>C</strong> 不是这样）。由于都是从较小类型转换为较大类型，所以这些转换被称为升级（promotion)。</li><li>涉及两种类型的运算，两个值会被分别转换为两种类型的更高级别。</li><li>类型的级别从高到低依次是 <strong>long double</strong>, <strong>double</strong>, <strong>float</strong>, <strong>unsigned long long</strong>, <strong>unsigned long</strong>, <strong>unsigned int</strong>, <strong>int</strong>。例外的情况是，当<strong>long</strong> 和 <strong>int</strong> 的大小相同时，<strong>unsigned int</strong> 比 <strong>long</strong> 的级别高。之所以  <strong>short</strong> 和 <strong>char</strong> 类型没有列出，是因为它们已经被升级到 <strong>int</strong> 或 <strong>unsigned int</strong>。</li><li>在赋值表达式语句中，计算的最终结果会被转换为被赋值变量的类型。这个过程可能导致类型升级或降级（demotion）。</li><li>当作为函数参数传递时，<strong>char</strong> 和 <strong>short</strong> 被转换为 <strong>int</strong>，<strong>float</strong> 被转换为 <strong>double</strong>。</li></ol><h3 id="强制类型转换运算符"><a href="#强制类型转换运算符" class="headerlink" title="强制类型转换运算符"></a>强制类型转换运算符</h3><p>The parentheses and type name together constitute a <em>cast operator</em>.</p><blockquote><p>(type)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">snow = <span class="number">1.9</span> + <span class="number">1.7</span>;</span><br><span class="line">snow = (<span class="type">int</span>)<span class="number">1.6</span> + (<span class="type">int</span>)<span class="number">1.7</span>;</span><br></pre></td></tr></table></figure><h2 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pound</span><span class="params">(<span class="type">int</span> n)</span>;   <span class="comment">// ANSI function prototype declaration</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> times = <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;!&#x27;</span>;   <span class="comment">// ASCII code is 33</span></span><br><span class="line">    <span class="type">float</span> f = <span class="number">6.0f</span>;</span><br><span class="line">    </span><br><span class="line">    pound(times);    <span class="comment">// int argument</span></span><br><span class="line">    pound(ch);       <span class="comment">// same as pound((int)ch);</span></span><br><span class="line">    pound(f);        <span class="comment">// same as pound((int)f);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pound</span><span class="params">(<span class="type">int</span> n)</span>    <span class="comment">// ANSI-style function header</span></span><br><span class="line">&#123;                    <span class="comment">// says takes one int argument</span></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413200528750.png" alt="image-20220413200528750"></p><blockquote><ul><li><strong>void</strong> 表示该函数没有返回值</li><li>这里的 n 是形参（parameter）</li><li>times、ch、f 是实参（argument）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus note_2</title>
      <link href="//9551854e.html"/>
      <url>//9551854e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第四章-字符串和格式化输入-输出"><a href="#第四章-字符串和格式化输入-输出" class="headerlink" title="第四章 字符串和格式化输入/输出"></a>第四章 字符串和格式化输入/输出</h1><h2 id="字符串简介"><a href="#字符串简介" class="headerlink" title="字符串简介"></a>字符串简介</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s!&quot;</span>, name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过<code>char name[8];</code>创建了一个包含8个存储单元的数组，每个单元存储一个 <strong>char</strong> 类型的值。  </p><p>虽然创建了8个存储单元，但实际上我们最多输入7个字符，剩下一个字节留给空字符 \0 。  </p><p>如果在输入超过7个字符，虽然最后内容也能打印出来，但发生了字符数组越界的行为，似乎是非常危险的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">//提供strlen()函数的原型</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d, memory = %zd&quot;</span>, <span class="built_in">strlen</span>(name), <span class="keyword">sizeof</span>(name));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用<code>strlen()</code>查看字符串的长度，<code>sizeof()</code>显示字符数组所占的字节数。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412175635919.png" alt="image-20220412175635919"></p><h2 id="常量和-C-预处理器"><a href="#常量和-C-预处理器" class="headerlink" title="常量和 C 预处理器"></a>常量和 C 预处理器</h2><h3 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP <span class="string">&#x27;\a&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OOPS <span class="string">&quot;Now you have done it!&quot;</span></span></span><br></pre></td></tr></table></figure><p>除了在开头使用<code>#include</code>外，我们还可以定义符号常量。比如我们定义了 PI ，编译程序时，程序中所有的 PI 都会被替换成 3.14159。用大写表示符号常量是 <strong>C</strong> 语言一贯的传统。</p><h3 id="const-限定符"><a href="#const-限定符" class="headerlink" title="const 限定符"></a>const 限定符</h3><p>C90 标准新增了 <strong>const</strong> 关键字，用于限定一个<strong>变量</strong>为只读。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MONTHS = <span class="number">12</span>; <span class="comment">// MONTHS 在程序中不可更改，值为 12</span></span><br></pre></td></tr></table></figure><h3 id="明示常量"><a href="#明示常量" class="headerlink" title="明示常量"></a>明示常量</h3><p><strong>C</strong> 头文件 limits.h 和 float.h 分别提供了与整数类型和浮点类型大小相关限制的详细信息。每个头文件都定义了一系列供实现使用的明示常量。例如，limits.h 头文件包含以下类似的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MAX +32767</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MIN -32768</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span>    <span class="comment">// integer limits</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span>     <span class="comment">// floating-point limits</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Some number limits for this system:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Biggest int: %d\n&quot;</span>, INT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Smallest long long: %lld\n&quot;</span>, LLONG_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;One byte = %d bits on this system.\n&quot;</span>, CHAR_BIT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Largest double: %e\n&quot;</span>, DBL_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Smallest normal float: %e\n&quot;</span>, FLT_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float precision = %d digits\n&quot;</span>, FLT_DIG);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float epsilon = %e\n&quot;</span>, FLT_EPSILON);</span><br><span class="line">    <span class="comment">// FIT_EPSILON 1.00和比1.00大的最小 float 类型值之间的差值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412191521389.png" alt="image-20220412191521389"></p><h2 id="printf"><a href="#printf" class="headerlink" title="printf ()"></a>printf ()</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412210723183.png" alt="image-20220412210723183"></p><h3 id="printf-的转换说明修饰符"><a href="#printf-的转换说明修饰符" class="headerlink" title="printf() 的转换说明修饰符"></a>printf() 的转换说明修饰符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]\n&quot;</span>, a);<span class="comment">// 默认</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%2d]\n&quot;</span>, a);<span class="comment">// 系统使用了更宽的字段</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%5d]\n&quot;</span>, a);<span class="comment">// 数字代表最小字段宽度，默认右对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%-5d]\n&quot;</span>, a);<span class="comment">// -修饰符表示左对齐</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">-666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%+d,%+d\n&quot;</span>, a, b);<span class="comment">// +修饰符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;% d,% d\n&quot;</span>, a, b);<span class="comment">// 空格修饰符</span></span><br><span class="line"><span class="type">float</span> c = <span class="number">6.666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, c);<span class="comment">// 保留两位小数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zd\n&quot;</span>, <span class="keyword">sizeof</span>(c));<span class="comment">// 表示size_t类型的值，size_t是sizeof返回的类型（C99）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412193535096.png" alt="image-20220412193535096"></p><h3 id="转换说明的意义"><a href="#转换说明的意义" class="headerlink" title="转换说明的意义"></a>转换说明的意义</h3><p>It converts a value stored in the computer in some binary format to a series of characters (a string) to be displayed. For example, the number 76 may be stored internally as binary 01001100. The %d conversion specifier converts this to characters 7 and 6, displaying 76.</p><h4 id="转换不匹配"><a href="#转换不匹配" class="headerlink" title="转换不匹配"></a>转换不匹配</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGES 336</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORDS 65618</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> num = PAGES;</span><br><span class="line">    <span class="type">short</span> mnum = -PAGES;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num as short and unsigned short:  %hd %hu\n&quot;</span>, num, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-num as short and unsigned short: %hd %hu\n&quot;</span>, mnum, mnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num as int and char: %d %c\n&quot;</span>, num, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;WORDS as int, short, and char: %d %hd %c\n&quot;</span>, WORDS, WORDS, WORDS);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412195329422.png" alt="image-20220412195329422"></p><ul><li>第一行的输出没有问题。</li><li>第二行 short int 的大小为2字节，系统使用二进制补码来表示有符号整数。我们来推导一下65200是怎么来的。<ol><li>336 转换为二进制 0000000101010000</li><li>二进制中1和0互相替换，再加上1，得到补码1111111010110000，对应-336</li><li>由于%hu，这里是无符号整数，1111111010110000转换为十进制65200</li></ol></li><li>第三行 char 是一个字节。当<code>printf()</code>使用 %c 打印336时，它只会查看存储336的2字节中的后1字节。这种截断相当于用一个整数除以256，只保留其余数。在这种情况下，余数是80，对应的 ASCII 值是字符 P。</li><li>第四行分析与第三行类似，这里是取除以65536后的余数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* floatcnv.c -- mismatched floating-point conversions */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> n1 = <span class="number">3.0</span>;</span><br><span class="line">    <span class="type">double</span> n2 = <span class="number">3.0</span>;</span><br><span class="line">    <span class="type">long</span> n3 = <span class="number">2000000000</span>;</span><br><span class="line">    <span class="type">long</span> n4 = <span class="number">1234567890</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1e %.1e %.1e %.1e\n&quot;</span>, n1, n2, n3, n4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld %ld\n&quot;</span>, n3, n4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld %ld %ld %ld\n&quot;</span>, n1, n2, n3, n4);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412204054072.png" alt="image-20220412204054072"></p><p>基于作者的系统：  </p><p>第一行错误原因：<strong>float</strong> 类型的值作为<code>printf()</code>参数时会被转换成 <strong>double</strong> 类型。当 <code>printf()</code>查看 n3 （本系统是4的字节值）时，除了查看 n3 的4字节外，还2会查看 n3 相邻的4字节，共8字节单元。接着，它将8字节单元中的位组合解释成浮点数。  </p><p>第三行错误原因与参数传递有关，思考下图。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412204822214.png" alt="image-20220412204822214"></p><h3 id="printf-的返回值"><a href="#printf-的返回值" class="headerlink" title="printf() 的返回值"></a>printf() 的返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> bph2o = <span class="number">212</span>;</span><br><span class="line">    <span class="type">int</span> rv;</span><br><span class="line">    </span><br><span class="line">    rv = <span class="built_in">printf</span>(<span class="string">&quot;%d F is water&#x27;s boiling point.\n&quot;</span>, bph2o);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The printf() function printed %d characters.\n&quot;</span>, rv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412205602955.png" alt="image-20220412205602955"></p><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><blockquote><ul><li>如果用 <code>scanf()</code> 读取基本变量类型的值，在变量名前加上一个&amp;</li><li>如果用 <code>scanf()</code> 把字符串读入字符数组中，不要使用&amp;</li></ul></blockquote><p><code>scanf()</code>函数使用空白（换行符、制符表和空格）把输入分成多个字段。在依次把转换说明和字段匹配时跳过空白。  </p><p>唯一例外的是%c转换说明。根据%c，<code>scanf()</code>会读取每个字符，包括空白。  </p><p><code>scanf()</code>函数所用的转换说明与<code>printf()</code>函数几乎相同。主要的区别是，对于<strong>float</strong>类型和<strong>double</strong>类型，<code>printf()</code>都使用%f、%e、%E、%g和%G 转换说明。而<code>scanf()</code>只把它们用于<strong>float</strong>类型，<strong>double</strong>类型要用 l 修饰符。</p><h3 id="从-scanf-角度看输入"><a href="#从-scanf-角度看输入" class="headerlink" title="从 scanf() 角度看输入"></a>从 scanf() 角度看输入</h3><p>假设<code>scanf()</code>根据一个%d转换说明读取一个整数。<code>scanf()</code>函数每次读取一个字符，跳过所有空白的字符，直到遇到第1个空白字符才开始读取。因为要取整数，所有<code>scanf()</code>希望发现一个数字字符或者一个符号（+或-）。如果找到一个数字或符号，它便保存该字符，并读取下一个字符。如果下一个字符是数字，它便保存该数字并读取下一个字符。<code>scanf()</code>不断地读取和保存字符，直到遇到非数字字符。如果遇到一个非数字字符，它便认为读到了整数的末尾。然后，<code>scanf()</code>把非数字字符放回输入。这意味着程序在下一次输入时，首先读到的是上一次读取丢弃的非数字字符。  </p><p>如果使用字段宽度，<code>scanf()</code>会在字段结尾或第1个空白字符处停止读取。  </p><p>如果用%s转换说明，<code>scanf()</code>会读取除空白以外的所有字符。<code>scanf()</code>跳过空白开始读取第1个非空白字符，并保存非空白字符直到再次遇到空白。  </p><p>来看一个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412214406445.png" alt="image-20220412214406445"></p><p>我们输入1和a，为什么a没有被打印出来？  </p><p>程序稍作改动。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412214559341.png" alt="image-20220412214559341"></p><p>这次a成功打印出来了，想想为什么？</p><p>下面的例子关于使用<code>scanf()</code>修饰符 * (suppress assignment)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter three integers:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The last integer was %d\n&quot;</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412215035333.png" alt="image-20220412215035333"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C Primer Plus note_1</title>
      <link href="//c58d4f4.html"/>
      <url>//c58d4f4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="第一章-初识C语言"><a href="#第一章-初识C语言" class="headerlink" title="第一章 初识C语言"></a>第一章 初识C语言</h2><h3 id="编程的七个步骤"><a href="#编程的七个步骤" class="headerlink" title="编程的七个步骤"></a>编程的七个步骤</h3><blockquote><ol><li>Define the program objectives</li><li>Design the program</li><li>Write the code</li><li>Compile</li><li>Run the program</li><li>Test and debug the program</li><li>Maintain and modify the program</li></ol></blockquote><p> The moral here is that you should develop the habit of planning before coding. Use the ancient but honorable pen-and-pencil technology to jot down the objectives of your program and to outline the design. If you do so, you eventually will reap substantial dividends in time saved and satisfaction gained. </p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411193803765.png" alt="image-20220411193803765"></p><h3 id="编译器和连接器"><a href="#编译器和连接器" class="headerlink" title="编译器和连接器"></a>编译器和连接器</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411191643812.png" alt="image-20220411191643812"></p><hr><h2 id="第二章-C语言概述"><a href="#第二章-C语言概述" class="headerlink" title="第二章 C语言概述"></a>第二章 C语言概述</h2><h3 id="include-指令和头文件"><a href="#include-指令和头文件" class="headerlink" title="#include 指令和头文件"></a>#include 指令和头文件</h3><blockquote><p><code>#include &lt;stdio.h&gt;</code></p></blockquote><p> The <code>#include</code> statement is an example of a <strong>C</strong> <em>preprocessor directive</em>. In general, <strong>C</strong> compilers perform some preparatory work on source code before compiling; this is termed <em>preprocessing</em>.</p><p> The <code>stdio.h</code> file is supplied as part of all <strong>C</strong> compiler packages. It contains information about input and output functions, such as <code>printf()</code> , for the compiler to use. The name stands for <em>standard input/output header</em>. <strong>C</strong> peaple call a collection of information that goes at the top of a file a header, and <strong>C</strong> implementations typically come with several header files.  </p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main() 函数"></a>main() 函数</h3><blockquote><p><code>int main (void)</code></p></blockquote><p> The <strong>int</strong> is the <code>main()</code> function’s return type. That means that kind of value of value <code>main()</code> can return is an integer.  </p><p> The parentheses following a function name generally enclose information being passed along to the function. For this simple example, nothing is being passed along, so the parentheses contain the word <strong>void</strong>.  </p><blockquote><p>main()</p></blockquote><p> If you browse through ancient <strong>C</strong> code, you’ll often see programs starting off with the following format: <code>main()</code>  </p><p> The C90 standard grudgingly tolerated this form, but the C99 and C11 standards don’t. So even if you current compiler lets you do this, don’t.</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p> 在程序中，被<code>/* */</code>两个符号括起来的是程序的注释。  </p><p> C99 新增了另一种风格的注释<code>//</code>，仅限于单行。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote><p><code>int num;</code></p></blockquote><p> The word <strong>int</strong> is a <strong>C</strong> <em>keyword</em> identifying one of the basic <strong>C</strong> data types. The word <strong>num</strong> in this example is an <em>identifier</em> —— that is, a name you select for a variable, a function, or somme other entity.  </p><p> In <strong>C</strong>, all variables must be declared before they are used.  </p><p> Traditionally, <strong>C</strong> has required that variables be declared at the beginning of a block with no other kind of statement allowed to come before and of the declarations.  </p><p> C99 and C11, following the practice of C++, let you place declarations about anywhere in a block. However, you still must declare a variable before its first use.</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p> 可以用小写字母、大写字母、数字和下划线（_）来命名。而且，名称的第1个字符必须是字母或下划线，不能是数字。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411200854738.png" alt="image-20220411200854738"></p><h3 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf() 函数"></a>printf() 函数</h3><p> the <strong>f</strong> in <code>printf()</code> is a reminder that this is a <em>formatting</em> print function.</p><hr><h2 id="数据和-C"><a href="#数据和-C" class="headerlink" title="数据和 C"></a>数据和 C</h2><blockquote><ul><li>The smallest unit of memory called a <em>bit</em>. It can hold one of  the two values: 0 or 1.</li><li>The <em>byte</em> is the usual unit of computer memory. For nearly all machines, a byte is 8 bits, and that is the standard definition, at least when used to measure storage.</li><li>A <em>word</em> is the natural unit of memory for a given computer design. For 8-bit microcomputers, such as the original Apples, a word is just 8 bits. Since then, personal computers moved up to 16-bit words. 32-bit words, and, at the present, 64-bit words. Larger word sizes enable faster transfer of data and allow more memory to be accessed.</li></ul></blockquote><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="int-类型"><a href="#int-类型" class="headerlink" title="int 类型"></a>int 类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 int 变量</span></span><br><span class="line"><span class="type">int</span> erns;</span><br><span class="line"><span class="type">int</span> hogs, cows, goats;</span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="type">int</span> hogs = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> cows = <span class="number">32</span>, goats = <span class="number">14</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">int</span> snow;</span><br><span class="line">snow = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p> <strong>C</strong> 语言把大多数整型常量视为 <strong>int</strong> 类型，但是非常大的整数除外。  </p><p> The <strong>%d</strong> notation is used to indicate just where in a line the integer is to be printed. The <strong>%d</strong> is called a <em>format specifier</em> because it indicates the form that <code>printf()</code> uses to display a value.</p><h5 id="显示八进制和十六进制"><a href="#显示八进制和十六进制" class="headerlink" title="显示八进制和十六进制"></a>显示八进制和十六进制</h5><blockquote><ul><li>以十进制显示数字，使用<strong>%d</strong></li><li>以八进制显示数字，使用<strong>%o</strong></li><li>以十六进制显示数字，使用<strong>%x</strong></li><li>要显示各进制数的前缀0、0x 和 0X，分别使用<strong>%#o</strong>、<strong>%#x</strong>、<strong>%#X</strong></li></ul><p>八进制：Octal</p><p>十六进制：Hexadecimal</p></blockquote><h4 id="其他整数类型"><a href="#其他整数类型" class="headerlink" title="其他整数类型"></a>其他整数类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思考short、long和unsigned的含义 </span></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> estine;</span><br><span class="line"><span class="type">long</span> johns; <span class="comment">//打印用 %ld</span></span><br><span class="line"><span class="type">short</span> <span class="type">int</span> erns;</span><br><span class="line"><span class="type">short</span> ribs; <span class="comment">//打印用 %hd</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s_count;</span><br><span class="line"><span class="type">unsigned</span> players; <span class="comment">//打印用 %u</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> headcount; <span class="comment">//打印用 %lu</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> yesvotes;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ago; <span class="comment">//打印用 %lld</span></span><br></pre></td></tr></table></figure><p> 现在，个人计算机常见的设置是，<strong>long long</strong> 占64位，<strong>long</strong> 占32位，<strong>short</strong> 占16位，<strong>int</strong> 占16位或32位（依计算机的自然字长而定）。  </p><p> 16 位 <strong>unsigned int</strong> 允许的取值范围是 0~65535，而不是-32768~32767。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411211443768.png" alt="image-20220411211443768"></p><p> 在 <strong>int</strong> 为16位、<strong>long</strong> 为32位的系统中，会把7作为16位存储，把7L作为32位存储。类似地，在支持 <strong>long long</strong> 类型的系统中，也可以使用 ll 或 LL 后缀来表示该类型的值。</p><h4 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">4294967295</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, i, i+<span class="number">1</span>, i+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u %u %u\n&quot;</span>, j, j+<span class="number">1</span>, j+<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411212214163.png" alt="image-20220411212214163"></p><p> The unsigned integer j is acting like a car’s odometer. When it reaches its maximun value, it starts over at the beginning. The in teger i acts similarly. The main differences is that the <strong>unsigned int</strong> variable j, like an odoometer, begins at 0, but the <strong>int</strong> variabel i begins at -2147483648.</p><p> The behavior described here is mandated by the rules of C for unsigned types. The standard doesn’t define how signed types should behave. The behavior shown here is typical, but you could encounter somrthing different.</p><h3 id="char-类型"><a href="#char-类型" class="headerlink" title="char 类型"></a>char 类型</h3><p> The <strong>char</strong> type is used for storing characters such as and punctuation marks, but technically it is an integer type.Because the <strong>char</strong> type actually stores integers, not characters.  </p><p> The standard <strong>ASCII</strong> code runs numerically from 0 to 127. This range is small enough that 7 bits can hold it. The <strong>char</strong> typpe is typically defined as an 8-bit unit of memory, so it is more than large enough to encompass the standard <strong>ASCII</strong> code. </p><p>  The <strong>C</strong> language defines a byte to be the number of bits used by type <strong>char</strong>.</p><p> 使用 ASCII 码时，注意数字和数字字符的区别。例如，字符4对应的 ASCII 码是52. ‘4’ 表示字符4，而不是数字4.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="type">char</span> snow;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">snow = <span class="string">&#x27;S&#x27;</span>; <span class="comment">// 只能用单引号包括，不加单引号或用双引号是不对的</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">char</span> snow = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果把&#x27;SNOW&#x27;赋给snow，snow的值将会是&#x27;W&#x27;，想想为什么</span></span><br></pre></td></tr></table></figure><h4 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411220935369.png" alt="image-20220411220935369"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转义序列赋给字符变量</span></span><br><span class="line"><span class="type">char</span> nerf = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 稍后打印变量 nerf 的效果是，在屏幕上另起一行</span></span><br><span class="line"><span class="type">char</span> beep = <span class="string">&#x27;\007&#x27;</span><span class="comment">// 用八进制ASCII码表示字符，效果与&#x27;\a&#x27;等同</span></span><br></pre></td></tr></table></figure><h4 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412081420834.png" alt="image-20220412081420834"></p><h4 id="Signed-or-Unsigned"><a href="#Signed-or-Unsigned" class="headerlink" title="Signed or Unsigned?"></a>Signed or Unsigned?</h4><p> Some <strong>C</strong> implementations make <strong>char</strong> a signed type. This means a <strong>char</strong> can hold values typically in the range -128 through 127. Other implementations make <strong>char</strong> an unsigned type, which provides a range of 0 through 255.  </p><p> As of C90, <strong>C</strong> enabled you to use the keywords <strong>signed</strong> and <strong>unsigned</strong> with <strong>char</strong>.</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412082611769.png" alt="image-20220412082611769"></p><p> 指数计数法是科学计数法在计算机中的写法。  </p><p> <strong>C</strong> 标准规定，<strong>float</strong> 类型必须至少能表示6位有效数字，且取值范围至少是$10^{-37}$ ~ $10^{+37}$ 。通常，系统储存一个浮点数要占用32位。其中8位用于表示指数的值和符号，剩下24位用于表示非指数部分（也叫做尾数或有效数）及其符号。  </p><p> <strong>C</strong> 语言提供的另一种浮点类型是 <strong>double</strong>（意为双精度）。<strong>double</strong>类型和 <strong>float</strong> 类型的最小取值范围相同，但至少必须能表示10位有效数字。一般情况下，<strong>double</strong> 占用64位而不是32位。一些系统将多出的 32 位全部用来表示非指数部分，这不仅增加了有效数字的位数（即提高了精度），而且还减少了舍入误差。另一些系统把其中的一些位分配给指数部分，以容纳更大的指数，从而增加了可表示数的范围。无论哪种方法，<strong>double</strong> 类型的值至少有13位有效数字，超过了标准的最低位数规定。  </p><p> <strong>C</strong> 语言的第3种浮点数类型是 <strong>long double</strong>，以满足比 <strong>double</strong> 类型更高的精度要求。  </p><p>  默认情况下，编译器假设浮点型常量是 <strong>double</strong> 类型的精度。在浮点数后面加上 f 或 F 后缀可覆盖默认设置，编译器会将浮点型常量看作 <strong>float</strong> 类型。使用 l 或 L 后缀使得数字成为 <strong>long double</strong> 类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> aboat = <span class="number">32000.0</span>; </span><br><span class="line"><span class="type">double</span> abet = <span class="number">2.14e9</span>;</span><br><span class="line"><span class="comment">// %f 打印十进制，%e 打印指数计数法，%a 打印十六进制格式</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> dip = <span class="number">5.32e-5</span>;</span><br><span class="line"><span class="comment">// 打印使用 %Lf、%Le、%La</span></span><br></pre></td></tr></table></figure><h4 id="浮点值的上溢和下溢"><a href="#浮点值的上溢和下溢" class="headerlink" title="浮点值的上溢和下溢"></a>浮点值的上溢和下溢</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> overflow = <span class="number">3.4E38</span> * <span class="number">100.0f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, overflow);<span class="comment">// 上溢</span></span><br><span class="line"><span class="type">float</span> underflow = <span class="number">0.1234E-38</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, underflow / <span class="number">10</span>);<span class="comment">// 下溢</span></span><br><span class="line"><span class="type">float</span> x = <span class="number">5.1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="built_in">asin</span>(x));</span><br><span class="line"><span class="type">float</span> a, b;</span><br><span class="line">b = <span class="number">2.0e20</span> + <span class="number">1.0</span>;</span><br><span class="line">a = b - <span class="number">2.0e20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, a);<span class="comment">// 浮点数舍入错误，计算机缺少足够的小数位数来完成正确的运算。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412092359300.png" alt="image-20220412092359300"></p><h3 id="类型大小"><a href="#类型大小" class="headerlink" title="类型大小"></a>类型大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* c99 provides a %zd specifier for sizes */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type int has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type char has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long long has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412093309133.png" alt="image-20220412093309133"></p><h3 id="刷新输出"><a href="#刷新输出" class="headerlink" title="刷新输出"></a>刷新输出</h3><p> <code>printf()</code> statements send output to an intermediate storage area called a <em>buffer</em>. It is sent when the buffer gets full, when a newline character is encountered, or when there is impending input.</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记（一）</title>
      <link href="//62d7d297.html"/>
      <url>//62d7d297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>注意：对于中文网页需要使用<code>&lt;meta charest=&quot;UTF-8&quot;&gt;</code>声明编码，否则会出现乱码。</p><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>学习HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407091709917.png" alt="image-20220407091709917"></p><p>注意：doctype声明可以不区分大小写</p><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p>HTML使用来描述网页的一种语言。</p><ul><li>HTML: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li><li>HTML 不是一种编程语言， 而是一种<strong>标记</strong>语言</li><li>标记语言是一套<strong>标记标签</strong></li><li>HTML 使用标记标签来<strong>描述</strong>网页</li><li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li><li>HTML文档也叫做 <strong>web</strong> 页面</li></ul><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ul><li>HTML 标签是由<strong>尖括号</strong>包围的关键词，比如<code>&lt;html&gt;</code></li><li>HTML 标签总是<strong>成对出现</strong>的， 比如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li></ul><h3 id="Web-浏览器"><a href="#Web-浏览器" class="headerlink" title="Web 浏览器"></a>Web 浏览器</h3><p>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p><h3 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407093357883.png" alt="image-20220407093357883"></p><h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>HTML 标题是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>HTML 段落是通过标签<code>&lt;p&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><p>HTML 链接是通过标签<code>&lt;a&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href 是 hypertext reference 的缩写</p><h3 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h3><p>HTML 图像是通过标签<code>&lt;img&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>src 是 Source 的缩写</p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407104014764.png" alt="image-20220407104014764"></p><h3 id="实例解析"><a href="#实例解析" class="headerlink" title="实例解析"></a>实例解析</h3><p><code>&lt;p&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;p&gt;</code>元素定义了 HTML 文档中的一个段落。  </p><p><code>&lt;body&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;body&gt;</code>元素定义了 HTML 文档的主体。  </p><p><code>&lt;html&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;html&gt;</code>元素定义了整个 HTML 文档。</p><h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><p>属性是 HTML 元素提供的附加信息。</p><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称/值对的形式出现，<strong>比如：name=”value”</strong>。</li></ul><h3 id="属性实例"><a href="#属性实例" class="headerlink" title="属性实例"></a>属性实例</h3><p>HTML 链接由<code>&lt;a&gt;</code>标签定义。链接的地址在 <strong>href 属性</strong> 中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：属性值应该被包括在引号内。双引号常用，使用单引号也没有问题。但若属性值本身就含有双引号，我们应该使用单引号。</p><h2 id="HTML-标题-1"><a href="#HTML-标题-1" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><h3 id="HTML-标题-2"><a href="#HTML-标题-2" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>标题通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来进行定义。  </p><p><code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题。  </p><p>浏览器会自动地在标题的前后添加空行。</p><h3 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h3><p><code>&lt;hr&gt;</code>标签在 HTML 页面中创建水平线，可用于分隔内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-段落-1"><a href="#HTML-段落-1" class="headerlink" title="HTML 段落"></a>HTML 段落</h2><h3 id="HTML-段落-2"><a href="#HTML-段落-2" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>段落是通过<code>&lt;p&gt;</code>标签定义的。  </p><p>浏览器会自动地在段落的前后添加空行。（<code>&lt;/p&gt;</code>是块级元素）</p><h3 id="HTML-拆行"><a href="#HTML-拆行" class="headerlink" title="HTML 拆行"></a>HTML 拆行</h3><p>想要换行可以使用<code>&lt;br&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落<span class="tag">&lt;<span class="name">br</span>&gt;</span>演示了分行的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于关闭标签没有任何意义，因此它没有结束标签。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407113955408.png" alt="image-20220407113955408"></p><p>贴一下评论区的笔记，我学的这个教程应该是比较老的，先学一遍基础，以后有时间再学新的内容。</p><h3 id="HTML-输出"><a href="#HTML-输出" class="headerlink" title="HTML 输出"></a>HTML 输出</h3><p>对于 HTML ，我们无法通过在 HTML 代码中添加额外的空格或换行来改变输出的结果。  </p><p>当显示页面时，浏览器会移除源代码中多余的空格和红行。所有连续的空格或空行都会被算作一个空格。</p><h2 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>放大文本<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>缩小文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407120057808.png" alt="image-20220407120057808"></p><blockquote><p><code>&lt;b&gt;</code>—-bold</p><p><code>&lt;i&gt;</code>—-italic</p><p><code>&lt;em&gt;</code>—-emphasize</p><p><code>&lt;sub&gt;</code>—-subscript</p><p><code>&lt;sup&gt;</code>—-superscript</p></blockquote><p>贴两篇别人写的笔记。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121629519.png" alt="image-20220407121629519"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121706994.png" alt="image-20220407121706994"></p>]]></content>
      
      
      <categories>
          
          <category> HTML笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(二)</title>
      <link href="//add6a14e.html"/>
      <url>//add6a14e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="分析笔记（一）中的格式错误"><a href="#分析笔记（一）中的格式错误" class="headerlink" title="分析笔记（一）中的格式错误"></a>分析笔记（一）中的格式错误</h1><p>别忘了井号和标题间要有空格，刚才弄了半天没生成标题。</p><h2 id="MD041-First-line-in-a-file-should-be-a-top-level-heading"><a href="#MD041-First-line-in-a-file-should-be-a-top-level-heading" class="headerlink" title="MD041 - First line in a file should be a top-level heading"></a>MD041 - First line in a file should be a top-level heading</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406161917301.png" alt="image-20220406161917301"></p><p>第一行必须是一级标题，如果不是，就会产生格式错误。</p><h2 id="MD010-Hard-tabs"><a href="#MD010-Hard-tabs" class="headerlink" title="MD010 - Hard tabs"></a>MD010 - Hard tabs</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162311727.png" alt="image-20220406162311727"></p><p>This rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead.</p><h2 id="MD049-Emphasis-style-should-be-consistent"><a href="#MD049-Emphasis-style-should-be-consistent" class="headerlink" title="MD049 - Emphasis style should be consistent"></a>MD049 - Emphasis style should be consistent</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406183749148.png" alt="image-20220406183749148"></p><p>斜体文本的生成在整篇文章中必须保持一致，要不全都用单个*包围，要不全都用单个_包围。</p><h2 id="MD050-Strong-style-should-be-consisten"><a href="#MD050-Strong-style-should-be-consisten" class="headerlink" title="MD050 - Strong style should be consisten"></a>MD050 - Strong style should be consisten</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162936867.png" alt="image-20220406162936867"></p><p>与MD049的规则一致。</p><h2 id="MD009-Trailing-spaces"><a href="#MD009-Trailing-spaces" class="headerlink" title="MD009 - Trailing spaces"></a>MD009 - Trailing spaces</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406171247624.png" alt="image-20220406171247624"></p><p>行尾出现了不必要的空格，应该移除它。其实有些空格是允许的，比如用于换行的空格。</p><h2 id="MD035-Horizontal-rule-style"><a href="#MD035-Horizontal-rule-style" class="headerlink" title="MD035 - Horizontal rule style"></a>MD035 - Horizontal rule style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406172226056.png" alt="image-20220406172226056"></p><p>与MD049和MD050的规则一致。</p><h2 id="MD033-Inline-HTML"><a href="#MD033-Inline-HTML" class="headerlink" title="MD033 - Inline HTML"></a>MD033 - Inline HTML</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173031498.png" alt="image-20220406173031498"></p><p>Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include “pure” markdown, or for those who are rendering markdown documents in something other than HTML.</p><h2 id="MD007-Unordered-list-indentation"><a href="#MD007-Unordered-list-indentation" class="headerlink" title="MD007 - Unordered list indentation"></a>MD007 - Unordered list indentation</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173240596.png" alt="image-20220406173240596"></p><p>大概因为是第一层嵌套，都应该顶格写。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174628026.png" alt="image-20220406174628026"></p><p>This rule is triggered when list items are not indented by the configured number of spaces (default: 2).</p><h2 id="MD004-Unordered-list-style"><a href="#MD004-Unordered-list-style" class="headerlink" title="MD004 - Unordered list style"></a>MD004 - Unordered list style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174355522.png" alt="image-20220406174355522"></p><p>生成无序列表的符号从头到尾应保持一致。</p><h2 id="MD032-Lists-should-be-surrounded-by-blank-lines"><a href="#MD032-Lists-should-be-surrounded-by-blank-lines" class="headerlink" title="MD032 - Lists should be surrounded by blank lines"></a>MD032 - Lists should be surrounded by blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406175608011.png" alt="image-20220406175608011"></p><p>This rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line.</p><p>想要解决问题，把数字那行的内容删去即可。</p><h2 id="MD012-Multiple-consecutive-blank-lines"><a href="#MD012-Multiple-consecutive-blank-lines" class="headerlink" title="MD012 - Multiple consecutive blank lines"></a>MD012 - Multiple consecutive blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406180110741.png" alt="image-20220406180110741"></p><p>删除多余的两行空行即可。</p><h2 id="MD046-Code-block-style"><a href="#MD046-Code-block-style" class="headerlink" title="MD046 - Code block style"></a>MD046 - Code block style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182141643.png" alt="image-20220406182141643"></p><p>昨天犯了一个非常严重的错误，花了一个小时意外解决但不知道原理，今天总算明白了问题所在。Markdown中生成代码块是有两种方式的：</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182455741.png" alt="image-20220406182455741"></p><p>一种是我知道的```生成代码块，另外一种就是图中先展示的。所以我们在生成代码块的时候最好统一用下面的形式，避免无意间用到上面的形式。</p><h1 id="空行和缩进"><a href="#空行和缩进" class="headerlink" title="空行和缩进"></a>空行和缩进</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp;或&amp;#8194; //半角的空格</span><br><span class="line">&amp;emsp;或&amp;#8195; //全角的空格</span><br><span class="line">&amp;nbsp;或&amp;#160;  //不断行的空格</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;内容 //中文作文一样的缩进</span><br><span class="line">&amp;nbsp; //放在一行中不加任何其他东西即生成空行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(一)</title>
      <link href="//2e73a2c.html"/>
      <url>//2e73a2c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用#号创建标题，几个#对应的就是几级标题，最多6级。</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>​    用*或_包裹创建斜体文本</p><p>​        <em>斜体文本</em><em>斜体文本</em></p><p>​    用**或__包裹创建粗体文本</p><p>​        <strong>粗体文本</strong><strong>粗体文本</strong></p><p>​    用<em>*</em>或<em>_</em>包裹创建粗斜体文本    </p><p>​        <strong><em>粗斜体文本</em></strong><strong><em>粗斜体文本</em></strong></p><p>​    在一行中用三个以上的星号*、减号-、下划线_来建立一个分隔线，行内不能有其他东西。</p><hr><hr><hr><p>​    文字两端加上两个波浪线实现删除线的效果。</p><p>​        <del>删除线</del></p><p>​    下划线可以通过HTML的<u></u>标签包裹来实现：</p><p>​        <u>带下划线文本</u></p><p>​    脚注用<sup><a href="#fn_" id="reffn_"></a></sup>来生产：</p><p>​        学习Markdown语法<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="菜鸟教程">[1]</span></a></sup>。</p><p>​    无序列表使用星号*、加号+或是减号-作为列表标记，这些标记后面要添加一个空格，然后再填写内容:</p><ul><li>第一项</li><li><p>第二项</p><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li>第一项</li><li>第二项<ul><li>第一项</li></ul></li></ul><p>有序列表使用数字并加上.号来表示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li></ul><p>​    列表嵌套要在子列表中的选项前面添加四个空格：</p><ol><li>第一项：<ul><li>第一项</li><li>第二项</li></ul></li><li>第二项：<ul><li>第一项</li><li>第二项</li></ul></li></ol><p>​    Markdown区块引用实在段落开头使用&gt;符号，然后后面紧跟一个空格符号:</p><blockquote><p>区块引用</p><p>必须是一行的最左边好像才能生效</p></blockquote><p>​    区块是可以嵌套的，一个&gt;符号是最外层，两个&gt;符号是第一层嵌套，以此类推：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote></blockquote><p>​    区块中可以使用列表：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><p>​    列表中也可以使用区块：</p><ul><li><p>第一项</p><blockquote><p>区块示例</p><p>啦啦啦</p></blockquote></li><li><p>第二项</p><blockquote><p>啦啦啦</p></blockquote></li></ul><p>​    Markdown 表格:</p><p>​Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><p>​Typora 中似乎设置完表头，表格就能可视化了。</p><p>​    段落中的代码可以用单个反引号`把它们包裹起来:</p><p>​        C语言中的<code>printf()</code>函数</p><p>​    可以用```(在最开头)包裹一段代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    链接使用方法:</p><ol><li><p>[链接名称] (链接地址)      ]和(中间没有空格,这里只为演示方便。</p></li><li><p>链接地址两边用尖括号包围</p><ul><li>第一种方法：<a href="[Snow&#39;s Blog (84dulu.github.io">我的博客</a>](<a href="https://84dulu.github.io/">https://84dulu.github.io/</a>))</li><li>第二种方法：&lt;<a href="https://84dulu.github.io/">Snow’s Blog (84dulu.github.io)</a>&gt;</li></ul></li></ol><p>​    我们可以用两组方括号通过变量来设置一个链接，第一组方括号里面填入我们想设置的名称，第二组方括号里面填入变量，变量赋值在文档末尾进行:</p><p>​        好友的博客<a href="Jonathan的小窝" title="jonathanbest7.github.io)](https://jonathanbest7.github.io/">bj777</a></p><p>​    </p><p>​    Markdown 图片语法格式:</p><ul><li><p>开头一个感叹号</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个圆括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的’title’属性的文字。</p><p> ​    <img src="https://www.ghibli.jp/gallery/thumb-totoro044.png" alt="pexels"></p><p> ​    Markdown没有办法指定图片的高度和宽度，如果需要，可以使用普通的 img 标签。</p><p> ​      </p><p> Markdown 还支持HTML元素，我不会用哈哈。kbd 标签定义键盘文本</p><p> ​    使用 <kbd>Ctrl</kbd>+<kbd>v</kbd>粘贴</p><p> 显示*等字符可以用反斜杠\来转义：</p><p> ​    <strong>文本加粗</strong></p></li></ul><p>**文本加粗**<br><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-04-05%20164932.png" alt="111"></p><p>尝试下LaTeX:</p><script type="math/tex; mode=display">a^2 + b^2 = c^2</script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">菜鸟教程<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
