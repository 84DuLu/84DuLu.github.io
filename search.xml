<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CPP 13 文件输入/输出</title>
      <link href="//eaf9ae16.html"/>
      <url>//eaf9ae16.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="文件输入-输出"><a href="#文件输入-输出" class="headerlink" title="文件输入/输出"></a>文件输入/输出</h1><h2 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h2><h3 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen() 函数"></a>fopen() 函数</h3><p><code>fopen()</code> 函数定义在头文件 <stdio.h> 中，其函数原型为 <code>FILE *fopen(const char *filename, const char *mode);</code> 。它的第一个参数是待打开文件的名称；第二个参数是一个字符串，指定待打开文件的模式。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220521185331056.png" alt="image-20220521185331056"></p><p>程序成功打开文件后，<code>fopen()</code> 将会返回文件指针，其他 I/O 函数可以用这个指针指定该文件。如果文件打开失败，函数将会返回一个空指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法示例</span></span><br><span class="line">FILE * fp;</span><br><span class="line"><span class="keyword">if</span> ((fp = fopen(file, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open the file.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// 定义在 &lt;stdlib.h&gt; 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getc-和-putc-函数"><a href="#getc-和-putc-函数" class="headerlink" title="getc() 和 putc() 函数"></a>getc() 和 putc() 函数</h3><p><code>getc()</code> 定义于头文件 <stdio.h> ，函数原型为 <code>int fgetc(FILE *stream);</code> 。它的作用是从给定的输入流中读取下一个字符。读取成功时作为 <strong>unsigned char</strong> 获得并转换为 <strong>int</strong> 的字符，失败时为 <strong>EOF</strong> 。</p><p><code>putc()</code> 定义于头文件 <stdio.h> ，函数原型为 <code>int putc(int ch, FILE *stream);</code> 。它的作用是写入字符 ch 到给定输出流 stream ，写入前将字符转换为 <strong>unsigned char</strong> 。成功时，以 <strong>int</strong> 形式返回被写入字符；失败时返回 EOF 。</p><h3 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose() 函数"></a>fclose() 函数</h3><p><code>fclose()</code> 定义于头文件 <stdio.h> ，函数原型为 <code>int fclose(FILE *stream);</code> 。它的作用是关闭给定的文件流，刷新缓冲区。如果成功关闭返回 <strong>0</strong> ；如果失败，则返回 <strong>EOF</strong> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法示例</span></span><br><span class="line"><span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error in closing file %s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="指向标准文件的指针"><a href="#指向标准文件的指针" class="headerlink" title="指向标准文件的指针"></a>指向标准文件的指针</h3><p>stdio.h 头文件把 3 个文件指针与 3 个标准文件相关联，<strong>C</strong> 程序会自动打开这 3 个标准文件。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220521193734425.png" alt="image-20220521193734425"></p><h2 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h2><h3 id="fprintf-和-fscanf-函数"><a href="#fprintf-和-fscanf-函数" class="headerlink" title="fprintf() 和 fscanf() 函数"></a>fprintf() 和 fscanf() 函数</h3><p>均定义于头文件 <stdio.h> 中。</p><blockquote><p><code>int fprintf(FILE *stream, const char *format, ...);</code></p></blockquote><p>发送格式化输出到流 stream 中。成功返回写入的字符总数，否则返回一个负数。</p><blockquote><p><code>int fscanf(FILE *stream, const char *format, ...);</code> </p></blockquote><p>从流 stream 中读取格式化输入。如果成功，该函数返回成功匹配和赋值的个数。如果失败则返回 EOF 。</p><h3 id="fgets-和-fputs-函数"><a href="#fgets-和-fputs-函数" class="headerlink" title="fgets() 和 fputs() 函数"></a>fgets() 和 fputs() 函数</h3><p>均定义于头文件 <stdio.h> 中。</p><blockquote><p><code>char *fgets(char *str, int count, FILE *stream);</code></p></blockquote><p>从给定文件流中读取最多 count-1 个字符并将它们存储于 str 所指向的字符数组。若文件尾出现或发现换行符则终止分析，后一情况下 str 将包含一个换行符。若读入字节且无错误发生，则紧随写入到 str 的最后一个字符后写入空字符。成功时返回 str ，失败则返回一个空指针。</p><blockquote><p><code>int fputs(const char *str, FILE *stream);</code></p></blockquote><p>把字符串写入到指定的流 stream 中，但不包括空字符。成功时返回非负值，失败时返回 EOF 。</p><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="fseek-和-ftell"><a href="#fseek-和-ftell" class="headerlink" title="fseek() 和 ftell()"></a>fseek() 和 ftell()</h3><p>均定义于头文件 <stdio.h> 。</p><blockquote><p><code>int fseek(FILE *stream, long offset, int origin);</code></p></blockquote><p>设置文件流 stream 的文件位置指示器为 offset 所指向的值。成功时返回 0 ，否则为非零。</p><p><code>fseek()</code> 的第 2 个参数是偏移量。该参数表示从起始点开始要移动的距离。该参数必须是一个 <strong>long</strong> 类型的值，可以为正（前移）、负（后移）或 0 （保持不动）。</p><p><code>fseek()</code> 的第 3 个参数是模式，该参数确定起始点。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220521203915344.png" alt="image-20220521203915344"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_SET); <span class="comment">// 定义至文件开始处</span></span><br><span class="line">fseek(fp, <span class="number">10L</span>, SEEK_SET); <span class="comment">// 定义至文件中的第 10 个字节</span></span><br><span class="line">fseek(fp, <span class="number">-10L</span>, SEEK_END); <span class="comment">// 从文件结尾处回退 10 个字节</span></span><br></pre></td></tr></table></figure><blockquote><p><code>long ftell(FILE *stream);</code></p></blockquote><p>返回流 stream 的文件位置指示器。成功时返回位置标识符的当前值，错误时返回 -1L 。</p><p>倒叙显示文件内容的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNTL_Z <span class="string">&#x27;\032&#x27;</span>   <span class="comment">/* eof marker in DOS text files */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLEN 81</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> file[SLEN];</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">long</span> count, last;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter the name of the file to be processed:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%80s&quot;</span>, file);</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(file,<span class="string">&quot;rb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;                               <span class="comment">/* read-only mode   */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;reverse can&#x27;t open %s\n&quot;</span>, file);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fseek(fp, <span class="number">0L</span>, SEEK_END);        <span class="comment">/* go to end of file */</span></span><br><span class="line">    last = ftell(fp);</span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">1L</span>; count &lt;= last; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        fseek(fp, -count, SEEK_END); <span class="comment">/* go backward      */</span></span><br><span class="line">        ch = getc(fp);</span><br><span class="line"><span class="keyword">if</span> (ch != CNTL_Z &amp;&amp; ch != <span class="string">&#x27;\r&#x27;</span>)  <span class="comment">/* MS-DOS files */</span></span><br><span class="line">            <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制I-O-fread-和-fwrite"><a href="#二进制I-O-fread-和-fwrite" class="headerlink" title="二进制I/O: fread() 和 fwrite()"></a>二进制I/O: fread() 和 fwrite()</h3><p>ANSI C 提供两种文件打开模式：二进制和文本。以二进制模式打开文件时，可以逐字节读取文件；以文本模式打开文件时，会把文件内容从文本的系统表示法映射为 <strong>C</strong> 表示法。对于 UNIX 和 Linux 系统，这两种模式完全相同。</p><p>实际上，所有的数据都是以二进制形式存储的，甚至连字符都以字符码的二进制表示来存储。如果文件中的所有数据都被解释成字符码，则称该文件包含文本数据。如果部分或所有的数据都被解释成二进制形式的数值数据，则称该文件包含二进制数据。</p><blockquote><p><code>size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict fp);</code></p></blockquote><p><code>fwrite()</code> 函数把二进制数据写入文件。 <strong>size_t</strong> 是根据标准 <strong>C</strong> 类型定义的类型，它是 <strong>sizeof</strong> 运算符返回的类型，通常是 <strong>unsigned int</strong> ，但是实现可以选择使用其他类型。指针 ptr 是待写入数据块的地址。 size 表示待写入数据块的大小（以字节为单位），nmemb 表示待写入数据块的数量。fp 指定待写入的文件。<code>fwrite()</code> 函数返回成功写入项的数量。正常情况下，返回值是 nmemb ，但如果出现写入错误，返回值会比 nmemb 小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 earnings 数组中的数据写入文件，数据被分成 10 块，每块都是 double 的大小</span></span><br><span class="line"><span class="type">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earnings, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">10</span>, fp);</span><br></pre></td></tr></table></figure><blockquote><p><code>size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict fp);</code></p></blockquote><p>在 <code>fread()</code> 函数中，ptr 是待读取文件数据在内存中的地址，fp 指定待读取的文件。该函数用于读取被 <code>fwrite()</code> 写入文件的数据。返回情况与 <code>fwrite()</code> 类似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 10 个 double 大小的值拷贝进 earnings 数组中</span></span><br><span class="line"><span class="type">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fread(earnings, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">10</span>, fp);</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>1.分别用 <code>fprintf()</code> 和 <code>fwrite()</code> 存储 8238201 有何区别？ </p></blockquote><p>用 <code>fprintf()</code> 存储 8238201 时，将其视为 7 个字符，保存在 7 字节中。用 <code>fwrite()</code> 存储时，使用该数的二进制表示，将其存储为一个 4 字节的整数。</p><blockquote><p>2.分别用 <code>putc()</code> 和 <code>fwrite()</code> 存储字符 S 有何区别？</p></blockquote><p>没有区别。两个函数都将其存储为一个单字节的二进制码。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 12 存储类别、链接和内存管理</title>
      <link href="//3f1e1e54.html"/>
      <url>//3f1e1e54.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第12章-存储类别、链接和内存管理"><a href="#第12章-存储类别、链接和内存管理" class="headerlink" title="第12章 存储类别、链接和内存管理"></a>第12章 存储类别、链接和内存管理</h1><h2 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><strong>作用域</strong>描述程序中可访问标识符的区域。一个 <strong>C</strong> 变量的作用域可以是块作用域、函数作用域、函数原型作用域或文件作用域。</p><p><strong>块</strong>是用一对花括号括起来的代码区域。定义在块中的变量具有<strong>块作用域</strong>，块作用域变量的可见范围是从定义处到包含该定义的块的末尾。另外，虽然函数的形式参数声明在函数的左花括号之前，但它们也具有块作用域，属于函数体这个块。</p><p>我们来看个例子吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The number i is %d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试编译这段代码时，编译器会报错，为什么？</p><p>C99 把块的概念扩展到包括 <strong>for</strong> 循环、<strong>while</strong> 循环、<strong>do while</strong> 循环和 <strong>if</strong> 语句所控制的代码，即使这些代码没有用花括号括起来，也算是块的一部分。所以，上面 <strong>for</strong> 循环中的变量 i 被视为 <strong>for</strong> 循环块的一部分，它的作用域仅限于 <strong>for</strong> 循环。一旦程序离开 <strong>for</strong> 循环，就不能再访问 i 。</p><p>变量的定义在函数的外面，具有<strong>文件作用域</strong>。具有文件作用域的变量，从它的定义处到该定义所在文件的末尾均可见。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> snow = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lalala</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lalala</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，变量 snow 具有文件作用域，main() 和 critic() 函数都可以使用它。由于这样的变量可用于多个函数，所以<strong>文件作用域</strong>变量也称为<strong>全局变量</strong>。</p><blockquote><p><strong>翻译单元和文件</strong></p><p><strong>C</strong> 预处理用包含的头文件内容替换 #include 指令。所以编译器把源代码文件和所有的头文件都看成是一个包含信息的单独文件。这个文件被称为<strong>翻译单元</strong>。描述一个具有文件作用域的变量时，它的实际可见范围是整个翻译单元。如果程序由多个源代码文件组成，那么该程序也将由多个翻译单元组成。每个翻译单元均对应一个源代码文件和它所包含的文件。</p></blockquote><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>C</strong> 变量有 3 种链接属性：外部链接、内部连接和或无链接。具有块作用域、函数作用域或函数原型作用域的变量都是无链接变量。这意味着这些变量属于定义它们的块、函数或原型私有。具有文件作用域的变量可以是外部链接或内部链接。外部链接可以在多文件程序中使用，内部链接变量只能在一个翻译单元中使用。</p><h3 id="存储期"><a href="#存储期" class="headerlink" title="存储期"></a>存储期</h3><p>作用域和链接表述了标识符的可见性。<strong>存储期</strong>描述了通过这些标识符访问的对象的生存期。<strong>C</strong> 对象有 4 种存储期：静态存储期、线程存储期、自动存储期、动态分配存储期。</p><p>如果对象具有<strong>静态存储期</strong>，那么它在程序的执行期间一直存在。文件作用域变量具有<strong>静态存储期</strong>。注意，对于文件作用域变量，关键字 <strong>static</strong> 表明了其链接属性，而非存储期。</p><p>块作用域的变量通常都具有<strong>自动存储期</strong>。当程序进入定义这些变量的块时，为这些变量分配内存；当退出这个块时，释放刚才为变量分配的内存。然而，块作用域变量也能具有<strong>静态存储期</strong>。为了创建这样的变量，要把变量声明在块中，且在声明前面加上关键字 <strong>static</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220514221123868.png" alt="image-20220514221123868"></p><h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><p>属于<strong>自动</strong>存储类别的变量具有自动存储期、块作用域且无链接。默认情况下，声明在块或函数头中的任何变量都属于<strong>自动</strong>存储类别。</p><p>如果内层块中声明的变量与外层块中的变量同名，内层块会隐藏外层块的定义。但是离开内层块后，外层块变量的作用域又回到了原来的作用域。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x in outer block: %d at %p\n&quot;</span>, x, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x++ &lt; <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">x++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x in while loop: %d at %p\n&quot;</span>, x, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x in outer block: %d at %p\n&quot;</span>, x, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220515094121597.png" alt="image-20220515094121597"></p><p>在这个例子中，循环的测试条件使用并递增原始的 x 。在循环体中的 x ，被创建和销毁了 2 次。</p><h3 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h3><p>变量通常存储在计算机内存中。<strong>寄存器变量</strong>存储在 CPU 的寄存器中，与普通变量相比，访问和处理这些变量的速度更快。由于<strong>寄存器变量</strong>存储在寄存器而非内存中，所以无法获取<strong>寄存器变量</strong>的地址。绝大多数方面，<strong>寄存器变量</strong>和自动变量一样，它们都是块作用域、无链接和自动存储期。使用存储类别说明符 <strong>register</strong> 便可声明<strong>寄存器变量</strong>。编译器会根据寄存器或最快可用内存的数量衡量你的请求，或者直接忽略你的请求，在这种情况下，<strong>寄存器变量</strong>就变成普通的自动变量。</p><h3 id="块作用域的静态变量"><a href="#块作用域的静态变量" class="headerlink" title="块作用域的静态变量"></a>块作用域的静态变量</h3><p>这种变量具有块作用域、无链接，但是具有静态存储期。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">example</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">example();</span><br><span class="line">example();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x = %d, y = %d\n&quot;</span>, x++, y++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220515100504950.png" alt="image-20220515100504950"></p><p>每次调用函数 example() ，x 都会被初始化，而 y 只在编译 example() 时被初始化一次。如果逐步调试程序会发现，程序跳过了这条声明。这是因为静态变量和外部变量在程序载入内存时已执行完毕。把这条声明放在函数中是为了告诉编译器只有在函数中才能看到该变量。</p><h3 id="外部链接的静态变量"><a href="#外部链接的静态变量" class="headerlink" title="外部链接的静态变量"></a>外部链接的静态变量</h3><p><strong>外部链接的静态变量</strong>具有文件作用域、外部链接和静态存储期。该类别有时称为<strong>外部存储类别</strong>，属于该类别的变量称为<strong>外部变量</strong>。把变量的定义性声明放在所有函数的外面便创建了<strong>外部变量</strong>。为了指出该函数使用了外部变量，可以在函数内用关键字 <strong>extern</strong> 再次声明。如果一个源文件使用的外部变量定义在另一个源代码文件中，则必须用 <strong>extern</strong> 在该文件中声明该变量。注意外部变量的作用域是：从声明处到文件结尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> snow;</span><br><span class="line"><span class="type">int</span> <span class="title function_">bj</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，外部变量 snow 对 bj() 可见，但是对 main() 不可见。</p><h3 id="内部链接的静态变量"><a href="#内部链接的静态变量" class="headerlink" title="内部链接的静态变量"></a>内部链接的静态变量</h3><p>该存储类别的变量具有静态存储器、文件作用域和内部链接。在所有函数外部，用存储类别说明符 <strong>static</strong> 定义的变量具有这种存储类别。普通的外部变量可用于同一程序中任意文件中的函数，但是<strong>内部链接的静态变量</strong>只能用于同一个文件中的函数。</p><h2 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h2><p><code>rand()</code> 函数定义在 <code>&lt;stdlib.h&gt;</code> 中，其函数原型是 <code>int rand();</code> 。它的作用是返回一个伪随机数，介于 0 到 RAND_MAX 之间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220515105444976.png" alt="image-20220515105444976"></p><p>多次运行上述代码，我们会得到和图中一样的结果。那么怎么才能用 <code>rand()</code> 函数多次运行程序，产生不一样的结果呢？</p><p><code>srand()</code> 函数定义在 <code>&lt;stdlib&gt;</code> 中，其函数原型是 <code>void srand(unsigned seed);</code> 。我们可以设立不同的 seed ，通过 <code>srand()</code> 函数来改变 <code>rand()</code> 函数生成的随机数序列。<code>rand()</code> 函数默认在 <code>srand(1)</code> 的情况下生成随机数。</p><h3 id="自动重置种子"><a href="#自动重置种子" class="headerlink" title="自动重置种子"></a>自动重置种子</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220515112905170.png" alt="image-20220515112905170"></p><p>上图是数据类型 <strong>time_t</strong> 的定义。</p><p><code>time()</code> 函数定义在 <code>&lt;time.h&gt;</code> 中，其函数原型为 <code>time_t time(time *arg)</code> 。其作用是返回 time_t 数据类型的当前日历时间，并将其存储于 arg 指向的 time_t 对象。</p><p>一般而言，<code>time()</code> 接受的参数是一个 time_t 类型对象的地址，而时间值就存储在传入的地址上。我们也可以传入空指针（0）作为参数，这种情况下，只能通过返回值机制来提供值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>) time(<span class="number">0</span>)); <span class="comment">//随机种子</span></span><br></pre></td></tr></table></figure><h2 id="分配内存：malloc-和-free"><a href="#分配内存：malloc-和-free" class="headerlink" title="分配内存：malloc() 和 free()"></a>分配内存：malloc() 和 free()</h2><p><code>malloc()</code> 函数定义于头文件 <code>&lt;stdlib.h&gt;</code> ，其函数原型为 <code>void* malloc(size_t size);</code> 。它接受所需的内存字节数作为参数，来分配 size 字节的未初始化内存。若分配成功，则返回动态分配内存块的首字节地址。因此，可以把该地址赋给一个指针变量，并使用指针来访问这块内存。</p><p>从 ANSI C 标准开始，<strong>C</strong> 使用一个新的类型：指向 void 的指针。该类型相当于一个“通用指针”。<code>malloc()</code> 函数可用于返回指向数组的指针、指向结构的指针等，所以通常该函数的返回值会被强制转换为匹配的类型。在 ANSI C 中，应该坚持使用强制类型转换，提高代码的可读性。如果 <code>malloc()</code> 分配内存失败，将返回空指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 malloc() 创建数组</span></span><br><span class="line"><span class="type">double</span> * ptd;</span><br><span class="line">ptd = (<span class="type">double</span> *) <span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">double</span>))</span><br><span class="line"><span class="comment">// 以上代码为 30 个 double 类型的值请求内存空间，并设置 ptd 指向该位置</span></span><br></pre></td></tr></table></figure><p><code>free()</code> 函数同样定义于头文件 <code>&lt;stdlib.h&gt;</code> ，其函数原型为 <code>void free(void* ptr);</code> 。<code>free()</code> 函数的参数是之前 <code>malloc()</code> 返回的地址，该函数释放之前 <code>malloc()</code> 分配的内存。</p><h3 id="free-的重要性"><a href="#free-的重要性" class="headerlink" title="free() 的重要性"></a>free() 的重要性</h3><p>静态内存的数量在编译时是固定的，在程序运行期间也不会改变。自动变量使用的内存数量在程序执行期间自动增加或减少。但是动态分配的内存数量只会增加，除非用 <code>free()</code> 进行释放。如果有较多的内存空间使用后未能即使释放，就会造成<strong>内存泄漏</strong>，合理地使用 <code>free()</code> 函数可以避免这类问题发生。</p><h3 id="calloc-函数"><a href="#calloc-函数" class="headerlink" title="calloc() 函数"></a>calloc() 函数</h3><p>分配内存还可以使用 <code>calloc()</code> ，典型的用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> * newmen;</span><br><span class="line">newmen = (<span class="type">long</span> *)<span class="built_in">calloc</span>(<span class="number">100</span>, <span class="keyword">sizeof</span> (<span class="type">long</span>));</span><br></pre></td></tr></table></figure><p>和 <code>malloc()</code> 类似，在 ANSI 之前，<code>calloc()</code> 也返回指向 <strong>char</strong> 的指针；在 ANSI 之后，返回指向 void 的指针。如果要存储不同的类型，应使用强制类型转换运算符。<code>calloc()</code> 的函数原型为 <code>void* calloc(size_t num, size_t size);</code> ，第一个参数是所需的存储单元数量，第二个参数是存储单元的大小。<code>calloc()</code> 函数还有一个特性：它把块中的所有位都设置为 0 。</p><h2 id="ANSI-C-类型限定符"><a href="#ANSI-C-类型限定符" class="headerlink" title="ANSI C 类型限定符"></a>ANSI C 类型限定符</h2><p>类型限定符 <strong>const</strong>、<strong>volatile</strong>、<strong>restrict</strong> 和 <strong>_Atomic</strong> 。<strong>const</strong> 限定符限定数据在程序运行过程时不能改变。对指针使用 <strong>const</strong> 时，可限定指针本身不能改变或指针指向的数据本身不能改变，这取决于 <strong>const</strong> 在指针声明中的位置。<strong>volatile</strong> 限定符表明，限定的数据除了被当前程序修改外还可以被其他进程修改。该限定符的目的是警告编译器不要进行假定的优化。<strong>restrict</strong> 限定符也是为了方便编译器设置优化方案。<strong>restrict</strong> 限定的指针是访问它所指向数据的唯一途径。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 11 字符串和字符串函数</title>
      <link href="//fe57836f.html"/>
      <url>//fe57836f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第十一章-字符串和字符串函数"><a href="#第十一章-字符串和字符串函数" class="headerlink" title="第十一章 字符串和字符串函数"></a>第十一章 字符串和字符串函数</h1><h2 id="表示字符串和字符串I-O"><a href="#表示字符串和字符串I-O" class="headerlink" title="表示字符串和字符串I/O"></a>表示字符串和字符串I/O</h2><h3 id="在程序中定义字符串"><a href="#在程序中定义字符串" class="headerlink" title="在程序中定义字符串"></a>在程序中定义字符串</h3><h4 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h4><p>用双引号括起来的内容称为<strong>字符串字面量</strong>，也叫作<strong>字符串</strong>常量。双引号中的字符和编译器自动加入末尾的 \0 字符，都作为字符串存储在内存中。</p><p>字符串常量属于静态存储类别，这说明如果在函数中使用字符串常量，该字符串只会被存储一次，在整个程序的生命期内存在，即使函数被调用多次。用双引号括起来的内容被视为指向该字符串存储位置的指针。这类似于把数组名作为指向该数组位置的指针。</p><h4 id="字符串数组和初始化"><a href="#字符串数组和初始化" class="headerlink" title="字符串数组和初始化"></a>字符串数组和初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两种形式等价</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;snow&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 让编译器自动计算数组大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> pt1[] = <span class="string">&quot;Something is pointing at me.&quot;</span>;</span><br><span class="line"><span class="comment">// 指针表示法</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * pt1 = <span class="string">&quot;Something is pointing at me.&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意第二种方式最后的空字符，要没有这个空字符，这就不是一个字符串，而是一个字符数组。</p><p>在指定数组大小时，要确保数组的元素个数至少比字符串长度多1（为了容纳空字符）。所有未被使用的元素都被自动初始化为0（这里的 0 指的是 <strong>char</strong> 形式的空字符，不是数字字符 0）。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220423215059363.png" alt="image-20220423215059363"></p><h4 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h4><ul><li>以上面的声明为例，数组形式（ar1[]）在计算机的内存中分配一个内含29个元素的数组（每个元素对应一个字符，还加上一个末尾的空字符’\0’），每个元素被初始化字符串字面量对应的字符。通常，字符串都作为可执行文件的一部分存储在数据段中。当把程序载入内存时，也载入了程序中的字符串。字符串存储在静态存储区中。但是，程序在开始运行时才会为该数组分配内存。此时，才将字符串拷贝到数组中。此时字符串有两个副本。一个是在静态内存中的字符串字面量，另一个是存储在 ar1 数组中的字符串。此后，编译器便把数组名 ar1 识别为该数组首元素地址 (&amp;ar1[0]) 的别名。这里关键要理解，在数组形式中，ar1 是地址常量，不能更改 ar1。如果改变了 ar1，则改变了数组的存储位置（即地址）。可以进行类似 ar1 + 1 的操作，标识数组的下一个元素。但是不允许 ++ar1 这样的操作。递增运算符不能用于常量。</li><li>指针形式（*pt1）也使得编译器为字符串在静态存储区预留 29 个元素的空间。另外，一旦开始执行程序，它会为指针变量 pt1 留出一个存储位置，并把字符串的地址存储在指针变量中。该变量最初指向该字符串的首字母，但是它的值可以改变。因此，可以使用递增运算符。例如，++pt1 将指向第2个字符（o）。</li></ul><p>初始化数组把静态存储区的字符串拷贝到数组中，而初始化指针只把字符串的地址拷贝给指针。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MSG <span class="string">&quot;I&#x27;m special.&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ar[] = MSG;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pt = MSG;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address of \&quot;I&#x27;m special\&quot;: %p \n&quot;</span>, <span class="string">&quot;I&#x27;m special&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;              address ar: %p\n&quot;</span>, ar);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;              address pt: %p\n&quot;</span>, pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          address of MSG: %p\n&quot;</span>, MSG);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address of \&quot;I&#x27;m special\&quot;: %p \n&quot;</span>, <span class="string">&quot;I&#x27;m special&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424085117204.png" alt="image-20220424085117204"></p><h4 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424090459541.png" alt="image-20220424090459541"></p><h3 id="指针和字符串"><a href="#指针和字符串" class="headerlink" title="指针和字符串"></a>指针和字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * mesg = <span class="string">&quot;Don&#x27;t be a fool!&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * copy;</span><br><span class="line">    </span><br><span class="line">    copy = mesg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, copy);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mesg = %s; &amp;mesg = %p; value = %p\n&quot;</span>,</span><br><span class="line">           mesg, &amp;mesg, mesg);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;copy = %s; &amp;copy = %p; value = %p\n&quot;</span>,</span><br><span class="line">           copy, &amp;copy, copy);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424090841253.png" alt="image-20220424090841253"></p><p>程序未拷贝字符串。语句 <code>copy = mesg;</code> 把 mesg 的值赋给 copy，让 copy 也指向 mesg 指向的字符串。</p><p>为何不拷贝字符串？假设数组有50个元素，考虑一下哪种方法更高效：拷贝一个地址还是拷贝整个数组？通常，程序要完成某项操作只需要知道地址就可以了。</p><h2 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h2><p>如果想把一个字符串读入程序，首先必须预留存储该字符串的空间，然后用输入函数获取该字符串。</p><h3 id="分配空间"><a href="#分配空间" class="headerlink" title="分配空间"></a>分配空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br></pre></td></tr></table></figure><p>虽然可能通过编译，但是在读入 name 时，name 可能会擦写掉程序中的数据或代码，从而导致程序异常中止。因为<code>scanf()</code>要把信息拷贝至参数指定的地址上，而此时该参数时个未初始化的指针，name 可能会指向任何地方。</p><p>最简单的方法是，在声明时显式指明数组的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[<span class="number">81</span>];</span><br></pre></td></tr></table></figure><h3 id="不幸的-gets-函数"><a href="#不幸的-gets-函数" class="headerlink" title="不幸的 gets() 函数"></a>不幸的 gets() 函数</h3><p><code>gets()</code> 函数读取整行输入，直至遇到换行符，然后丢弃换行符，存储其余字符，并在这些字符的末尾添加一个空字符使其成为一个 C 字符串。它经常与 <code>puts()</code> 函数配对使用，该函数用于显示字符串，并在末尾添加换行符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STLEN 81</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> words[STLEN];</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a string, please.&quot;</span>);</span><br><span class="line">    gets(words);  <span class="comment">// typical use</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, words);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424094620618.png" alt="image-20220424094620618"></p><p>其他编译器中可能会出现警告消息。问题出在<code>gets()</code>唯一的参数是 words，它无法检查数组是否装得下输入行。数组名会被转换成该元素首元素的地址，因此，<code>gets()</code>函数只知道数组的开始处，并不知道数组中有多少个元素。</p><p>如果输入的字符串过长，会导致缓冲区溢出，即多余的字符超过了指定的目标空间。如果这些多余的字符只是占用了尚未使用的内存，就不会立即出现问题；如果它们擦写掉程序中的其他数据，会导致程序异常中止。</p><p>制定 C99 标准的委员会承认了<code>gets()</code>的问题并建议不要再使用它，C11 标准委员会采取了更强硬的态度，直接从标准中废除了 <code>gets()</code>函数。</p><h3 id="gets-的替代品"><a href="#gets-的替代品" class="headerlink" title="gets()的替代品"></a>gets()的替代品</h3><h4 id="fgets-函数"><a href="#fgets-函数" class="headerlink" title="fgets()函数"></a>fgets()函数</h4><p><code>fgets()</code>函数通过第2个参数限制读入的字符数来解决溢出的问题。</p><ul><li><code>fgets()</code>函数的第2个参数指明了读入字符的最大数量。如果该参数的值是 n，那么<code>fgets()</code>将读入 n-1 个字符，或者读到遇到的第一个换行符为止。</li><li>如果<code>fgets()</code>读到一个换行符，会把它存储在字符串中。这点与<code>gets()</code>不同，<code>gets()</code>会丢弃换行符。</li><li><code>fgets()</code>函数的第3个参数指明要读入的文件。如果读入从键盘输入的数据，则以 stdin 作为参数，该标识符定义在 stdio.h 中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STLEN 14</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> words[STLEN];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a string, please.&quot;</span>);</span><br><span class="line">    fgets(words, STLEN, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice (puts(), then fputs()):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">fputs</span>(words, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter another string, please.&quot;</span>);</span><br><span class="line">    fgets(words, STLEN, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice (puts(), then fputs()):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">fputs</span>(words, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424100609780.png" alt="image-20220424100609780"></p><p>第一行输入，apple pie\n\0 被存储在数组中。第二行输入，strawberry sh\0 存储在数组中。<code>puts()</code>函数会在待输出字符串末尾添加一个换行符，而<code>fputs()</code>不会这样做。</p><p><code>fputs()</code>函数返回指向 <strong>char</strong> 的指针。如果一切进行顺利，该函数返回的地址与传入的第一个参数相同。但是，如果函数读到文件结尾，它将返回一个特殊的指针：空指针。</p><p><code>fgets()</code>存储换行符有好处也有坏处。坏处是你可能不想把换行符都存储在字符串中，这样的换行符会带来一些麻烦。好处是对于存储的字符串而言，检查末尾是否有换行符可以判断是否读取了一整行。</p><p>为了处理换行符和一些多出的字符，我们可以创建一个函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val) <span class="comment">// 即，ret_val != NULL</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (st[i] != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; st[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            st[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// must have words[i] == &#x27;\0&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历字符串，直至遇到换行符或空字符。如果先遇到换行符，下面的 if 语句就将其替换成空字符；如果先遇到空字符，else 部分便丢弃<strong>输入行</strong>的剩余字符。</p><blockquote><p><strong>空字符和空指针</strong></p><ul><li>空字符（’\0’）是用于标记 C 字符串末尾的字符，其对应字符编码是 0。由于其他字符的编码不可能是 0，所以不可能是字符串的一部分。</li><li>空指针（或NULL）有一个值，该值不会与任何数据的有效地址对应。通常，函数使用它返回一个有效地址表示某些特殊情况发生，例如遇到文件结尾或未能按预期执行</li></ul><p>空字符是整数类型，而空指针是指针类型。两者有时容易混淆的原因是：它们都可以用数值 0 来表示。但是，从概念上来看，两者是不同类型的 0.另外，空字符是一个字符，占 1 字节；而空指针是一个地址，通常占 4 字节。</p></blockquote><h2 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h2><h3 id="puts-函数"><a href="#puts-函数" class="headerlink" title="puts()函数"></a>puts()函数</h3><p>使用<code>puts()</code>函数需要把字符串的地址作为参数传递给它，<code>puts()</code>显示字符串时会自动在其末尾添加一个换行符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF <span class="string">&quot;I am a #defined string.&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">80</span>] = <span class="string">&quot;An array was initialized to me.&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * str2 = <span class="string">&quot;A pointer was initialized to me.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;m an argument to puts().&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(DEF);</span><br><span class="line">    <span class="built_in">puts</span>(str1);</span><br><span class="line">    <span class="built_in">puts</span>(str2);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;str1[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(str2+<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424111319250.png" alt="image-20220424111319250"></p><p>该程序示例再次说明，用双引号括起来的内容是字符常量，且被视为该字符串的地址。另外，存储字符串的数组名也被看作是地址。</p><p><code>puts()</code>函数在遇到空字符时就停止输出，所以必须确保有空字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> side_a[] = <span class="string">&quot;Side A&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dont[] = &#123;<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;!&#x27;</span> &#125;;</span><br><span class="line">    <span class="type">char</span> side_b[] = <span class="string">&quot;Side B&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(dont);   <span class="comment">/* dont is not a string */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424111714406.png" alt="image-20220424111714406"></p><p>dont 缺少一个表示结束的空字符，所以它不是一个字符串。该编译器把 side_a 数组存储在 dont 数组之后，所以<code>puts()</code>一直输出至遇到 side_a 中的空字符。</p><h3 id="fputs-函数"><a href="#fputs-函数" class="headerlink" title="fputs()函数"></a>fputs()函数</h3><ul><li><code>fputs()</code>函数的第2个参数指明要写入数据的文件。如果要打印在显示器上，可以用定义在 stdio.h 中的 stdout （标准输出）作为该参数。</li><li>与<code>puts()</code>不同，<code>fputs()</code>不会在输出的末尾添加换行符。</li></ul><h3 id="自定义输出函数"><a href="#自定义输出函数" class="headerlink" title="自定义输出函数"></a>自定义输出函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">put</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * <span class="built_in">string</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(*<span class="built_in">string</span>++);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单示例。</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p>C 库提供了多个处理字符串的函数，ANSI C 把这些函数的原型放在 string.h 头文件中。</p><h3 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen()函数"></a>strlen()函数</h3><p><code>strlen()</code>函数用于统计字符串的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> length = <span class="built_in">strlen</span>(<span class="string">&quot;snow&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The length is %d.\n&quot;</span>, length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424114037549.png" alt="image-20220424114037549"></p><h3 id="strcat-函数"><a href="#strcat-函数" class="headerlink" title="strcat()函数"></a>strcat()函数</h3><p><code>strcat()</code>（用于拼接字符串）函数接收两个字符串作为参数。该函数把第2个字符串的备份附加在第1个字符串末尾，并把拼接后形成的新字符串作为第1个字符串，第2个字符串保持不变。<code>strcat()</code>函数的类型是 <strong>char *</strong> （即，指向 <strong>char</strong> 的指针）。<code>strcat()</code> 函数返回第 1 个参数，即拼接第 2 个字符串后的第 1 个字符串的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[<span class="number">5</span>] = <span class="string">&quot;sn&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">3</span>] = <span class="string">&quot;ow&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str1, str2);</span><br><span class="line"><span class="built_in">puts</span>(str1);</span><br><span class="line">    <span class="built_in">puts</span>(str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424115318198.png" alt="image-20220424115318198"></p><h3 id="strncat-函数"><a href="#strncat-函数" class="headerlink" title="strncat()函数"></a>strncat()函数</h3><p><code>strcat()</code>函数无法检查第 1 个数组是否能容纳第 2 个字符串。如果分配给第 1 个数组的空间不够大，多出来的字符溢出到相邻存储单元时就会出现问题。</p><p>用<code>strncat()</code>，该函数的第3个参数指定了最大添加字符数。例如，strncat(bugs, addon, 13) 将把 addon 字符串的内容附加给 bugs，在加到第 13 个字符或者遇到空字符时停止。因此，算上空字符，bugs 数组应该足够大，以容纳原始字符串（不包含空字符）、添加原始字符串在后面的 13 个字符和末尾的空字符。</p><blockquote><p><code>strcat()</code>和<code>gets()</code>类似，也会导致缓冲区溢出。为什么 C11 标准不废弃 <code>strcat()</code>，只留下 <code>strncat()</code>？这也许是因为 <code>gets()</code>造成的安全隐患来自于使用该程序的人，而<code>strcat()</code>暴露的问题是那些粗心的程序员造成的。无法控制用户会进行什么操作，但是，可以控制你的程序做什么。C 语言相信程序员，因此程序员有责任确保 <code>strcat()</code> 的使用安全。</p></blockquote><h3 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a>strcmp()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;A\&quot;, \&quot;A\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;A&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;A\&quot;, \&quot;B\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;B\&quot;, \&quot;A\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;C\&quot;, \&quot;A\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;Z\&quot;, \&quot;a\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(\&quot;apples\&quot;, \&quot;apple\&quot;) is &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strcmp</span>(<span class="string">&quot;apples&quot;</span>, <span class="string">&quot;apple&quot;</span>)); <span class="comment">// &#x27;s&#x27; 与空字符比较，空字符在 ASCII 中排第一</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424160947074.png" alt="image-20220424160947074"></p><p><code>strcmp()</code>根据 ASCII 值的大小依次比较每个字符。如果第一个字符串的首字符的 ASCII 值大于第二个字符串的，则返回1；如果小于，则返回-1；如果等于，则接着往后比较，运用前述的规则。如果两个字符串完全相等，则返回0。</p><h3 id="strncmp-函数"><a href="#strncmp-函数" class="headerlink" title="strncmp()函数"></a>strncmp()函数</h3><p><code>strncmp()</code>函数可以只比较第 3 个参数指定的字符数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTSIZE 6</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * <span class="built_in">list</span>[LISTSIZE] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;astronomy&quot;</span>, <span class="string">&quot;astounding&quot;</span>,</span><br><span class="line">        <span class="string">&quot;astrophysics&quot;</span>, <span class="string">&quot;ostracize&quot;</span>,</span><br><span class="line">        <span class="string">&quot;asterism&quot;</span>, <span class="string">&quot;astrophobia&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LISTSIZE; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(<span class="built_in">list</span>[i],<span class="string">&quot;astro&quot;</span>, <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Found: %s\n&quot;</span>, <span class="built_in">list</span>[i]);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The list contained %d words beginning&quot;</span></span><br><span class="line">           <span class="string">&quot; with astro.\n&quot;</span>, count);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424162035443.png" alt="image-20220424162035443"></p><h3 id="strcpy-和-strncpy-函数"><a href="#strcpy-和-strncpy-函数" class="headerlink" title="strcpy() 和 strncpy() 函数"></a>strcpy() 和 strncpy() 函数</h3><p>如果 pts1 和 pts2 都是指向字符串的指针，那么下面的语句拷贝的是字符串的地址而不是字符串本身：<code>pts2 = pts1;</code></p><p>如果希望拷贝整个字符串，要用<code>strcpy()</code>函数。<code>strcpy()</code>函数相当于字符串赋值运算符。</p><p><code>strcpy()</code>函数还有两个有用的属性。第一，<code>strcpy()</code>的返回类型是 <strong>char *</strong>，该函数返回的是第一个参数的值，即一个字符的地址。第二，第 1 个参数不必指向数组的开始。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>    <span class="comment">// declares strcpy()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORDS  <span class="string">&quot;beast&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 40</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * orig = WORDS;</span><br><span class="line">    <span class="type">char</span> copy[SIZE] = <span class="string">&quot;Be the best that you can be.&quot;</span>;</span><br><span class="line">    <span class="type">char</span> * ps;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(orig);</span><br><span class="line">    <span class="built_in">puts</span>(copy);</span><br><span class="line">    ps = <span class="built_in">strcpy</span>(copy + <span class="number">7</span>, orig);</span><br><span class="line">    <span class="built_in">puts</span>(copy);</span><br><span class="line">    <span class="built_in">puts</span>(ps);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424163544673.png" alt="image-20220424163544673"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424163752804.png" alt="image-20220424163752804"></p><p><code>strcpy()</code>和<code>strcat()</code>都有同样的问题，它们都不能检查目标空间是否能容纳源字符串的副本。拷贝字符串用<code>strncpy()</code>更安全，该函数的第3个参数指明可拷贝的最大字符数。注意给空字符留空间。</p><h3 id="strchr-函数"><a href="#strchr-函数" class="headerlink" title="strchr()函数"></a>strchr()函数</h3><p><code>char *strchr(const char * s, int c);</code></p><p>如果 s 字符串中包括 c 字符，该函数返回指向 s 字符串首次出现的 c 字符的指针（末尾的空字符也是字符串的一部分，所以在查找范围内）；如果在字符串 s 中未找到 c 字符，该函数返回空指针。</p><h3 id="sprintf-函数"><a href="#sprintf-函数" class="headerlink" title="sprintf()函数"></a>sprintf()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;Pi 的值 = %f&quot;</span>, <span class="number">3.1415926</span>);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br></pre></td></tr></table></figure><p><code>sprintf()</code>函数用法基本与<code>printf()</code>一样，只不过把组合后的字符串存储在数组 str 中而不是显示在屏幕上。</p><h2 id="字符串示例：字符串排序"><a href="#字符串示例：字符串排序" class="headerlink" title="字符串示例：字符串排序"></a>字符串示例：字符串排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 81        <span class="comment">/* string length limit, including \0  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIM 20         <span class="comment">/* maximum number of lines to be read */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HALT <span class="string">&quot;&quot;</span>        <span class="comment">/* null string to stop input          */</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stsrt</span><span class="params">(<span class="type">char</span> *strings[], <span class="type">int</span> num)</span>;<span class="comment">/* string-sort function */</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> input[LIM][SIZE];     <span class="comment">/* array to store input       */</span></span><br><span class="line">    <span class="type">char</span> *ptstr[LIM];          <span class="comment">/* array of pointer variables */</span></span><br><span class="line">    <span class="type">int</span> ct = <span class="number">0</span>;                <span class="comment">/* input count                */</span></span><br><span class="line">    <span class="type">int</span> k;                     <span class="comment">/* output count               */</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input up to %d lines, and I will sort them.\n&quot;</span>,LIM);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;To stop, press the Enter key at a line&#x27;s start.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (ct &lt; LIM &amp;&amp; s_gets(input[ct], SIZE) != <span class="literal">NULL</span></span><br><span class="line">           &amp;&amp; input[ct][<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ptstr[ct] = input[ct];  <span class="comment">/* set ptrs to strings        */</span></span><br><span class="line">        ct++;</span><br><span class="line">    &#125;</span><br><span class="line">    stsrt(ptstr, ct);          <span class="comment">/* string sorter              */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nHere&#x27;s the sorted list:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; ct; k++)</span><br><span class="line">        <span class="built_in">puts</span>(ptstr[k]) ;       <span class="comment">/* sorted pointers            */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* string-pointer-sorting function */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stsrt</span><span class="params">(<span class="type">char</span> *strings[], <span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *temp;</span><br><span class="line">    <span class="type">int</span> top, seek;</span><br><span class="line">    <span class="comment">// 选择排序</span></span><br><span class="line">    <span class="keyword">for</span> (top = <span class="number">0</span>; top &lt; num<span class="number">-1</span>; top++)</span><br><span class="line">        <span class="keyword">for</span> (seek = top + <span class="number">1</span>; seek &lt; num; seek++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(strings[top],strings[seek]) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = strings[top];</span><br><span class="line">                strings[top] = strings[seek];</span><br><span class="line">                strings[seek] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (st[i] != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; st[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            st[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// must have words[i] == &#x27;\0&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424171033489.png" alt="image-20220424171033489"></p><p>该程序的巧妙之处排序的是指向字符串的指针，而不是字符串本身。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424172754773.png" alt="image-20220424172754773"></p><h2 id="ctype-h-字符函数和字符串"><a href="#ctype-h-字符函数和字符串" class="headerlink" title="ctype.h 字符函数和字符串"></a>ctype.h 字符函数和字符串</h2><p>用法示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ToUpper</span><span class="params">(<span class="type">char</span> * str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str)</span><br><span class="line">    &#123;</span><br><span class="line">        *str = <span class="built_in">toupper</span>(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* repeat.c -- main() with arguments */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> <span class="comment">// 与 int main(int argc, char **argv) 等价</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The command line has %d arguments:\n&quot;</span>, argc - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt; argc; count++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: %s\n&quot;</span>, count, argv[count]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424190024092.png" alt="image-20220424190024092"></p><p>C 编译器允许 main() 没有参数或者有两个参数（一些实现允许 main() 有更多参数，属于对标准的扩展）。main() 有两个参数时，第1个参数是命令行中的字符串数量。过去，这个 <strong>int</strong> 类型的参数被称为 argc（表示参数计数（argument count））。系统用空格表示一个字符串的结束和下一个字符串的开始。因此，上面的 repeat 示例共有 4 个字符串，其中后 3 个供 repeat 使用。该程序把命令行字符串存储在内存中，并把每个字符串的位置存储在指针数组中。而该数组的地址则被存储在 main() 的第2个参数中。按照惯例，这个指向指针的指针称为 argv（表示参数值[argument value]）。如果系统允许，就把程序本身的名字赋给 argv[0]，然后把随后的第一个字符串赋给 argv[1]，以此类推。</p><h2 id="把字符串转换为数字"><a href="#把字符串转换为数字" class="headerlink" title="把字符串转换为数字"></a>把字符串转换为数字</h2><p>用相关功能的函数，我们要包含 stdlib.h 头文件。</p><p>假设我们编写的程序需要使用数值命令形参，但是命令行参数被读取为字符串。因此，要使用数值必须先把字符串转换为数字。如果需要整数可以使用 atoi() 函数，该函数接受一个字符串作为参数，返回相应的整数值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* hello.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv [])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span> || (times = atoi(argv[<span class="number">1</span>])) &lt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s positive-number\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Hello, good looking!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220424193926261.png" alt="image-20220424193926261"></p><p>ANSI C 还提供一套更智能的函数：<code>strtol()</code>把字符串转换成 <strong>long</strong> 类型的值，<code>strtod()</code>把字符串转换为 <strong>double</strong> 类型的值等等。这些函数的智能之处在于识别和报告字符串中的首字符是否是数字。而且，<code>strtol()</code>还可以指定数字的进制。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 10 数组和指针</title>
      <link href="//72b1e541.html"/>
      <url>//72b1e541.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第十章-数组和指针"><a href="#第十章-数组和指针" class="headerlink" title="第十章 数组和指针"></a>第十章 数组和指针</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组声明</span></span><br><span class="line"><span class="type">float</span> candy[<span class="number">365</span>]; <span class="comment">// 内含 365 个 float 类型元素的数组</span></span><br><span class="line"><span class="type">int</span> states[<span class="number">50</span>]; <span class="comment">// 内含 50 个 int 类型元素的数组</span></span><br><span class="line"><span class="comment">// 初始化数组</span></span><br><span class="line"><span class="type">int</span> powers[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>&#125;; <span class="comment">// 从 ANSI C 开始支持这种初始化</span></span><br><span class="line"><span class="comment">// 给数组元素赋值</span></span><br><span class="line">powers[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 使用 const 声明数组</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> days[MONTHS] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;<span class="comment">// 把数组设置为只读</span></span><br></pre></td></tr></table></figure><p>如果不初始化数组，数组元素和未初始化的变量一样，其中存储的都是垃圾值；但是，如果部分初始化数组，剩余的元素就会被初始化为0。也可以省略方括号中的数字，让编译器自动匹配数组大小和初始化列表中的项数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> days[] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; <span class="keyword">sizeof</span> days / <span class="keyword">sizeof</span> days[<span class="number">0</span>]; index++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Month %2d has %d days.\n&quot;</span>, index +<span class="number">1</span>,</span><br><span class="line">               days[index]); <span class="comment">// 等同于 *(days + index)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220419192852581.png" alt="image-20220419192852581"></p><p>sizeof days 是整个数组的大小（以字节为单位），sizeof days[0]是数组中一个元素的大小（以字节为单位）。整个数组的大小除以单个元素的大小就是数组元素的个数。</p><h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><p>在使用数组时，要防止数组下标超出边界。<strong>C</strong> 语言相信程序员能写出正确的代码，不检查边界，<strong>C</strong> 程序可以运行更快。</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组声明</span></span><br><span class="line"><span class="type">float</span> rain[<span class="number">5</span>][<span class="number">12</span>]; <span class="comment">// 内含5个数组元素的数组，每个数组元素内含12个 float 类型的元素</span></span><br><span class="line"><span class="comment">// 二维数组初始化</span></span><br><span class="line"><span class="type">int</span> snow[<span class="number">3</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220419194432388.png" alt="image-20220419194432388"></p><h4 id="嵌套循环计算"><a href="#嵌套循环计算" class="headerlink" title="嵌套循环计算"></a>嵌套循环计算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心部分</span></span><br><span class="line"><span class="keyword">for</span> (year = <span class="number">0</span>; year &lt; YEARS; year++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (month = <span class="number">0</span>; month &lt; MONTHS; month++)</span><br><span class="line">        ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (month = <span class="number">0</span>; month &lt; MONTHS; month++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (year = <span class="number">0</span>; year &lt; YEARS; year++)</span><br><span class="line">        ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 想想两个嵌套循环各自代表着什么</span></span><br></pre></td></tr></table></figure><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><p>数组名是数组首元素的地址。也就是说，如果 flizny 是一个数组，下面的语句成立：</p><p><code>flizny == &amp;flizny[0];</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 4</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> dates [SIZE];</span><br><span class="line">    <span class="type">short</span> * pti;</span><br><span class="line">    <span class="type">short</span> index;</span><br><span class="line">    <span class="type">double</span> bills[SIZE];</span><br><span class="line">    <span class="type">double</span> * ptf;</span><br><span class="line">    </span><br><span class="line">    pti = dates;    <span class="comment">// assign address of array to pointer</span></span><br><span class="line">    ptf = bills;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%23s %15s\n&quot;</span>, <span class="string">&quot;short&quot;</span>, <span class="string">&quot;double&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; SIZE; index ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pointers + %d: %10p %10p\n&quot;</span>,</span><br><span class="line">               index, pti + index, ptf + index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220419200521386.png" alt="image-20220419200521386"></p><p>我们的系统中，地址按字节编址，<strong>short</strong> 类型占用 2 字节，<strong>double</strong> 类型占用 8 字节。在 <strong>C</strong> 中，指针加 1 指的是增加一个存储单元。对数组而言，这意味这加 1 后的地址是下一个元素的地址，而不是下一个字节的地址。这是为什么必须声明指针所指向对象类型的原因之一。只知道地址不够，因为计算机要知道存储对象要多少字节。</p><ul><li>指针的值是它所指向对象的地址。地址的表示方式依赖于计算机内部的硬件。许多计算机都是按字节编址，意思是内存中的每个字节都按顺序编号。这里，一个较大对象（如 <strong>double</strong> 类型的变量）通常是指该对象第一个字节的地址。</li><li>在指针前面使用 * 运算符可以得到该指针所指向对象的值</li><li>指针加 1，指针的值递增它所指向类型的大小（以字节为单位）。</li></ul><blockquote><p>dates + 2 == &amp;dates[2]    // 相同的地址</p><p>*(dates + 2) == dates[2]    // 相同的值</p><p>*(dates + 2)    // dates 第 3 个元素的值</p><p>*dates + 2    // dates 第 1 个元素的值加 2</p></blockquote><h3 id="函数、数组和指针"><a href="#函数、数组和指针" class="headerlink" title="函数、数组和指针"></a>函数、数组和指针</h3><p>假设要编写一个处理数组的函数，待处理的是名为 marbles 的 <strong>int</strong> 类型数组。我们通过<code>sum(marbles);</code>来调用函数，那么函数原型是什么？</p><p>记住，数组名是该数组首元素的地址，所以实际参数 marbles 是一个存储 <strong>int</strong> 类型值的地址，应把它赋给一个指针形式参数，即该形参是一个指向 <strong>int</strong> 的指针：</p><p><code>int sum (int * ar);</code></p><p>我们还可以这么表示：<code>int sum (int ar[]);</code>。这两种形式都表示 ar 是一个指向 <strong>int</strong> 的指针，但是 int ar[] 只能用于声明形式参数。第二种形式提醒读者指针 ar 指向的不仅仅是一个 <strong>int</strong> 类型值，还是一个 <strong>int</strong> 类型数组的元素。</p><h4 id="使用指针形参"><a href="#使用指针形参" class="headerlink" title="使用指针形参"></a>使用指针形参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sump</span><span class="params">(<span class="type">int</span> * start, <span class="type">int</span> * end)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> marbles[SIZE] = &#123;<span class="number">20</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">31</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="type">long</span> answer;</span><br><span class="line">    </span><br><span class="line">    answer = sump(marbles, marbles + SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The total number of marbles is %ld.\n&quot;</span>, answer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* use pointer arithmetic   */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sump</span><span class="params">(<span class="type">int</span> * start, <span class="type">int</span> * end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        total += *start; <span class="comment">// add value to total</span></span><br><span class="line">        start++;         <span class="comment">// advance pointer to next element</span></span><br><span class="line">        <span class="comment">// 两行代码可以压缩为 total += *start++;</span></span><br><span class="line">        <span class="comment">// 一元运算符 * 和 ++ 的优先级相同，但结合律是从右往左</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end 指向的位置实际上在数组最后一个元素的后面。<strong>C</strong> 保证在给数组分配空间时，指向数组后面的第一个位置的指针仍是有效的指针。</p><h2 id="指针操作"><a href="#指针操作" class="headerlink" title="指针操作"></a>指针操作</h2><p>下面的程序演示了指针变量的8种基本操作。除了这些操作，还可以用关系运算符来比较指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> * ptr1, * ptr2, *ptr3;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn;         <span class="comment">// assign an address to a pointer</span></span><br><span class="line">    ptr2 = &amp;urn[<span class="number">2</span>];     <span class="comment">// ditto</span></span><br><span class="line">    <span class="comment">// dereference a pointer and take</span></span><br><span class="line">    <span class="comment">// the address of a pointer</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pointer value, dereferenced pointer, pointer address:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p, *ptr1 =%d, &amp;ptr1 = %p\n&quot;</span>,</span><br><span class="line">           ptr1, *ptr1, &amp;ptr1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// pointer addition</span></span><br><span class="line">    ptr3 = ptr1 + <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nadding an int to a pointer:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 + 4 = %p, *(ptr4 + 3) = %d\n&quot;</span>,</span><br><span class="line">           ptr1 + <span class="number">4</span>, *(ptr1 + <span class="number">3</span>));</span><br><span class="line">    ptr1++;            <span class="comment">// increment a pointer</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nvalues after ptr1++:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p, *ptr1 =%d, &amp;ptr1 = %p\n&quot;</span>,</span><br><span class="line">           ptr1, *ptr1, &amp;ptr1);</span><br><span class="line">    ptr2--;            <span class="comment">// decrement a pointer</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nvalues after --ptr2:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr2 = %p, *ptr2 = %d, &amp;ptr2 = %p\n&quot;</span>,</span><br><span class="line">           ptr2, *ptr2, &amp;ptr2);</span><br><span class="line">    --ptr1;            <span class="comment">// restore to original value</span></span><br><span class="line">    ++ptr2;            <span class="comment">// restore to original value</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPointers reset to original values:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p, ptr2 = %p\n&quot;</span>, ptr1, ptr2);</span><br><span class="line">    <span class="comment">// subtract one pointer from another</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nsubtracting one pointer from another:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr2 = %p, ptr1 = %p, ptr2 - ptr1 = %td\n&quot;</span>,</span><br><span class="line">           ptr2, ptr1, ptr2 - ptr1);</span><br><span class="line">    <span class="comment">// subtract an integer from a pointer</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nsubtracting an int from a pointer:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr3 = %p, ptr3 - 2 = %p\n&quot;</span>,</span><br><span class="line">           ptr3,  ptr3 - <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220419210547413.png" alt="image-20220419210547413"></p><p>简单提几点。和所有变量一样，指针变量也有自己的地址和值。对指针而言，&amp;运算符给出指针本身的地址。通常，求差的两个指针分别指向同一数组的不同元素，通过计算求出两元素之间的距离。差值的单位与数组类型的单位相同。</p><p>顺便提一句，不要解引用未初始化的指针，这是很危险的行为。</p><h2 id="保护数组中的数据"><a href="#保护数组中的数据" class="headerlink" title="保护数组中的数据"></a>保护数组中的数据</h2><h3 id="对形式参数使用-const"><a href="#对形式参数使用-const" class="headerlink" title="对形式参数使用 const"></a>对形式参数使用 const</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ar[], <span class="type">int</span> n)</span>; <span class="comment">// 函数原型</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ar[], <span class="type">int</span> n)</span> <span class="comment">// 函数定义</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中的 const 告诉编译器，该函数不能修改 ar 指向的数组中的内容。如果在函数中不小心使用类似 ar[i]++ 的表达式，编译器会捕捉这个错误，并生成一条错误信息。</p><h3 id="const-的其他内容"><a href="#const-的其他内容" class="headerlink" title="const 的其他内容"></a>const 的其他内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指向 const 的指针不能用于改变值，常用于形参中</span></span><br><span class="line"><span class="type">double</span> rates[<span class="number">5</span>] = &#123;<span class="number">88.99</span>, <span class="number">100.12</span>, <span class="number">59.45</span>, <span class="number">183.11</span>, <span class="number">340.5</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> * pd = rates; <span class="comment">// pd 指向数组的首元素</span></span><br><span class="line">*pd = <span class="number">29.89</span>; <span class="comment">// 不允许</span></span><br><span class="line">pd[<span class="number">2</span>] = <span class="number">222.22</span>; <span class="comment">// 不允许</span></span><br><span class="line">rates[<span class="number">0</span>] = <span class="number">99.99</span>; <span class="comment">// 允许，因为 rates 未被 const 限定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 const 数据或非 const 数据的地址初始化为指向 const 的指针或为其赋值是合法的</span></span><br><span class="line"><span class="type">double</span> rates[<span class="number">5</span>] = &#123;<span class="number">88.99</span>, <span class="number">100.12</span>, <span class="number">59.45</span>, <span class="number">183.11</span>, <span class="number">340.5</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> locked[<span class="number">4</span>] = &#123;<span class="number">0.08</span>, <span class="number">0.075</span>, <span class="number">0.0725</span>, <span class="number">0.07</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> * pc = rates; <span class="comment">// 有效</span></span><br><span class="line">pc = locked; <span class="comment">// 有效</span></span><br><span class="line">pc = &amp;rates[<span class="number">3</span>] <span class="comment">// 有效</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 只能把非 const 数据的地址赋给普通指针</span></span><br><span class="line"><span class="type">double</span> rates[<span class="number">5</span>] = &#123;<span class="number">88.99</span>, <span class="number">100.12</span>, <span class="number">59.45</span>, <span class="number">183.11</span>, <span class="number">340.5</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> locked[<span class="number">4</span>] = &#123;<span class="number">0.08</span>, <span class="number">0.075</span>, <span class="number">0.0725</span>, <span class="number">0.07</span>&#125;;</span><br><span class="line"><span class="type">double</span> * pnc = rates; <span class="comment">// 有效</span></span><br><span class="line">pnc = locked; <span class="comment">// 无效</span></span><br><span class="line">pnc = &amp;rates[<span class="number">3</span>]; <span class="comment">// 有效</span></span><br><span class="line"><span class="comment">// 这个规则非常合理。否则，通过指针就能改变 const 数组中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并初始化一个不能指向别处的指针，关键是 const 的位置</span></span><br><span class="line"><span class="type">double</span> rates[<span class="number">5</span>] = &#123;<span class="number">88.99</span>, <span class="number">100.12</span>, <span class="number">59.45</span>, <span class="number">183.11</span>, <span class="number">340.5</span>&#125;;</span><br><span class="line"><span class="type">double</span> * <span class="type">const</span> pc = rates;</span><br><span class="line">pc = &amp;rates[<span class="number">2</span>]; <span class="comment">// 不允许，因为该指针不能指向别处</span></span><br><span class="line">*pc = <span class="number">92.99</span>; <span class="comment">// 允许--更改 rates[0] 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指针时还可以 const 两次，该指针既不能更改它所指向的地址，也不能修改指向地址上的值</span></span><br><span class="line"><span class="type">double</span> rates[<span class="number">5</span>] = &#123;<span class="number">88.99</span>, <span class="number">100.12</span>, <span class="number">59.45</span>, <span class="number">183.11</span>, <span class="number">340.5</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> * <span class="type">const</span> pc = rates;</span><br><span class="line">pc = &amp;rates[<span class="number">2</span>]; <span class="comment">// 不允许</span></span><br><span class="line">*pc = <span class="number">92.99</span> <span class="comment">// 不允许</span></span><br></pre></td></tr></table></figure><h2 id="指针和多维数组"><a href="#指针和多维数组" class="headerlink" title="指针和多维数组"></a>指针和多维数组</h2><p><code>int zippo[4][2];</code></p><ul><li>因为 zippo 是数组首元素的地址，所以 zippo 的值和 &amp;zippo[0] 的值相同。而 zippo[0] 本身是一个内含两个整数的数组，所以zippo[0]的值和它首元素的地址（即 <code>&amp;zippo[0][0]</code> 的值相同）。简而言之，zippo[0] 是一个占用一个 <strong>int</strong> 大小对象的地址，而 zippo 是一个占用两个 <strong>int</strong> 大小的地址。由于这个整数和内含两个整数的数组都开始于同一个地址，所以 zippo 和 zippo[0] 的值相同。</li><li>给指针或地址加 1，其值会增加对应类型大小的数值。在这方面，zippo 和 zippo[0] 不同，因为 zippo 指向的对象占用了两个 <strong>int</strong> 大小，而 zippo[0] 指向的对象只占用一个 <strong>int</strong> 大小。因此，zippo + 1 和 zippo[0] + 1 的值不同。 </li><li>解引用一个指针（在指针前使用<strong>*</strong>运算符）或在数组名后使用带下标的<strong>[]</strong>运算符，得到应用对象代表的值。因为 zippo[0] 是该数组首元素（zippo[0] [0]）的地址，所以*(zippo[0]) 表示存储在 zippo[0] [0]上的值。与此类似，*zippo 代表该数组首元素（zippo[0]）的值，但是 zippo[0] 本身是一个 <strong>int</strong> 类型值的地址。该值的地址是 &amp;zippo[0] [0]，所以 *zippo 就是 &amp;zippo[0] [0]。**zippo 与 *&amp;zippo[0] [0]等价，这相当于 zippo[0] [0]，即一个 <strong>int</strong> 类型的值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> zippo[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">2</span>,<span class="number">4</span>&#125;, &#123;<span class="number">6</span>,<span class="number">8</span>&#125;, &#123;<span class="number">1</span>,<span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125; &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   zippo = %p,    zippo + 1 = %p\n&quot;</span>,</span><br><span class="line">           zippo,         zippo + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;zippo[0] = %p, zippo[0] + 1 = %p\n&quot;</span>,</span><br><span class="line">           zippo[<span class="number">0</span>],      zippo[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  *zippo = %p,   *zippo + 1 = %p\n&quot;</span>,</span><br><span class="line">           *zippo,        *zippo + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;zippo[0][0] = %d\n&quot;</span>, zippo[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  *zippo[0] = %d\n&quot;</span>, *zippo[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    **zippo = %d\n&quot;</span>, **zippo);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      zippo[2][1] = %d\n&quot;</span>, zippo[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(*(zippo+2) + 1) = %d\n&quot;</span>, *(*(zippo+<span class="number">2</span>) + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220423090830293.png" alt="image-20220423090830293"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220423091222545.png" alt="image-20220423091222545"></p><h3 id="指向多维数组的指针"><a href="#指向多维数组的指针" class="headerlink" title="指向多维数组的指针"></a>指向多维数组的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (* pz) [<span class="number">2</span>]; <span class="comment">// pz 指向一个内含两个 int 类型值的数组</span></span><br><span class="line"><span class="comment">// 使用圆括号的原因是[]的优先级高于*</span></span><br><span class="line"><span class="type">int</span> * pax[<span class="number">2</span>]; <span class="comment">// pax 是一个内含两个指针元素的数组，每个元素都是指向 int 的指针。</span></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">pz = zippo; <span class="comment">// pz[m][n] == *(*(pz + m) + n)</span></span><br></pre></td></tr></table></figure><h3 id="指针的兼容性"><a href="#指针的兼容性" class="headerlink" title="指针的兼容性"></a>指针的兼容性</h3><p>指针之间的赋值比数值类型之间的赋值要严格。例如，不用类型转换就可以把 <strong>int</strong> 类型的值赋给 <strong>double</strong> 类型的变量，但是两个类型的指针不能这样做。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">int</span> * p1 = &amp;n;</span><br><span class="line"><span class="type">double</span> * pd = &amp;x;</span><br><span class="line">x = n; <span class="comment">// 隐式类型转换</span></span><br><span class="line">pd = p1; <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><p>下面无效的赋值表达式语句中涉及的两个指针都是指向不同的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * pt;</span><br><span class="line"><span class="type">int</span> (*pa)[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> ar1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> ar2[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> **p2; <span class="comment">// 一个指向指针的指针</span></span><br><span class="line"></span><br><span class="line">pt = &amp;ar1[<span class="number">0</span>][<span class="number">0</span>]; <span class="comment">// 都是指向 int 的指针</span></span><br><span class="line">pt = ar1[<span class="number">0</span>]; <span class="comment">// 都是指向 int 的指针</span></span><br><span class="line">pt = ar1; <span class="comment">// 无效</span></span><br><span class="line">pa = ar1; <span class="comment">// 都是指向内含3个 int 类型元素数组的指针</span></span><br><span class="line">pa = ar2; <span class="comment">// 无效</span></span><br><span class="line">p2 = &amp;pt; <span class="comment">// 都是指向 int *的指针</span></span><br><span class="line">*p2 = ar2[<span class="number">0</span>]; <span class="comment">// 都是指向 int 的指针</span></span><br><span class="line">p2 = ar2; <span class="comment">// 无效</span></span><br></pre></td></tr></table></figure><h3 id="函数和多维数组"><a href="#函数和多维数组" class="headerlink" title="函数和多维数组"></a>函数和多维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> ar[][<span class="number">4</span>])</span>; <span class="comment">// 有效声明，标准形式</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> ar[<span class="number">3</span>][<span class="number">4</span>])</span>; <span class="comment">// 有效声明，但是3将会被忽略</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> ar[][])</span>; <span class="comment">// 错误的声明</span></span><br></pre></td></tr></table></figure><p>编译器会把数组表示法转换为指针表示法。例如，编译器会把 ar[1] 转换为 ar + 1。编译器对 ar + 1 求值，要知道 ar 所指向的对象大小。如果第 2 对方括号是空的，编译器就不知道该怎样处理。</p><h3 id="变长数组（VLA）"><a href="#变长数组（VLA）" class="headerlink" title="变长数组（VLA）"></a>变长数组（VLA）</h3><p>C99 新增了变长数组，允许使用变量表示数组的维度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COLS 4</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum2d</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> ar[rows][cols])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> rs = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> cs = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> junk[ROWS][COLS] = &#123;</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">12</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> morejunk[ROWS<span class="number">-1</span>][COLS+<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> varr[rs][cs];  <span class="comment">// VLA</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rs; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cs; j++)</span><br><span class="line">            varr[i][j] = i * j + j;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3x5 array\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of all elements = %d\n&quot;</span>,</span><br><span class="line">           sum2d(ROWS, COLS, junk));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2x6 array\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of all elements = %d\n&quot;</span>,</span><br><span class="line">           sum2d(ROWS<span class="number">-1</span>, COLS+<span class="number">2</span>, morejunk));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3x10 VLA\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of all elements = %d\n&quot;</span>,</span><br><span class="line">           sum2d(rs, cs, varr));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function with a VLA parameter</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum2d</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> ar[rows][cols])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; rows; r++)</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; cols; c++)</span><br><span class="line">            tot += ar[r][c];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220423103227215.png" alt="image-20220423103227215"></p><p>变长数组还允许动态内存分配，这说明可以在程序运行时指定数组的大小，普通 C 数组都是静态内存分配，即在编译时确定数组的大小。由于数组大小是常量，所以编译器在编译时就知道了。</p><h3 id="复合字面量"><a href="#复合字面量" class="headerlink" title="复合字面量"></a>复合字面量</h3><p>在 C99 标准以前，对于带数组形参的函数，可以传递数组，但是没有等价的数组常量。C99 新增了复合字面量。字面量是除符号常量外的常量。例如，5 是 <strong>int</strong> 类型字面量。发布 C99 标准的委员会认为，如果有代表数组和结构内容的复合字面量，在编程时会更方便。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复合字面量是匿名的，所以不能先创建然后再使用它，必须在创建的同时使用它。</span></span><br><span class="line"><span class="type">int</span> * pt1;</span><br><span class="line">pt1 = (<span class="type">int</span> [<span class="number">2</span>]) &#123;<span class="number">10</span>, <span class="number">20</span>&#125;; <span class="comment">// (int [2]) &#123;10, 20&#125;即为复合字面量</span></span><br></pre></td></tr></table></figure><p>还可以把复合字面量作为实际参数传递给带有匹配形式参数的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ar[], <span class="type">int</span> n)</span>;</span><br><span class="line">...</span><br><span class="line"><span class="type">int</span> total3;</span><br><span class="line">total3 = sum((<span class="type">int</span> [])&#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>&#125;, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在数组名作为实际参数，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的实际参数是指针）。</p><p>C 把数组名解释为该数组首元素的地址。数组名与指向该数组首元素的指针等价。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 9 函数</title>
      <link href="//ea231a5f.html"/>
      <url>//ea231a5f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第九章-函数"><a href="#第九章-函数" class="headerlink" title="第九章 函数"></a>第九章 函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;GIGATHINK, INC.&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS <span class="string">&quot;101 Megabuck Plaza&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLACE <span class="string">&quot;Megapolis, CA 94904&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDTH 40</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">starbar</span><span class="params">(<span class="type">void</span>)</span>;  <span class="comment">/* prototype the function */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    starbar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, NAME);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ADDRESS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, PLACE);</span><br><span class="line">    starbar();       <span class="comment">/* use the function       */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">starbar</span><span class="params">(<span class="type">void</span>)</span>   <span class="comment">/* define the function    */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= WIDTH; count++)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417144143773.png" alt="image-20220417144143773"></p><p>在 <strong>C</strong> 语言中，使用函数分三个步骤：定义函数、声明函数和调用函数。分析上例：定义函数<code>void starbar(void)</code>，第一个 void 表示函数没有返回值，第二个 void 表示该函数没有形参，函数里面就是要实现功能的一些代码，注意函数里面的 count 是局部变量；声明函数时，基本要与定义函数时的函数头保持一致，别忘了分号。函数原型一般在开头声明；调用函数我们无需再表明函数的类型了，由于该例中没有形参，所以括号内我们留空就好。</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>定义带参数的函数，举例<code>void show_n_char(char ch, int num)</code>。我们要在括号里面添加我们想使用的参数，用逗号隔开，不要忘了定义它们的数据类型。在开头声明函数原型基本保持一致就好，<code>void show_n_char(char ch, int num);</code> 。调用带参数的函数形式如<code>show_n_char(&#39;*&#39;, 12);</code> ，没有什么复杂的地方，对应就好了。注意调用时的参数叫做实际参数，与形式参数区分开来。</p><h3 id="使用-return-从函数中返回值"><a href="#使用-return-从函数中返回值" class="headerlink" title="使用 return 从函数中返回值"></a>使用 return 从函数中返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">imin</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> evil1, evil2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a pair of integers (q to quit):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;evil1, &amp;evil2) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The lesser of %d and %d is %d.\n&quot;</span>,</span><br><span class="line">               evil1, evil2, imin(evil1,evil2));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a pair of integers (q to quit):\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">imin</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> min;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &lt; m)</span><br><span class="line">        min = n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        min = m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417151027132.png" alt="image-20220417151027132"></p><p>我们这次不用 <strong>void</strong> 来定义函数了，我们用 <strong>int</strong> 。关键字 <strong>return</strong> 后面的表达式的值就是函数的返回值。</p><p>如果函数返回值的类型与函数声明的类型不匹配会怎样？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">what_if</span> <span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> z = <span class="number">100.0</span> / (<span class="type">double</span>) n;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际得到的返回值相当于把函数中指定的返回值赋给与函数类型相同的变量所得到的值。因此在本例中，相当于把 z 的值赋给 <strong>int</strong> 类型的变量，然后返回 <strong>int</strong> 类型变量的值。</p><p>返回最小值函数的其他版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imin (<span class="type">int</span> n,<span class="type">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; m) ? n : m; <span class="comment">// 返回值还可以是任意表达式的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imin (<span class="type">int</span> n,<span class="type">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;m)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;snow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例中的 <code>printf()</code> 语句永远不会被执行，return 语句会终止函数。</p><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>声明函数时必须声明函数的类型。带返回值的函数应该与其返回值类型相同，而没有返回值的函数应声明为 <strong>void</strong> 类型。要记住，函数类型指的是返回值的类型，不是函数参数的类型。</p><p>函数原型是 <strong>C</strong> 语言的一个强有力的工具，它让编译器捕获在使用函数时可能出现的许多错误或疏漏。</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">up_and_down</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    up_and_down(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">up_and_down</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Level %d: n location %p\n&quot;</span>, n, &amp;n); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">        up_and_down(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LEVEL %d: n location %p\n&quot;</span>, n, &amp;n); <span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417154442761.png" alt="image-20220417154442761"></p><p>递归是个不太好用言语描述的过程，对于这个简单的例子，我简单地阐述一下。f(1) 调用 f(2)，f(2) 再调用 f(3)，在这个过程中间，打印出了头三行语句。f(3) 已经不满足 n&lt;3 的条件，打印出语句结束，控制传回 f(2)，打印出一条语句结束，控制传回 f(1)。</p><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>最简单的递归形式是把递归调用置于函数的末尾，即正好在 return 语句之前。这种形式的递归被称为尾递归，因为递归调用在函数的末尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">rfact</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">        ans= n * rfact(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是递归计算阶乘的示例。</p><h3 id="递归和倒序计算"><a href="#递归和倒序计算" class="headerlink" title="递归和倒序计算"></a>递归和倒序计算</h3><p>递归在处理倒序时非常方便。我们要解决的一个问题是：编写一个函数，打印一个整数的二进制数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">to_binary</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    </span><br><span class="line">    r = n % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2</span>)</span><br><span class="line">        to_binary(n / <span class="number">2</span>);</span><br><span class="line">     <span class="built_in">putchar</span>(r == <span class="number">0</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实没什么难理解的，最大的困难可能是我们一直以来都在使用十进制数，会陷入到思维定势中。想想我们如何打印一个整数的十进制数（听起来好像有点蠢），用一位一位的打印方法，怎么打印十进制数，我们就怎么打印二进制数。</p><h3 id="递归的优缺点"><a href="#递归的优缺点" class="headerlink" title="递归的优缺点"></a>递归的优缺点</h3><p>递归有优点也有缺点。优点是为某些编程问题提供了最简单的解决方案，缺点是一些递归算法会快速消耗计算机的内存资源。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">Fibonacci</span> <span class="params">(<span class="type">unsigned</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数使用了双递归。由于每级递归创建的变量都是上一级递归的两倍，所以变量的数量呈指数增长！在本例中，指数增长的变量数量很快就消耗掉计算机的大量内存，很可能导致程序崩溃。</p><h3 id="与递归无关的小栗子"><a href="#与递归无关的小栗子" class="headerlink" title="与递归无关的小栗子"></a>与递归无关的小栗子</h3><p>在进入下一小节，我们来看一个技巧性的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getnights</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nights;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;How many nights are needed? &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nights) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%*s&quot;</span>);       <span class="comment">// dispose of non-integer input</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter an integer, such as 2.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nights;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如我们的脸不小心在键盘上滚动，输入了asdiofoas&amp;af一堆乱七八糟的字符会怎么样。首先，a被<code>scanf()</code>捕获，但由于它不是整数，所以会被放回输入原处，<code>scanf()</code>的返回值为0，不等于1，进入循环。<code>scanf(&quot;%*s&quot;);</code>十分巧妙，把*放在%和转换字符之间，会使得<code>scanf()</code>跳过相应的输入项，因此一大堆字符就被这样跳过了。</p><h2 id="查找地址：-amp-运算符"><a href="#查找地址：-amp-运算符" class="headerlink" title="查找地址：&amp;运算符"></a>查找地址：&amp;运算符</h2><p>指针是 <strong>C</strong> 语言最重要的概念之一，用于存储变量的地址。前面使用的<code>scanf()</code>函数就使用地址作为参数。概括地说，如果主调函数不使用 return 返回的值，则必须通过地址才能修改主调函数中的值。</p><p>一元 <strong>&amp;</strong> 运算符给出变量的存储位置。如果 pooh 是变量名，那么 &amp;pooh 是变量的地址。可以把地址看作是变量在内存中的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mikado</span><span class="params">(<span class="type">int</span>)</span>;                      <span class="comment">/* declare function  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pooh = <span class="number">2</span>, bah = <span class="number">5</span>;             <span class="comment">/* local to main()   */</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In main(), pooh = %d and &amp;pooh = %p\n&quot;</span>,</span><br><span class="line">           pooh, &amp;pooh);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In main(), bah = %d and &amp;bah = %p\n&quot;</span>,</span><br><span class="line">           bah, &amp;bah);</span><br><span class="line">    mikado(pooh);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mikado</span><span class="params">(<span class="type">int</span> bah)</span>                   <span class="comment">/* define function   */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pooh = <span class="number">10</span>;                     <span class="comment">/* local to mikado() */</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In mikado(), pooh = %d and &amp;pooh = %p\n&quot;</span>,</span><br><span class="line">           pooh, &amp;pooh);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In mikado(), bah = %d and &amp;bah = %p\n&quot;</span>,</span><br><span class="line">           bah, &amp;bah);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417164154812.png" alt="image-20220417164154812"></p><p>每个十六进制数对应4位，该例显示12个十六进制数，对应48位地址。</p><p>该例的输出说明了什么？首先，两个 pooh 的地址不同，两个 bah 的地址也不同，计算机把它们看成4个独立的变量。其次，函数调用 mikado(pooh) 把实际参数 (main() 中的 pooh) 的值 2 传递给形式参数 (mikao() 中的 bah)。注意，这种传递只传递了值，涉及的两个变量并未改变。</p><h2 id="更改主调函数中的变量"><a href="#更改主调函数中的变量" class="headerlink" title="更改主调函数中的变量"></a>更改主调函数中的变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Originally x = %d and y = %d.\n&quot;</span>, x , y);</span><br><span class="line">    interchange(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now x = %d and y = %d.\n&quot;</span>, x, y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Originally u = %d and v = %d.\n&quot;</span>, u , v);</span><br><span class="line">    temp = u;</span><br><span class="line">    u = v;</span><br><span class="line">    v = temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now u = %d and v = %d.\n&quot;</span>, u, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417165244214.png" alt="image-20220417165244214"></p><p>我们可以看到，交换 u 和 v 的值对 x 和 y 的值没有影响。我们要使用指针进行交换！</p><h2 id="指针简介"><a href="#指针简介" class="headerlink" title="指针简介"></a>指针简介</h2><p>指针是一个值为内存地址的变量（或数据对象）。正如 <strong>char</strong> 类型变量的值是字符，<strong>int</strong> 类型变量的值是整数，指针变量的值是地址。</p><p>假设一个指针变量名是 ptr，可以编写如下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptr = &amp;pooh; <span class="comment">// 把 pooh 的地址赋给 ptr</span></span><br></pre></td></tr></table></figure><p>对于这条语句，我们说 ptr“指向”pooh。ptr 和 &amp;pooh 的区别是 ptr 是变量，而 &amp;pooh 是常量。当然，还可以把 ptr 指向别处：<code>ptr = &amp;bah;</code>。现在 ptr 的值是 bah 的地址。</p><h3 id="间接运算符："><a href="#间接运算符：" class="headerlink" title="间接运算符：*"></a>间接运算符：*</h3><p>假设已知 ptr 指向 bah，<code>ptr = &amp;bah;</code> 然后使用间接运算符 <strong>*</strong> 找出存储在 bah 中的值，该运算符有时也称为解引用运算符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val = *ptr; <span class="comment">// 找出 ptr 指向的值</span></span><br></pre></td></tr></table></figure><p>语句<code>ptr = &amp;bah;</code>和<code>val = *ptr;</code>放在一起相当于<code>val = bah;</code>。</p><h3 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h3><p>声明指针变量时必须指定指针指针所指向的变量类型，因为不同的变量类型占用不同的储存空间，一些指针操作要求知道操作对象的大小。另外，程序必须知道存储在指定地址上的数据类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * pi; <span class="comment">// pi 是指向 int 变量类型的指针</span></span><br><span class="line"><span class="type">float</span> * pf, * pg; <span class="comment">// pf、pg 都是指向 float 类型变量的指针</span></span><br></pre></td></tr></table></figure><p>星号( <em> )表面声明的变量是一个指针。`int </em> pi;`声明的意思是 pi 是一个指针，<em>pi 是 <em>*int</em></em> 类型。</p><p>*和指针名之间的空格可有可无。通常，程序员在声明时使用空格，在解引用变量时省略空格。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417173341506.png" alt="image-20220417173341506"></p><p>pc 指向的值（<em>pc）是 <strong>char</strong> 类型，pc 我们描述它的类型是“指向 <em>*char</em></em> 类型的指针”。pc 的值是一个地址，在大部分系统内部，该地址由一个无符号整数表示。但是，不要把指针认为是整数类型。一些处理整数的操作不能用来处理指针，反之亦然。</p><h3 id="使用指针在函数间通信"><a href="#使用指针在函数间通信" class="headerlink" title="使用指针在函数间通信"></a>使用指针在函数间通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span> * u, <span class="type">int</span> * v)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Originally x = %d and y = %d.\n&quot;</span>, x, y);</span><br><span class="line">    interchange(&amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now x = %d and y = %d.\n&quot;</span>, x, y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span> * u, <span class="type">int</span> * v)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = *u;</span><br><span class="line">    *u = *v;</span><br><span class="line">    *v = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220417185529346.png" alt="image-20220417185529346"></p><p>首先看函数调用：<code>interchange(&amp;x, &amp;y);</code> 该函数传递的不是 x 和 y 的值，而是它们的地址。这意味着出现在 interchange() 原型和定义中的形式参数 u 和 v 将地址作为它们的值。因此，应把它们声明为指针。由于 x 和 y 是整数，所以 u 和 v 是指向整数的指针，其声明如下：</p><p><code>void interchange (int * u, int * v)</code></p><p><code>temp = *u;</code>把 x 的值存储在 temp 中。u 的值是 &amp;x，所以 u 指向 x。这意味着用 <em>u 即可表示 x 的值。类似的，`</em>u = *v;`把 y 的值赋给x。  </p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 8 字符输入/输出</title>
      <link href="//b3510ec.html"/>
      <url>//b3510ec.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第八章-字符输入-输出"><a href="#第八章-字符输入-输出" class="headerlink" title="第八章 字符输入/输出"></a>第八章 字符输入/输出</h1><h2 id="单字符I-O：getchar-和-putchar"><a href="#单字符I-O：getchar-和-putchar" class="headerlink" title="单字符I/O：getchar() 和 putchar()"></a>单字符I/O：getchar() 和 putchar()</h2><p><code>getchar()</code> 和 <code>putchar</code> 每次只处理一个字符。自从 ANSI C 标准发布以后，<strong>C</strong> 就把 stdio.h 头文件与使用 <code>getchar()</code> 和 <code>putchar()</code> 相关联。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220415195844577.png" alt="image-20220415195844577"></p><p>缓冲分为两类：完全缓冲 I/O 和行缓冲 I/O。完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区，通常出现在文件输入中。缓冲区的大小取决于系统，常见的大小是 512 字节和 4096 字节。行缓冲 I/O 指的是在出现换行符时刷新缓冲区。键盘输入通常是行缓冲输入，所以在按下 Enter 键后才刷新缓冲区。</p><p>虽然缓冲输入好处很多，但是某些交互式程序也需要无缓冲输入。例如，在游戏中。</p><h2 id="结束键盘输入"><a href="#结束键盘输入" class="headerlink" title="结束键盘输入"></a>结束键盘输入</h2><h3 id="文件、流和键盘输入"><a href="#文件、流和键盘输入" class="headerlink" title="文件、流和键盘输入"></a>文件、流和键盘输入</h3><p>A <em>file</em> is an area of memory in which information is stored. Normally, a file is kept in some sort of permanent memory, such as a hard disk, USB flash drive.</p><p>When you are using the standard I/O package, you are shielded from differences in different systems. Therefore, to check for a new line, you can use <code>if (ch == &#39;\n&#39;)</code>. If the system actually uses the carriage return/linefeed combination, the I/O functions automatically translate back and forth between the two representations.</p><p>Conceptually, the <strong>C</strong> program deals with a stream instead of directly with a file. A <em>stream</em> is an idealized flow of date to which the actual input or output is mapped. That means various kinds of input with differing properties are represented by streams with more uniform properties. The process of opening a file then becomes one of associating a stream with the file, and reading and writing take place via the stream.</p><h3 id="The-End-of-File"><a href="#The-End-of-File" class="headerlink" title="The End of File"></a>The End of File</h3><p>无论操作系统实际使用何种方法检测文件结尾，在C语言中，用<code>getchar()</code>读取文件检测到文件结尾时将返回一个特殊的值，即 <strong>EOF</strong>（end of file 的缩写)。<code>scanf()</code>函数检测到文件结尾时也返回 EOF 。通常， EOF 定义在 stdio.h 文件中：</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220415203947670.png" alt="image-20220415203947670"></p><p>Why -1? Normally, <code>getchar()</code> returns a value in the range 0 through 127, because those are values corresponding to the standard character set, but it might return values from 0 through 255 if the system recognizes an extended character set. In either case, the value -1 does not correspond to any character, so it can be used to signal the end of a file.</p><p>以下程序展现了怎么使用 EOF 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无需再定义 EOF ，因为 stdio.h 中已经定义过了。</li><li>变量 ch 的类型要用 <strong>int</strong> ，因为 <strong>char</strong> 类型的变量只能表示 0 ~ 255 的无符号整数，但是 EOF 的值是 -1。<code>getchar()</code> 函数的实际返回值的类型是 <strong>int</strong> ，所以它可以读取 EOF 字符。如果实现使用有符号的 <strong>char</strong> 类型，也可以把 ch 声明为 <strong>char</strong> 类型，但最好还是用更通用的形式。</li><li>由于 <code>getchar()</code>函数的返回类型是 <strong>int</strong> ，如果把<code>getchar()</code>的返回值赋给 <strong>char</strong> 类型的变量，一些编译器会警告可能丢失数据。</li><li>使用该程序进行键盘输入，要设法输入 EOF 字符。不能只输入字符 EOF ，也不能只输入 -1。正确的方法是，必须找出当前系统的要求。例如，在大多数 UNIX 和 LINUX 系统中，在一行开始处按下 <kbd>Ctrl</kbd>+<kbd>D</kbd>会传输文件结尾信号；在 PC中，要按下<kbd>Ctrl</kbd>+<kbd>Z</kbd>。</li></ul><h2 id="重定向和文件"><a href="#重定向和文件" class="headerlink" title="重定向和文件"></a>重定向和文件</h2><p>重定向输入让程序使用文件而不是键盘来输入，重定向输出让程序输出至文件而不是屏幕。</p><h3 id="重定向输入"><a href="#重定向输入" class="headerlink" title="重定向输入"></a>重定向输入</h3><p>假设已经编译了 echo_eof.c 程序，并生成了一个名为 echo_eof （或者在 Windows 系统中名为 echo_eof.exe）的可执行文件。运行该程序，输入可执行文件名：<code>./echo_eof</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416083513919.png" alt="image-20220416083513919"></p><p>我们在当前目录新建一个名为 hello.txt 的文件，并输入一些字符。我们使用重定向运算符 <strong>&lt;</strong> 使 hello.txt 文件与 stdin 流相关联，把文件中的内容导入 echo_eof 程序。echo_eof 程序本身并不知道（或不关心）输入的内容来自文件还是键盘，它只知道这是需要导入的字符流。<br>我们在终端上打上 <code>./echo_eof &lt; hello.txt</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416084842633.png" alt="image-20220416084842633"></p><p>屏幕上显示了我们之前在 hello.txt 中编辑的内容。</p><h3 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h3><p>现在假设要用 echo_eof 把键盘输入的内容发送到名为 snow 的文件中。然后，输入以下命令并开始输入：</p><p><code>./echo_eof&gt;snow</code></p><p><strong>&gt;</strong> 符号是第2个重定向运算符。它创建了一个名为 snow 的新文件，然后把 echo_eof 的输出重定向至该文件中。重定向把 stdout 从显示设备赋给 snow 文件。在新一行的开始处按下 <kbd>Crtl</kbd>+<kbd>Z</kbd>结束该程序。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416090207480.png" alt="image-20220416090207480"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416090717130.png" alt="image-20220416090717130"></p><h3 id="组合重定向"><a href="#组合重定向" class="headerlink" title="组合重定向"></a>组合重定向</h3><p>现在，建设你希望制作一份 snow 文件的副本，并命名为 savesnow。只需输入以下命令即可：</p><p><code>./echo_eof &lt; snow &gt; savesnow</code></p><p>下面的命令也起作用，因为命令与重定向运算符的顺序无关：</p><p><code>./echo_eof &gt; savesnow &lt; save</code></p><p>使用重定向运算符需要遵循的原则：</p><ul><li>重定向运算符连接一个可执行程序和一个数据文件，不能用于连接一个数据文件和另一个数据文件，也不能用于连接一个程序和另一个程序。</li><li>使用重定向运算符不能读取多个文件的输入，也不能把输出定向至多个文件。</li><li>通常，文件名和运算符之间的空格不是必须的。</li></ul><h2 id="创建更友好的用户界面"><a href="#创建更友好的用户界面" class="headerlink" title="创建更友好的用户界面"></a>创建更友好的用户界面</h2><h3 id="使用缓冲输入"><a href="#使用缓冲输入" class="headerlink" title="使用缓冲输入"></a>使用缓冲输入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* guess.c -- an inefficient and faulty number-guesser */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> guess = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pick an integer from 1 to 100. I will try to guess &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;it.\nRespond with a y if my guess is right and with&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nan n if it is wrong.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Uh...is your number %d?\n&quot;</span>, guess);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;y&#x27;</span>)      <span class="comment">/* get response, compare to y */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I knew I could do it!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416093951228.png" alt="image-20220416093951228"></p><p>我们来看看这个程序中都有什么问题。我们输入 n，程序居然打印了两条消息，假如我们心里想的是2，那么就猜失败了。错误的原因是，<code>getchar()</code>不仅读取了 n，还读取了我们为了刷新缓冲区的换行符，no 的错误同理。我们来修正这个问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416094828992.png" alt="image-20220416094828992"></p><p>我们先来分析下新加的这两行代码的好处。如果输入一个 n 和一个换行符的话，n 被外层 <strong>while</strong> 的<code>getchar()</code>接受，换行符被内层 <strong>while</strong> 接受，由于换行符不满足内层 <strong>while</strong> 的条件，会开启一轮新的外层循环。如果 n 之后有别的字符，其满足内层 <strong>while</strong> 的条件，进入后遇到 <code>continue;</code>，将会重新开始内层循环。所以这两行代码及解决掉了换行符的问题，也解决掉了多余字符的问题。</p><p>但是，该程序仍会把别的字符视为 n 。我们来解决这个问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((response = getchar()) != <span class="string">&#x27;y&#x27;</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Well, then, is it %d?\n&quot;</span>, ++guess);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Sorry, I understand only y or n.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;                 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们添加一个 <strong>char</strong> 类型的变量和 <strong>if</strong> 语句来进行筛选。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416100225969.png" alt="image-20220416100225969"></p><h3 id="混合数值和字符输入"><a href="#混合数值和字符输入" class="headerlink" title="混合数值和字符输入"></a>混合数值和字符输入</h3><p>该程序读入一个字符和两个数字，然后根据输入的两个数字指定的行数和列数打印该字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">char</span> cr, <span class="type">int</span> lines, <span class="type">int</span> width)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch;             <span class="comment">/* character to be printed    */</span></span><br><span class="line">    <span class="type">int</span> rows, cols;     <span class="comment">/* number of rows and columns */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a character and two integers:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;rows, &amp;cols);</span><br><span class="line">        display(ch, rows, cols);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter another character and two integers;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a newline to quit.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">char</span> cr, <span class="type">int</span> lines, <span class="type">int</span> width)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> row, col;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (row = <span class="number">1</span>; row &lt;= lines; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (col = <span class="number">1</span>; col &lt;= width; col++)</span><br><span class="line">            <span class="built_in">putchar</span>(cr);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);  <span class="comment">/* end line and start a new one */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220416101937714.png" alt="image-20220416101937714"></p><p>屏幕上提示我们再输入字符，但没来得及输出，程序就退出了，这是什么原因呢？其实跟上例相似，又是换行符的问题。<code>scanf()</code>把我们用于刷新缓冲区的换行符仍留在输入队列中。和<code>scanf()</code>不同，<code>getchar()</code>不会跳过换行符，所以在进入下一轮迭代时，还没来得及输入字符，它就读取了换行符，然后将其赋给 ch 。</p><p>我们用与上例相仿的解决方案 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;rows, &amp;cols) != <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        display(ch, rows, cols);</span><br><span class="line">        <span class="keyword">while</span> (getchar() !=  <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter another character and two integers;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a newline to quit.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>while</strong> 循环实现了丢弃<code>scanf()</code>输入后面所有字符（包括换行符）的功能。值得注意的是，我们在 <strong>if</strong>  语句中使用一个 <strong>break</strong> 语句，可以在 <code>scanf()</code> 的返回值不等于2时终止程序，即如果一个或两个输入值不是整数或者遇到文件结尾就终止程序。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 7 C控制语句：分支和跳转</title>
      <link href="//b3510ed.html"/>
      <url>//b3510ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="C-控制语句：分支和跳转"><a href="#C-控制语句：分支和跳转" class="headerlink" title="C 控制语句：分支和跳转"></a>C 控制语句：分支和跳转</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形式一</span></span><br><span class="line"><span class="keyword">if</span> (expression)</span><br><span class="line">    statement</span><br><span class="line"><span class="comment">// 形式二</span></span><br><span class="line"><span class="keyword">if</span> (expression)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement2</span><br><span class="line"><span class="comment">// 形式三</span></span><br><span class="line"><span class="keyword">if</span> (expression1)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (expression2)</span><br><span class="line">    statement2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement3</span><br><span class="line"><span class="comment">/*若是多条语句，必须用花括号包裹</span></span><br></pre></td></tr></table></figure><h3 id="ctype-h-系列的函数"><a href="#ctype-h-系列的函数" class="headerlink" title="ctype.h 系列的函数"></a>ctype.h 系列的函数</h3><p><strong>C</strong> 有一系列专门处理字符的函数，ctype.h头文件包含了这些函数的原型。这些函数接收一个字符作为参数，如果该字符属于某特殊的类别，就返回一个非零值（真）；否则，返回0（假）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换输入的字母，非字母字符保持不变</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span>            <span class="comment">// for isalpha()</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch))      <span class="comment">// if a letter,</span></span><br><span class="line">            <span class="built_in">putchar</span>(ch + <span class="number">1</span>);  <span class="comment">// display next letter</span></span><br><span class="line">        <span class="keyword">else</span>                  <span class="comment">// otherwise,</span></span><br><span class="line">            <span class="built_in">putchar</span>(ch);      <span class="comment">// display as is</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);              <span class="comment">// display the newline</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414193956898.png" alt="image-20220414193956898"></p><p>字符映射函数不会修改原始的参数，这些函数只会返回已修改的值。也就是说，下面的语句不改变 ch 的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tolower</span>(ch); <span class="comment">// 不影响 ch 的值</span></span><br><span class="line">ch = <span class="built_in">tolower</span>(ch); <span class="comment">//这样才会把 ch 转换成小写字母</span></span><br></pre></td></tr></table></figure><h3 id="else-与-if-配对"><a href="#else-与-if-配对" class="headerlink" title="else 与 if 配对"></a>else 与 if 配对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">6</span>)</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not good\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414195752705.png" alt="image-20220414195752705"></p><p>如果没有花括号，<strong>else</strong> 与离它最近的 <strong>if</strong> 匹配。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414200543289.png" alt="image-20220414200543289"></p><h3 id="备选拼写：iso646-h头文件"><a href="#备选拼写：iso646-h头文件" class="headerlink" title="备选拼写：iso646.h头文件"></a>备选拼写：iso646.h头文件</h3><p>如果在程序中包含该头文件，就可以使用 and 代替 &amp;&amp; 、or 代替 || 、not 代替 ！。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>!</strong> 运算符的优先级很高，比乘法运算符还高，与递增的运算符的优先级相同，只比圆括号的优先级低。<strong>&amp;&amp;</strong> 运算符的优先级比 <strong>||</strong> 运算符高，但是两者的优先级都比关系运算符低，比赋值运算符高。</p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p><code>while (90 &lt;= range &lt;= 100)</code>这种数学式的写法是不正确的。  </p><p>90 &lt;= range 返回 0 或 1，这两个值都小于 100，最终的返回值为1，这个循环会一直进行下去。</p><p>正确的写法为<code>while (90 &lt;= range &amp;&amp; range &lt;= 100)</code>。  </p><p>再来看一个例子。假设 ch 是 <strong>char</strong> 类型的变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定一个字符是否为小写字母</span></span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s a lowercase character.\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>该方法仅对像 ASCII 这样的字符编码有效，这些编码中相邻字母与相邻数字一一对应。但是，对于像 EBCDIC 这样的代码就没用了。相应的可移植方法是，用 ctype.h 系列中的 <code>islower()</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">islower</span>(ch))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s a lowercase character.\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符:  ?:"></a>条件运算符:  ?:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1 ? expression2 : expression3</span><br></pre></td></tr></table></figure><p>如果 expression1 为真，整个条件表达式的值是 expression2 的值；否则，是 expression3 的值。</p><h2 id="循环辅助：continue-和-break"><a href="#循环辅助：continue-和-break" class="headerlink" title="循环辅助：continue 和 break"></a>循环辅助：continue 和 break</h2><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>3种循环都可以使用 <strong>continue</strong> 语句。执行到该语句时，会跳过本次迭代的剩余部分，并开始下一轮迭代。如果 <strong>continue</strong> 语句在嵌套循环内，则只会影响包含该语句的内层循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a score (q to quit): &quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">100</span> || num &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is an invalid value. Try again: &quot;</span>, num);</span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">//跳转至 while 循环的测试条件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Valid value!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter another score (q to quit): &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414205428347.png" alt="image-20220414205428347"></p><p>更多例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该循环读取10个字符并重新显示它们，其中不包括换行符。</p><p>对于 <strong>for</strong> 循环，执行 <strong>continue</strong> 后的下一个行为是对更新表达式求值，然后是对循环测试表达式求值，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">10</span>; count++)</span><br><span class="line">&#123;</span><br><span class="line">ch = getchar()</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>while</strong> 循环的例子中，除了换行符，其余字符都显示；而本例中，换行符也计算在内，所以读取的10个字符中也包含换行符。</p><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>程序执行到循环的 <strong>break</strong> 语句中，会终止包含它的循环，并继续执行下一阶段。如果 <strong>break</strong> 语句位于嵌套循环内，它只会影响包含它的当前循环。</p><p>我们把演示 <strong>continue</strong> 的第一个例子中的 <strong>continue</strong> 改为 <strong>break</strong>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a score (q to quit): &quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">100</span> || num &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is an invalid value. Try again: &quot;</span>, num);</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出当前循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Valid value!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter another score (q to quit): &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414211933525.png" alt="image-20220414211933525"></p><h2 id="多重选择：switch-和-break"><a href="#多重选择：switch-和-break" class="headerlink" title="多重选择：switch 和 break"></a>多重选择：switch 和 break</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414213443430.png" alt="image-20220414213443430"></p><p>圆括号中的值是一个整数值（包括 <strong>char</strong> 类型），case 标签必须是整数类型（包括 <strong>char</strong> 类型）的常量或整型常量表达式。</p><p>我们来看一个使用多重标签的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vowels.c -- uses multiple labels</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> a_ct, e_ct, i_ct, o_ct, u_ct;</span><br><span class="line">    </span><br><span class="line">    a_ct = e_ct = i_ct = o_ct = u_ct = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter some text; enter # to quit.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> :  a_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span> :  e_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> :  i_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span> :  o_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span> :  u_ct++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :   <span class="keyword">break</span>;</span><br><span class="line">        &#125;                    <span class="comment">// end of switch</span></span><br><span class="line">    &#125;                        <span class="comment">// while loop end</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number of vowels:   A    E    I    O    U\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                 %4d %4d %4d %4d %4d\n&quot;</span>,</span><br><span class="line">           a_ct, e_ct, i_ct, o_ct, u_ct);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414214549718.png" alt="image-20220414214549718"></p><p>如果 ch 是字母 i，<strong>switch</strong> 语句会定位到标签为 case ‘i’: 的位置。由于该标签没有关联 <strong>break</strong> 语句，所以程序流直接执行下一条语句，即 <code>i_ct++;</code>。如果 ch 是字母 I ，程序流会直接定位到 case ‘I’: 。假如我们把 <strong>switch</strong> 语句中所有的 <strong>break</strong> 去掉，如果 ch 是 字母 i，<code>i_ct++</code> <code>o_ct++</code> <code>u_ct++</code> 都会被执行。注意 <strong>switch</strong> 语句中的 <strong>break</strong> 只能跳出 <strong>switch</strong> ，不能跳出外层的 <strong>while</strong>。</p><p>如果使用 ctype.h 系列中的 <code>toupper()</code> 函数可以避免使用多重标签，比如改为<code>switch(toupper(ch))</code>。</p><h2 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a>goto 语句</h2><p>Kernighan and Ritchie refer to the <strong>goto</strong> statement as “infinitely abusable” and suggest that it “be used sparingly, if at all.”</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414221051238.png" alt="image-20220414221051238"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 6 C控制语句：循环</title>
      <link href="//7c32207b.html"/>
      <url>//7c32207b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第六章-C控制语句：循环"><a href="#第六章-C控制语句：循环" class="headerlink" title="第六章 C控制语句：循环"></a>第六章 C控制语句：循环</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> num;</span><br><span class="line">    <span class="type">long</span> sum = <span class="number">0L</span>;      </span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter an integer to be summed &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(q to quit): &quot;</span>);</span><br><span class="line">    status = <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">while</span> (status == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter next integer (q to quit): &quot;</span>);</span><br><span class="line">        status = <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Those integers sum to %ld.\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093125376.png" alt="image-20220414093125376"></p><p>这个例子中有价值的不是 <strong>while</strong>，而是<code>scanf()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, scanf_value;</span><br><span class="line">scanf_value = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , scanf_value = %d&quot;</span>, a, scanf_value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093753800.png" alt="image-20220414093753800"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414093820409.png" alt="image-20220414093820409"></p><p><code>scanf()</code>返回成功读取项的数量。在上述例子中，如果我们正确输入整数，<code>scanf()</code>会返回1；反之，<code>scanf()</code>读取失败返回0。在最开始的程序中，输入q退出只是一个提示，输入其他非数字字符也会退出。</p><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( expression ) <span class="comment">// 通用形式</span></span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>如果是单行语句，不需要用花括号；如果是多行语句，则需要用花括号。</p><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p>如果表达式的值非0，则会执行 statement 部分；反之，则不会执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414095159040.png" alt="image-20220414095159040"></p><p>把1改为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414095431881.png" alt="image-20220414095431881"></p><p>一般而言，所有的非零值都视为真，只有0被视为假。利用这一特性，我们可以用<code>while (goats)</code> 替换 <code>while (goats != 0)</code>。</p><h3 id="分号的位置"><a href="#分号的位置" class="headerlink" title="分号的位置"></a>分号的位置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n++ &lt; <span class="number">3</span>); <span class="comment">// line 7            </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n is %d\n&quot;</span>, n); <span class="comment">// line 8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s all this program does.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414100524507.png" alt="image-20220414100524507"></p><p>为什么我们使用了循环，只打印出来一行语句？  </p><p>原因在于第7行我们多加了一个分号，分号的加入会使得这一行执行完再进入下一行中，把分号去掉就是正常情况了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n++ &lt; <span class="number">3</span>)           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n is %d\n&quot;</span>, n);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s all this program does.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414101245984.png" alt="image-20220414101245984"></p><p>但有时候也可以故意使用这种写法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num)) != <span class="number">1</span></span><br><span class="line">; <span class="comment">// 不放在同一行，提高代码可读性</span></span><br></pre></td></tr></table></figure><p>如果输入的不是整数的话，循环会继续执行，直到我们输入了一个整数。</p><h3 id="优先级与关系运算符"><a href="#优先级与关系运算符" class="headerlink" title="优先级与关系运算符"></a>优先级与关系运算符</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414102627881.png" alt="image-20220414102627881"></p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (startExpression; testExpression; countExpression)<span class="comment">// 用分号隔开</span></span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414103232477.png" alt="image-20220414103232477"></p><h3 id="for-循环的变式"><a href="#for-循环的变式" class="headerlink" title="for 循环的变式"></a>for 循环的变式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递减计数器</span></span><br><span class="line"><span class="keyword">for</span> (secs = <span class="number">5</span>; secs &gt; <span class="number">0</span>; secs--)</span><br><span class="line"><span class="comment">// 可以递增其他的数字</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">2</span>; n &lt; <span class="number">60</span>; n = n + <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 可以用字符代替数字计数</span></span><br><span class="line"><span class="keyword">for</span> (ch = <span class="string">&#x27;a&#x27;</span>; ch &lt;= <span class="string">&#x27;z&#x27;</span>; ch++)</span><br><span class="line"><span class="comment">// 更改第二个表达式</span></span><br><span class="line"><span class="keyword">for</span> (num = <span class="number">1</span>; num*num &lt;= <span class="number">36</span>; num++)</span><br><span class="line"><span class="comment">// 更改第三个表达式为乘增</span></span><br><span class="line"><span class="keyword">for</span> (debt = <span class="number">100.0</span>;  debt &lt; <span class="number">150.0</span>; debt = debt * <span class="number">1.1</span>)</span><br><span class="line"><span class="comment">/* 第三个表达式可以使用任意合法的表达式。无论是什么表达式，每次迭代都会更新该表达式的值 */</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; y &lt;= <span class="number">75</span>; y = (++x * <span class="number">5</span>) + <span class="number">50</span>)</span><br><span class="line"><span class="comment">/* 可以省略一个或多个表达式（但不能省略分号），只要在循环中包含能结束循环的语句即可。 */</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">3</span>; ans &lt;= <span class="number">25</span>;)</span><br><span class="line">    ans = ans * n;</span><br><span class="line"><span class="comment">// 省略第二个表达式被始为真，所以下面的循环会一直执行</span></span><br><span class="line"><span class="keyword">for</span> (; ; )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Loop!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个表达式不一定是给变量赋初值，也可以使用printf()。</span></span><br><span class="line"><span class="comment">// 在执行循环的其他部分之前，只对第1个表达式求值一次或执行一次</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">printf</span>(<span class="string">&quot;Keep entering numbers!\n&quot;</span>); num != <span class="number">6</span>;  )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s the one I want!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414105229706.png" alt="image-20220414105229706"></p><h2 id="其他赋值运算符"><a href="#其他赋值运算符" class="headerlink" title="其他赋值运算符"></a>其他赋值运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414105728035.png" alt="image-20220414105728035"></p><p>以上提到的赋值运算符与 = 的优先级相同，即比 + 或 * 优先级低。</p><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>我们可以使用逗号运算符，在 <strong>for</strong> 循环头中包含更多的表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> FIRST_OZ = <span class="number">46</span>; <span class="comment">// 2013 rate</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> NEXT_OZ = <span class="number">20</span>;  <span class="comment">// 2013 rate</span></span><br><span class="line">    <span class="type">int</span> ounces, cost;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; ounces  cost\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ounces=<span class="number">1</span>, cost=FIRST_OZ; ounces &lt;= <span class="number">5</span>; ounces++,</span><br><span class="line">         cost += NEXT_OZ)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d   $%4.2f\n&quot;</span>, ounces, cost/<span class="number">100.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414110244025.png" alt="image-20220414110244025"></p><p>逗号运算符的性质：</p><ol><li>保证了被它分隔的表达式从左往右求值</li><li>整个逗号表达式的值是右侧项的值</li></ol><p>举个例子，语句<code>x = (y = 3, (z = ++y + 2) + 5);</code>的效果是：  </p><p>先把 3 赋给 y ，递增 y 为 4 ，然后把 4 加 2 之和 6 赋给 z ，接着加上5，最后把结果11 赋给 x 。</p><h2 id="出口条件循环：do-while"><a href="#出口条件循环：do-while" class="headerlink" title="出口条件循环：do while"></a>出口条件循环：do while</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">statement</span><br><span class="line"><span class="title function_">while</span> <span class="params">(expression)</span>; <span class="comment">// 注意分号</span></span><br></pre></td></tr></table></figure><p><strong>do while</strong> 能保证至少执行循环体中的内容一次。</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">6</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> CHARS = <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; ROWS; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (ch = (<span class="string">&#x27;A&#x27;</span> + row);  ch &lt; (<span class="string">&#x27;A&#x27;</span> + CHARS); ch++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220414112040409.png" alt="image-20220414112040409"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 5 运算符、表达式和语句</title>
      <link href="//a9cba629.html"/>
      <url>//a9cba629.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第五章-运算符、表达式和语句"><a href="#第五章-运算符、表达式和语句" class="headerlink" title="第五章 运算符、表达式和语句"></a>第五章 运算符、表达式和语句</h1><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><blockquote><p>赋值运算符： =</p><p>加法运算符： +</p><p>减法运算符： -</p><p>符号运算符： - 和 +</p><p>乘法运算符： *</p><p>除法运算符： /</p></blockquote><p>在除法运算中要注意，浮点数除法的结果是浮点数，而整数除法的结果是整数，整数除法结果的小数部分被丢弃。</p><h3 id="运算符优先级（从高至低）"><a href="#运算符优先级（从高至低）" class="headerlink" title="运算符优先级（从高至低）"></a>运算符优先级（从高至低）</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>结合律</th></tr></thead><tbody><tr><td>( )</td><td>从左到右</td></tr><tr><td>+ - （一元）</td><td>从右往左</td></tr><tr><td>*  /</td><td>从左往右</td></tr><tr><td>+ - （二元）</td><td>从左往右</td></tr><tr><td>=</td><td>从右往左</td></tr></tbody></table></div><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><h3 id="sizeof-运算符和-size-t-类型"><a href="#sizeof-运算符和-size-t-类型" class="headerlink" title="sizeof 运算符和 size_t 类型"></a>sizeof 运算符和 size_t 类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> intsize;</span><br><span class="line">    </span><br><span class="line">    intsize = <span class="keyword">sizeof</span> (<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d, n has %zd bytes; all ints have %zd bytes.\n&quot;</span>,</span><br><span class="line">           n, <span class="keyword">sizeof</span> n, intsize );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413175156982.png" alt="image-20220413175156982"></p><h3 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符%"></a>求模运算符%</h3><p>没什么好说的。</p><h3 id="递增运算符和递减运算符"><a href="#递增运算符和递减运算符" class="headerlink" title="递增运算符和递减运算符"></a>递增运算符和递减运算符</h3><blockquote><p>++ 和 —</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_post = a++; <span class="comment">// postfix: a is changed after its value is used</span></span><br><span class="line">b_pre = ++b; <span class="comment">// prefix: b is changed before its value is used</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, ++a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413180342859.png" alt="image-20220413180342859"></p><h2 id="Expressions-and-Statements"><a href="#Expressions-and-Statements" class="headerlink" title="Expressions and Statements"></a>Expressions and Statements</h2><h3 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h3><p>An <em>expression</em> consists of a combination of operators and operands.(An operand, recall, is what an operator operates on.)  An important property of <strong>C</strong> is that every <strong>C</strong> has a value.</p><blockquote><p>4</p><p>4 + 21</p><p>c = 3 + 8</p><p>5 &gt; 3</p></blockquote><h3 id="Statements"><a href="#Statements" class="headerlink" title="Statements"></a>Statements</h3><p><em>Statements</em> are the primary building blocks of a program. A program is a series of statements with some necessary punctuation. A statement is a complete instruction to the computer. In <strong>C</strong>, statements are indicated by a semicolon at the end.</p><blockquote><p>legs = 4;</p><p>;    // null statement</p><p>++x;</p></blockquote><p>根据 <strong>C</strong> 标准，声明不是语句。</p><h3 id="Side-Effects-and-Sequence-Points"><a href="#Side-Effects-and-Sequence-Points" class="headerlink" title="Side Effects and Sequence Points"></a>Side Effects and Sequence Points</h3><p>A <em>side effect</em> is the modification of a data object or file. For instance, the side effect of the statement <code>states = 50;</code> is to set the states variable to 50. Side effect? This looks more like main intent! From the standpoint of <strong>C</strong>, however, the main intent is evaluating expressions. Show <strong>C</strong> the expression <code>states = 50;</code>, and <strong>C</strong> evaluates it to 50. Evaluating that expression has the side effect of changing the states variable to 50. Similarly when you call the <code>printf()</code> function, the fact that is displays information is a side effect. (The value of <code>printf()</code>, recall, is the number of items displayed.)  </p><p>A <em>sequence point</em> is a point in program execution at which all side effects are evaluated before going on to the next step. In <strong>C</strong>, the semicolon in a statement marks a sequence point. That means all changes made by assignment operators, increment operators, and decrement operators in a statement must take place a program proceeds to the next statement.</p><h3 id="Compound-Statements-Blocks"><a href="#Compound-Statements-Blocks" class="headerlink" title="Compound Statements (Blocks)"></a>Compound Statements (Blocks)</h3><p>A <em>compound statements</em> is two or more statements grouped together by enclosing them in braces{}, it is else called a <em>block</em>.</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>通常，在语句和表达式中应使用相同的变量和常量。但是，如果使用混合类型，<strong>C</strong> 会采用一套规则进行自动类型转换。</p><ol><li>当类型转换出现在表达式时，无论是 <strong>unsigned</strong> 还是 <strong>signed</strong> 的 <strong>char</strong> 和 <strong>short</strong> 都会被自动转换为 <strong>int</strong>，如有必要时会被转换为 <strong>unsigned int</strong>（如果 <strong>short</strong> 与 <strong>int</strong> 的大小相同，<strong>unsigned short</strong> 就会比 <strong>int</strong> 大。这种情况下，<strong>unsigned short</strong> 会被转换成 <strong>unsigned int</strong>）。在<strong>K&amp;R</strong> 那时的 <strong>C</strong> 中，<strong>float</strong> 会被自动转换成 <strong>double</strong> （目前的 <strong>C</strong> 不是这样）。由于都是从较小类型转换为较大类型，所以这些转换被称为升级（promotion)。</li><li>涉及两种类型的运算，两个值会被分别转换为两种类型的更高级别。</li><li>类型的级别从高到低依次是 <strong>long double</strong>, <strong>double</strong>, <strong>float</strong>, <strong>unsigned long long</strong>, <strong>unsigned long</strong>, <strong>unsigned int</strong>, <strong>int</strong>。例外的情况是，当<strong>long</strong> 和 <strong>int</strong> 的大小相同时，<strong>unsigned int</strong> 比 <strong>long</strong> 的级别高。之所以  <strong>short</strong> 和 <strong>char</strong> 类型没有列出，是因为它们已经被升级到 <strong>int</strong> 或 <strong>unsigned int</strong>。</li><li>在赋值表达式语句中，计算的最终结果会被转换为被赋值变量的类型。这个过程可能导致类型升级或降级（demotion）。</li><li>当作为函数参数传递时，<strong>char</strong> 和 <strong>short</strong> 被转换为 <strong>int</strong>，<strong>float</strong> 被转换为 <strong>double</strong>。</li></ol><h3 id="强制类型转换运算符"><a href="#强制类型转换运算符" class="headerlink" title="强制类型转换运算符"></a>强制类型转换运算符</h3><p>The parentheses and type name together constitute a <em>cast operator</em>.</p><blockquote><p>(type)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">snow = <span class="number">1.9</span> + <span class="number">1.7</span>;</span><br><span class="line">snow = (<span class="type">int</span>)<span class="number">1.6</span> + (<span class="type">int</span>)<span class="number">1.7</span>;</span><br></pre></td></tr></table></figure><h2 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pound</span><span class="params">(<span class="type">int</span> n)</span>;   <span class="comment">// ANSI function prototype declaration</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> times = <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;!&#x27;</span>;   <span class="comment">// ASCII code is 33</span></span><br><span class="line">    <span class="type">float</span> f = <span class="number">6.0f</span>;</span><br><span class="line">    </span><br><span class="line">    pound(times);    <span class="comment">// int argument</span></span><br><span class="line">    pound(ch);       <span class="comment">// same as pound((int)ch);</span></span><br><span class="line">    pound(f);        <span class="comment">// same as pound((int)f);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pound</span><span class="params">(<span class="type">int</span> n)</span>    <span class="comment">// ANSI-style function header</span></span><br><span class="line">&#123;                    <span class="comment">// says takes one int argument</span></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220413200528750.png" alt="image-20220413200528750"></p><blockquote><ul><li><strong>void</strong> 表示该函数没有返回值</li><li>这里的 n 是形参（parameter）</li><li>times、ch、f 是实参（argument）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 4 字符串和格式化输入/输出</title>
      <link href="//9551854e.html"/>
      <url>//9551854e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第四章-字符串和格式化输入-输出"><a href="#第四章-字符串和格式化输入-输出" class="headerlink" title="第四章 字符串和格式化输入/输出"></a>第四章 字符串和格式化输入/输出</h1><h2 id="字符串简介"><a href="#字符串简介" class="headerlink" title="字符串简介"></a>字符串简介</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s!&quot;</span>, name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过<code>char name[8];</code>创建了一个包含8个存储单元的数组，每个单元存储一个 <strong>char</strong> 类型的值。  </p><p>虽然创建了8个存储单元，但实际上我们最多输入7个字符，剩下一个字节留给空字符 \0 。  </p><p>如果在输入超过7个字符，虽然最后内容也能打印出来，但发生了字符数组越界的行为，似乎是非常危险的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">//提供strlen()函数的原型</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d, memory = %zd&quot;</span>, <span class="built_in">strlen</span>(name), <span class="keyword">sizeof</span>(name));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用<code>strlen()</code>查看字符串的长度，<code>sizeof()</code>显示字符数组所占的字节数。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412175635919.png" alt="image-20220412175635919"></p><h2 id="常量和-C-预处理器"><a href="#常量和-C-预处理器" class="headerlink" title="常量和 C 预处理器"></a>常量和 C 预处理器</h2><h3 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP <span class="string">&#x27;\a&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OOPS <span class="string">&quot;Now you have done it!&quot;</span></span></span><br></pre></td></tr></table></figure><p>除了在开头使用<code>#include</code>外，我们还可以定义符号常量。比如我们定义了 PI ，编译程序时，程序中所有的 PI 都会被替换成 3.14159。用大写表示符号常量是 <strong>C</strong> 语言一贯的传统。</p><h3 id="const-限定符"><a href="#const-限定符" class="headerlink" title="const 限定符"></a>const 限定符</h3><p>C90 标准新增了 <strong>const</strong> 关键字，用于限定一个<strong>变量</strong>为只读。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MONTHS = <span class="number">12</span>; <span class="comment">// MONTHS 在程序中不可更改，值为 12</span></span><br></pre></td></tr></table></figure><h3 id="明示常量"><a href="#明示常量" class="headerlink" title="明示常量"></a>明示常量</h3><p><strong>C</strong> 头文件 limits.h 和 float.h 分别提供了与整数类型和浮点类型大小相关限制的详细信息。每个头文件都定义了一系列供实现使用的明示常量。例如，limits.h 头文件包含以下类似的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MAX +32767</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MIN -32768</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span>    <span class="comment">// integer limits</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span>     <span class="comment">// floating-point limits</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Some number limits for this system:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Biggest int: %d\n&quot;</span>, INT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Smallest long long: %lld\n&quot;</span>, LLONG_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;One byte = %d bits on this system.\n&quot;</span>, CHAR_BIT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Largest double: %e\n&quot;</span>, DBL_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Smallest normal float: %e\n&quot;</span>, FLT_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float precision = %d digits\n&quot;</span>, FLT_DIG);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float epsilon = %e\n&quot;</span>, FLT_EPSILON);</span><br><span class="line">    <span class="comment">// FIT_EPSILON 1.00和比1.00大的最小 float 类型值之间的差值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412191521389.png" alt="image-20220412191521389"></p><h2 id="printf"><a href="#printf" class="headerlink" title="printf ()"></a>printf ()</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412210723183.png" alt="image-20220412210723183"></p><h3 id="printf-的转换说明修饰符"><a href="#printf-的转换说明修饰符" class="headerlink" title="printf() 的转换说明修饰符"></a>printf() 的转换说明修饰符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]\n&quot;</span>, a);<span class="comment">// 默认</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%2d]\n&quot;</span>, a);<span class="comment">// 系统使用了更宽的字段</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%5d]\n&quot;</span>, a);<span class="comment">// 数字代表最小字段宽度，默认右对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%-5d]\n&quot;</span>, a);<span class="comment">// -修饰符表示左对齐</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">-666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%+d,%+d\n&quot;</span>, a, b);<span class="comment">// +修饰符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;% d,% d\n&quot;</span>, a, b);<span class="comment">// 空格修饰符</span></span><br><span class="line"><span class="type">float</span> c = <span class="number">6.666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, c);<span class="comment">// 保留两位小数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zd\n&quot;</span>, <span class="keyword">sizeof</span>(c));<span class="comment">// 表示size_t类型的值，size_t是sizeof返回的类型（C99）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412193535096.png" alt="image-20220412193535096"></p><h3 id="转换说明的意义"><a href="#转换说明的意义" class="headerlink" title="转换说明的意义"></a>转换说明的意义</h3><p>It converts a value stored in the computer in some binary format to a series of characters (a string) to be displayed. For example, the number 76 may be stored internally as binary 01001100. The %d conversion specifier converts this to characters 7 and 6, displaying 76.</p><h4 id="转换不匹配"><a href="#转换不匹配" class="headerlink" title="转换不匹配"></a>转换不匹配</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGES 336</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORDS 65618</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> num = PAGES;</span><br><span class="line">    <span class="type">short</span> mnum = -PAGES;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num as short and unsigned short:  %hd %hu\n&quot;</span>, num, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-num as short and unsigned short: %hd %hu\n&quot;</span>, mnum, mnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num as int and char: %d %c\n&quot;</span>, num, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;WORDS as int, short, and char: %d %hd %c\n&quot;</span>, WORDS, WORDS, WORDS);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412195329422.png" alt="image-20220412195329422"></p><ul><li>第一行的输出没有问题。</li><li>第二行 short int 的大小为2字节，系统使用二进制补码来表示有符号整数。我们来推导一下65200是怎么来的。<ol><li>336 转换为二进制 0000000101010000</li><li>二进制中1和0互相替换，再加上1，得到补码1111111010110000，对应-336</li><li>由于%hu，这里是无符号整数，1111111010110000转换为十进制65200</li></ol></li><li>第三行 char 是一个字节。当<code>printf()</code>使用 %c 打印336时，它只会查看存储336的2字节中的后1字节。这种截断相当于用一个整数除以256，只保留其余数。在这种情况下，余数是80，对应的 ASCII 值是字符 P。</li><li>第四行分析与第三行类似，这里是取除以65536后的余数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* floatcnv.c -- mismatched floating-point conversions */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> n1 = <span class="number">3.0</span>;</span><br><span class="line">    <span class="type">double</span> n2 = <span class="number">3.0</span>;</span><br><span class="line">    <span class="type">long</span> n3 = <span class="number">2000000000</span>;</span><br><span class="line">    <span class="type">long</span> n4 = <span class="number">1234567890</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1e %.1e %.1e %.1e\n&quot;</span>, n1, n2, n3, n4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld %ld\n&quot;</span>, n3, n4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld %ld %ld %ld\n&quot;</span>, n1, n2, n3, n4);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412204054072.png" alt="image-20220412204054072"></p><p>基于作者的系统：  </p><p>第一行错误原因：<strong>float</strong> 类型的值作为<code>printf()</code>参数时会被转换成 <strong>double</strong> 类型。当 <code>printf()</code>查看 n3 （本系统是4的字节值）时，除了查看 n3 的4字节外，还2会查看 n3 相邻的4字节，共8字节单元。接着，它将8字节单元中的位组合解释成浮点数。  </p><p>第三行错误原因与参数传递有关，思考下图。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412204822214.png" alt="image-20220412204822214"></p><h3 id="printf-的返回值"><a href="#printf-的返回值" class="headerlink" title="printf() 的返回值"></a>printf() 的返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> bph2o = <span class="number">212</span>;</span><br><span class="line">    <span class="type">int</span> rv;</span><br><span class="line">    </span><br><span class="line">    rv = <span class="built_in">printf</span>(<span class="string">&quot;%d F is water&#x27;s boiling point.\n&quot;</span>, bph2o);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The printf() function printed %d characters.\n&quot;</span>, rv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412205602955.png" alt="image-20220412205602955"></p><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><blockquote><ul><li>如果用 <code>scanf()</code> 读取基本变量类型的值，在变量名前加上一个&amp;</li><li>如果用 <code>scanf()</code> 把字符串读入字符数组中，不要使用&amp;</li></ul></blockquote><p><code>scanf()</code>函数使用空白（换行符、制符表和空格）把输入分成多个字段。在依次把转换说明和字段匹配时跳过空白。  </p><p>唯一例外的是%c转换说明。根据%c，<code>scanf()</code>会读取每个字符，包括空白。  </p><p><code>scanf()</code>函数所用的转换说明与<code>printf()</code>函数几乎相同。主要的区别是，对于<strong>float</strong>类型和<strong>double</strong>类型，<code>printf()</code>都使用%f、%e、%E、%g和%G 转换说明。而<code>scanf()</code>只把它们用于<strong>float</strong>类型，<strong>double</strong>类型要用 l 修饰符。</p><h3 id="从-scanf-角度看输入"><a href="#从-scanf-角度看输入" class="headerlink" title="从 scanf() 角度看输入"></a>从 scanf() 角度看输入</h3><p>假设<code>scanf()</code>根据一个%d转换说明读取一个整数。<code>scanf()</code>函数每次读取一个字符，跳过所有空白的字符，直到遇到第1个空白字符才开始读取。因为要取整数，所有<code>scanf()</code>希望发现一个数字字符或者一个符号（+或-）。如果找到一个数字或符号，它便保存该字符，并读取下一个字符。如果下一个字符是数字，它便保存该数字并读取下一个字符。<code>scanf()</code>不断地读取和保存字符，直到遇到非数字字符。如果遇到一个非数字字符，它便认为读到了整数的末尾。然后，<code>scanf()</code>把非数字字符放回输入。这意味着程序在下一次输入时，首先读到的是上一次读取丢弃的非数字字符。  </p><p>如果使用字段宽度，<code>scanf()</code>会在字段结尾或第1个空白字符处停止读取。  </p><p>如果用%s转换说明，<code>scanf()</code>会读取除空白以外的所有字符。<code>scanf()</code>跳过空白开始读取第1个非空白字符，并保存非空白字符直到再次遇到空白。  </p><p>来看一个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412214406445.png" alt="image-20220412214406445"></p><p>我们输入1和a，为什么a没有被打印出来？  </p><p>程序稍作改动。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412214559341.png" alt="image-20220412214559341"></p><p>这次a成功打印出来了，想想为什么？</p><p>下面的例子关于使用<code>scanf()</code>修饰符 * (suppress assignment)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter three integers:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The last integer was %d\n&quot;</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412215035333.png" alt="image-20220412215035333"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 1-3 C语言基础</title>
      <link href="//c58d4f4.html"/>
      <url>//c58d4f4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="第一章-初识C语言"><a href="#第一章-初识C语言" class="headerlink" title="第一章 初识C语言"></a>第一章 初识C语言</h2><h3 id="编程的七个步骤"><a href="#编程的七个步骤" class="headerlink" title="编程的七个步骤"></a>编程的七个步骤</h3><blockquote><ol><li>Define the program objectives</li><li>Design the program</li><li>Write the code</li><li>Compile</li><li>Run the program</li><li>Test and debug the program</li><li>Maintain and modify the program</li></ol></blockquote><p> The moral here is that you should develop the habit of planning before coding. Use the ancient but honorable pen-and-pencil technology to jot down the objectives of your program and to outline the design. If you do so, you eventually will reap substantial dividends in time saved and satisfaction gained. </p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411193803765.png" alt="image-20220411193803765"></p><h3 id="编译器和连接器"><a href="#编译器和连接器" class="headerlink" title="编译器和连接器"></a>编译器和连接器</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411191643812.png" alt="image-20220411191643812"></p><hr><h2 id="第二章-C语言概述"><a href="#第二章-C语言概述" class="headerlink" title="第二章 C语言概述"></a>第二章 C语言概述</h2><h3 id="include-指令和头文件"><a href="#include-指令和头文件" class="headerlink" title="#include 指令和头文件"></a>#include 指令和头文件</h3><blockquote><p><code>#include &lt;stdio.h&gt;</code></p></blockquote><p> The <code>#include</code> statement is an example of a <strong>C</strong> <em>preprocessor directive</em>. In general, <strong>C</strong> compilers perform some preparatory work on source code before compiling; this is termed <em>preprocessing</em>.</p><p> The <code>stdio.h</code> file is supplied as part of all <strong>C</strong> compiler packages. It contains information about input and output functions, such as <code>printf()</code> , for the compiler to use. The name stands for <em>standard input/output header</em>. <strong>C</strong> peaple call a collection of information that goes at the top of a file a header, and <strong>C</strong> implementations typically come with several header files.  </p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main() 函数"></a>main() 函数</h3><blockquote><p><code>int main (void)</code></p></blockquote><p> The <strong>int</strong> is the <code>main()</code> function’s return type. That means that kind of value of value <code>main()</code> can return is an integer.  </p><p> The parentheses following a function name generally enclose information being passed along to the function. For this simple example, nothing is being passed along, so the parentheses contain the word <strong>void</strong>.  </p><blockquote><p>main()</p></blockquote><p> If you browse through ancient <strong>C</strong> code, you’ll often see programs starting off with the following format: <code>main()</code>  </p><p> The C90 standard grudgingly tolerated this form, but the C99 and C11 standards don’t. So even if you current compiler lets you do this, don’t.</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p> 在程序中，被<code>/* */</code>两个符号括起来的是程序的注释。  </p><p> C99 新增了另一种风格的注释<code>//</code>，仅限于单行。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote><p><code>int num;</code></p></blockquote><p> The word <strong>int</strong> is a <strong>C</strong> <em>keyword</em> identifying one of the basic <strong>C</strong> data types. The word <strong>num</strong> in this example is an <em>identifier</em> —— that is, a name you select for a variable, a function, or somme other entity.  </p><p> In <strong>C</strong>, all variables must be declared before they are used.  </p><p> Traditionally, <strong>C</strong> has required that variables be declared at the beginning of a block with no other kind of statement allowed to come before and of the declarations.  </p><p> C99 and C11, following the practice of C++, let you place declarations about anywhere in a block. However, you still must declare a variable before its first use.</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p> 可以用小写字母、大写字母、数字和下划线（_）来命名。而且，名称的第1个字符必须是字母或下划线，不能是数字。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411200854738.png" alt="image-20220411200854738"></p><h3 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf() 函数"></a>printf() 函数</h3><p> the <strong>f</strong> in <code>printf()</code> is a reminder that this is a <em>formatting</em> print function.</p><hr><h2 id="数据和-C"><a href="#数据和-C" class="headerlink" title="数据和 C"></a>数据和 C</h2><blockquote><ul><li>The smallest unit of memory called a <em>bit</em>. It can hold one of  the two values: 0 or 1.</li><li>The <em>byte</em> is the usual unit of computer memory. For nearly all machines, a byte is 8 bits, and that is the standard definition, at least when used to measure storage.</li><li>A <em>word</em> is the natural unit of memory for a given computer design. For 8-bit microcomputers, such as the original Apples, a word is just 8 bits. Since then, personal computers moved up to 16-bit words. 32-bit words, and, at the present, 64-bit words. Larger word sizes enable faster transfer of data and allow more memory to be accessed.</li></ul></blockquote><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="int-类型"><a href="#int-类型" class="headerlink" title="int 类型"></a>int 类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 int 变量</span></span><br><span class="line"><span class="type">int</span> erns;</span><br><span class="line"><span class="type">int</span> hogs, cows, goats;</span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="type">int</span> hogs = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> cows = <span class="number">32</span>, goats = <span class="number">14</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">int</span> snow;</span><br><span class="line">snow = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p> <strong>C</strong> 语言把大多数整型常量视为 <strong>int</strong> 类型，但是非常大的整数除外。  </p><p> The <strong>%d</strong> notation is used to indicate just where in a line the integer is to be printed. The <strong>%d</strong> is called a <em>format specifier</em> because it indicates the form that <code>printf()</code> uses to display a value.</p><h5 id="显示八进制和十六进制"><a href="#显示八进制和十六进制" class="headerlink" title="显示八进制和十六进制"></a>显示八进制和十六进制</h5><blockquote><ul><li>以十进制显示数字，使用<strong>%d</strong></li><li>以八进制显示数字，使用<strong>%o</strong></li><li>以十六进制显示数字，使用<strong>%x</strong></li><li>要显示各进制数的前缀0、0x 和 0X，分别使用<strong>%#o</strong>、<strong>%#x</strong>、<strong>%#X</strong></li></ul><p>八进制：Octal</p><p>十六进制：Hexadecimal</p></blockquote><h4 id="其他整数类型"><a href="#其他整数类型" class="headerlink" title="其他整数类型"></a>其他整数类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思考short、long和unsigned的含义 </span></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> estine;</span><br><span class="line"><span class="type">long</span> johns; <span class="comment">//打印用 %ld</span></span><br><span class="line"><span class="type">short</span> <span class="type">int</span> erns;</span><br><span class="line"><span class="type">short</span> ribs; <span class="comment">//打印用 %hd</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s_count;</span><br><span class="line"><span class="type">unsigned</span> players; <span class="comment">//打印用 %u</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> headcount; <span class="comment">//打印用 %lu</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> yesvotes;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ago; <span class="comment">//打印用 %lld</span></span><br></pre></td></tr></table></figure><p> 现在，个人计算机常见的设置是，<strong>long long</strong> 占64位，<strong>long</strong> 占32位，<strong>short</strong> 占16位，<strong>int</strong> 占16位或32位（依计算机的自然字长而定）。  </p><p> 16 位 <strong>unsigned int</strong> 允许的取值范围是 0~65535，而不是-32768~32767。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411211443768.png" alt="image-20220411211443768"></p><p> 在 <strong>int</strong> 为16位、<strong>long</strong> 为32位的系统中，会把7作为16位存储，把7L作为32位存储。类似地，在支持 <strong>long long</strong> 类型的系统中，也可以使用 ll 或 LL 后缀来表示该类型的值。</p><h4 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">4294967295</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, i, i+<span class="number">1</span>, i+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u %u %u\n&quot;</span>, j, j+<span class="number">1</span>, j+<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411212214163.png" alt="image-20220411212214163"></p><p> The unsigned integer j is acting like a car’s odometer. When it reaches its maximun value, it starts over at the beginning. The in teger i acts similarly. The main differences is that the <strong>unsigned int</strong> variable j, like an odoometer, begins at 0, but the <strong>int</strong> variabel i begins at -2147483648.</p><p> The behavior described here is mandated by the rules of C for unsigned types. The standard doesn’t define how signed types should behave. The behavior shown here is typical, but you could encounter somrthing different.</p><h3 id="char-类型"><a href="#char-类型" class="headerlink" title="char 类型"></a>char 类型</h3><p> The <strong>char</strong> type is used for storing characters such as and punctuation marks, but technically it is an integer type.Because the <strong>char</strong> type actually stores integers, not characters.  </p><p> The standard <strong>ASCII</strong> code runs numerically from 0 to 127. This range is small enough that 7 bits can hold it. The <strong>char</strong> typpe is typically defined as an 8-bit unit of memory, so it is more than large enough to encompass the standard <strong>ASCII</strong> code. </p><p>  The <strong>C</strong> language defines a byte to be the number of bits used by type <strong>char</strong>.</p><p> 使用 ASCII 码时，注意数字和数字字符的区别。例如，字符4对应的 ASCII 码是52. ‘4’ 表示字符4，而不是数字4.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="type">char</span> snow;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">snow = <span class="string">&#x27;S&#x27;</span>; <span class="comment">// 只能用单引号包括，不加单引号或用双引号是不对的</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">char</span> snow = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果把&#x27;SNOW&#x27;赋给snow，snow的值将会是&#x27;W&#x27;，想想为什么</span></span><br></pre></td></tr></table></figure><h4 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220411220935369.png" alt="image-20220411220935369"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转义序列赋给字符变量</span></span><br><span class="line"><span class="type">char</span> nerf = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 稍后打印变量 nerf 的效果是，在屏幕上另起一行</span></span><br><span class="line"><span class="type">char</span> beep = <span class="string">&#x27;\007&#x27;</span><span class="comment">// 用八进制ASCII码表示字符，效果与&#x27;\a&#x27;等同</span></span><br></pre></td></tr></table></figure><h4 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h4><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412081420834.png" alt="image-20220412081420834"></p><h4 id="Signed-or-Unsigned"><a href="#Signed-or-Unsigned" class="headerlink" title="Signed or Unsigned?"></a>Signed or Unsigned?</h4><p> Some <strong>C</strong> implementations make <strong>char</strong> a signed type. This means a <strong>char</strong> can hold values typically in the range -128 through 127. Other implementations make <strong>char</strong> an unsigned type, which provides a range of 0 through 255.  </p><p> As of C90, <strong>C</strong> enabled you to use the keywords <strong>signed</strong> and <strong>unsigned</strong> with <strong>char</strong>.</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412082611769.png" alt="image-20220412082611769"></p><p> 指数计数法是科学计数法在计算机中的写法。  </p><p> <strong>C</strong> 标准规定，<strong>float</strong> 类型必须至少能表示6位有效数字，且取值范围至少是$10^{-37}$ ~ $10^{+37}$ 。通常，系统储存一个浮点数要占用32位。其中8位用于表示指数的值和符号，剩下24位用于表示非指数部分（也叫做尾数或有效数）及其符号。  </p><p> <strong>C</strong> 语言提供的另一种浮点类型是 <strong>double</strong>（意为双精度）。<strong>double</strong>类型和 <strong>float</strong> 类型的最小取值范围相同，但至少必须能表示10位有效数字。一般情况下，<strong>double</strong> 占用64位而不是32位。一些系统将多出的 32 位全部用来表示非指数部分，这不仅增加了有效数字的位数（即提高了精度），而且还减少了舍入误差。另一些系统把其中的一些位分配给指数部分，以容纳更大的指数，从而增加了可表示数的范围。无论哪种方法，<strong>double</strong> 类型的值至少有13位有效数字，超过了标准的最低位数规定。  </p><p> <strong>C</strong> 语言的第3种浮点数类型是 <strong>long double</strong>，以满足比 <strong>double</strong> 类型更高的精度要求。  </p><p>  默认情况下，编译器假设浮点型常量是 <strong>double</strong> 类型的精度。在浮点数后面加上 f 或 F 后缀可覆盖默认设置，编译器会将浮点型常量看作 <strong>float</strong> 类型。使用 l 或 L 后缀使得数字成为 <strong>long double</strong> 类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> aboat = <span class="number">32000.0</span>; </span><br><span class="line"><span class="type">double</span> abet = <span class="number">2.14e9</span>;</span><br><span class="line"><span class="comment">// %f 打印十进制，%e 打印指数计数法，%a 打印十六进制格式</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> dip = <span class="number">5.32e-5</span>;</span><br><span class="line"><span class="comment">// 打印使用 %Lf、%Le、%La</span></span><br></pre></td></tr></table></figure><h4 id="浮点值的上溢和下溢"><a href="#浮点值的上溢和下溢" class="headerlink" title="浮点值的上溢和下溢"></a>浮点值的上溢和下溢</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> overflow = <span class="number">3.4E38</span> * <span class="number">100.0f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, overflow);<span class="comment">// 上溢</span></span><br><span class="line"><span class="type">float</span> underflow = <span class="number">0.1234E-38</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, underflow / <span class="number">10</span>);<span class="comment">// 下溢</span></span><br><span class="line"><span class="type">float</span> x = <span class="number">5.1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="built_in">asin</span>(x));</span><br><span class="line"><span class="type">float</span> a, b;</span><br><span class="line">b = <span class="number">2.0e20</span> + <span class="number">1.0</span>;</span><br><span class="line">a = b - <span class="number">2.0e20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, a);<span class="comment">// 浮点数舍入错误，计算机缺少足够的小数位数来完成正确的运算。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412092359300.png" alt="image-20220412092359300"></p><h3 id="类型大小"><a href="#类型大小" class="headerlink" title="类型大小"></a>类型大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* c99 provides a %zd specifier for sizes */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type int has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type char has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long long has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long double has a size of %zd bytes.\n&quot;</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220412093309133.png" alt="image-20220412093309133"></p><h3 id="刷新输出"><a href="#刷新输出" class="headerlink" title="刷新输出"></a>刷新输出</h3><p> <code>printf()</code> statements send output to an intermediate storage area called a <em>buffer</em>. It is sent when the buffer gets full, when a newline character is encountered, or when there is impending input.</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记（一）</title>
      <link href="//62d7d297.html"/>
      <url>//62d7d297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><p>注意：对于中文网页需要使用<code>&lt;meta charest=&quot;UTF-8&quot;&gt;</code>声明编码，否则会出现乱码。</p><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>学习HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407091709917.png" alt="image-20220407091709917"></p><p>注意：doctype声明可以不区分大小写</p><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p>HTML使用来描述网页的一种语言。</p><ul><li>HTML: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li><li>HTML 不是一种编程语言， 而是一种<strong>标记</strong>语言</li><li>标记语言是一套<strong>标记标签</strong></li><li>HTML 使用标记标签来<strong>描述</strong>网页</li><li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li><li>HTML文档也叫做 <strong>web</strong> 页面</li></ul><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ul><li>HTML 标签是由<strong>尖括号</strong>包围的关键词，比如<code>&lt;html&gt;</code></li><li>HTML 标签总是<strong>成对出现</strong>的， 比如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li></ul><h3 id="Web-浏览器"><a href="#Web-浏览器" class="headerlink" title="Web 浏览器"></a>Web 浏览器</h3><p>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p><h3 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h3><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407093357883.png" alt="image-20220407093357883"></p><h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>HTML 标题是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>HTML 段落是通过标签<code>&lt;p&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><p>HTML 链接是通过标签<code>&lt;a&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href 是 hypertext reference 的缩写</p><h3 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h3><p>HTML 图像是通过标签<code>&lt;img&gt;</code>来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>src 是 Source 的缩写</p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407104014764.png" alt="image-20220407104014764"></p><h3 id="实例解析"><a href="#实例解析" class="headerlink" title="实例解析"></a>实例解析</h3><p><code>&lt;p&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;p&gt;</code>元素定义了 HTML 文档中的一个段落。  </p><p><code>&lt;body&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;body&gt;</code>元素定义了 HTML 文档的主体。  </p><p><code>&lt;html&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;html&gt;</code>元素定义了整个 HTML 文档。</p><h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><p>属性是 HTML 元素提供的附加信息。</p><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称/值对的形式出现，<strong>比如：name=”value”</strong>。</li></ul><h3 id="属性实例"><a href="#属性实例" class="headerlink" title="属性实例"></a>属性实例</h3><p>HTML 链接由<code>&lt;a&gt;</code>标签定义。链接的地址在 <strong>href 属性</strong> 中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://84dulu.github.io&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：属性值应该被包括在引号内。双引号常用，使用单引号也没有问题。但若属性值本身就含有双引号，我们应该使用单引号。</p><h2 id="HTML-标题-1"><a href="#HTML-标题-1" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><h3 id="HTML-标题-2"><a href="#HTML-标题-2" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>标题通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来进行定义。  </p><p><code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题。  </p><p>浏览器会自动地在标题的前后添加空行。</p><h3 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h3><p><code>&lt;hr&gt;</code>标签在 HTML 页面中创建水平线，可用于分隔内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-段落-1"><a href="#HTML-段落-1" class="headerlink" title="HTML 段落"></a>HTML 段落</h2><h3 id="HTML-段落-2"><a href="#HTML-段落-2" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>段落是通过<code>&lt;p&gt;</code>标签定义的。  </p><p>浏览器会自动地在段落的前后添加空行。（<code>&lt;/p&gt;</code>是块级元素）</p><h3 id="HTML-拆行"><a href="#HTML-拆行" class="headerlink" title="HTML 拆行"></a>HTML 拆行</h3><p>想要换行可以使用<code>&lt;br&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落<span class="tag">&lt;<span class="name">br</span>&gt;</span>演示了分行的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于关闭标签没有任何意义，因此它没有结束标签。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407113955408.png" alt="image-20220407113955408"></p><p>贴一下评论区的笔记，我学的这个教程应该是比较老的，先学一遍基础，以后有时间再学新的内容。</p><h3 id="HTML-输出"><a href="#HTML-输出" class="headerlink" title="HTML 输出"></a>HTML 输出</h3><p>对于 HTML ，我们无法通过在 HTML 代码中添加额外的空格或换行来改变输出的结果。  </p><p>当显示页面时，浏览器会移除源代码中多余的空格和红行。所有连续的空格或空行都会被算作一个空格。</p><h2 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>放大文本<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>缩小文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407120057808.png" alt="image-20220407120057808"></p><blockquote><p><code>&lt;b&gt;</code>—-bold</p><p><code>&lt;i&gt;</code>—-italic</p><p><code>&lt;em&gt;</code>—-emphasize</p><p><code>&lt;sub&gt;</code>—-subscript</p><p><code>&lt;sup&gt;</code>—-superscript</p></blockquote><p>贴两篇别人写的笔记。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121629519.png" alt="image-20220407121629519"></p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220407121706994.png" alt="image-20220407121706994"></p>]]></content>
      
      
      <categories>
          
          <category> HTML笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(二)</title>
      <link href="//add6a14e.html"/>
      <url>//add6a14e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="分析笔记（一）中的格式错误"><a href="#分析笔记（一）中的格式错误" class="headerlink" title="分析笔记（一）中的格式错误"></a>分析笔记（一）中的格式错误</h1><p>别忘了井号和标题间要有空格，刚才弄了半天没生成标题。</p><h2 id="MD041-First-line-in-a-file-should-be-a-top-level-heading"><a href="#MD041-First-line-in-a-file-should-be-a-top-level-heading" class="headerlink" title="MD041 - First line in a file should be a top-level heading"></a>MD041 - First line in a file should be a top-level heading</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406161917301.png" alt="image-20220406161917301"></p><p>第一行必须是一级标题，如果不是，就会产生格式错误。</p><h2 id="MD010-Hard-tabs"><a href="#MD010-Hard-tabs" class="headerlink" title="MD010 - Hard tabs"></a>MD010 - Hard tabs</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162311727.png" alt="image-20220406162311727"></p><p>This rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead.</p><h2 id="MD049-Emphasis-style-should-be-consistent"><a href="#MD049-Emphasis-style-should-be-consistent" class="headerlink" title="MD049 - Emphasis style should be consistent"></a>MD049 - Emphasis style should be consistent</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406183749148.png" alt="image-20220406183749148"></p><p>斜体文本的生成在整篇文章中必须保持一致，要不全都用单个*包围，要不全都用单个_包围。</p><h2 id="MD050-Strong-style-should-be-consisten"><a href="#MD050-Strong-style-should-be-consisten" class="headerlink" title="MD050 - Strong style should be consisten"></a>MD050 - Strong style should be consisten</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406162936867.png" alt="image-20220406162936867"></p><p>与MD049的规则一致。</p><h2 id="MD009-Trailing-spaces"><a href="#MD009-Trailing-spaces" class="headerlink" title="MD009 - Trailing spaces"></a>MD009 - Trailing spaces</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406171247624.png" alt="image-20220406171247624"></p><p>行尾出现了不必要的空格，应该移除它。其实有些空格是允许的，比如用于换行的空格。</p><h2 id="MD035-Horizontal-rule-style"><a href="#MD035-Horizontal-rule-style" class="headerlink" title="MD035 - Horizontal rule style"></a>MD035 - Horizontal rule style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406172226056.png" alt="image-20220406172226056"></p><p>与MD049和MD050的规则一致。</p><h2 id="MD033-Inline-HTML"><a href="#MD033-Inline-HTML" class="headerlink" title="MD033 - Inline HTML"></a>MD033 - Inline HTML</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173031498.png" alt="image-20220406173031498"></p><p>Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include “pure” markdown, or for those who are rendering markdown documents in something other than HTML.</p><h2 id="MD007-Unordered-list-indentation"><a href="#MD007-Unordered-list-indentation" class="headerlink" title="MD007 - Unordered list indentation"></a>MD007 - Unordered list indentation</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406173240596.png" alt="image-20220406173240596"></p><p>大概因为是第一层嵌套，都应该顶格写。</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174628026.png" alt="image-20220406174628026"></p><p>This rule is triggered when list items are not indented by the configured number of spaces (default: 2).</p><h2 id="MD004-Unordered-list-style"><a href="#MD004-Unordered-list-style" class="headerlink" title="MD004 - Unordered list style"></a>MD004 - Unordered list style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406174355522.png" alt="image-20220406174355522"></p><p>生成无序列表的符号从头到尾应保持一致。</p><h2 id="MD032-Lists-should-be-surrounded-by-blank-lines"><a href="#MD032-Lists-should-be-surrounded-by-blank-lines" class="headerlink" title="MD032 - Lists should be surrounded by blank lines"></a>MD032 - Lists should be surrounded by blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406175608011.png" alt="image-20220406175608011"></p><p>This rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line.</p><p>想要解决问题，把数字那行的内容删去即可。</p><h2 id="MD012-Multiple-consecutive-blank-lines"><a href="#MD012-Multiple-consecutive-blank-lines" class="headerlink" title="MD012 - Multiple consecutive blank lines"></a>MD012 - Multiple consecutive blank lines</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406180110741.png" alt="image-20220406180110741"></p><p>删除多余的两行空行即可。</p><h2 id="MD046-Code-block-style"><a href="#MD046-Code-block-style" class="headerlink" title="MD046 - Code block style"></a>MD046 - Code block style</h2><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182141643.png" alt="image-20220406182141643"></p><p>昨天犯了一个非常严重的错误，花了一个小时意外解决但不知道原理，今天总算明白了问题所在。Markdown中生成代码块是有两种方式的：</p><p><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/image-20220406182455741.png" alt="image-20220406182455741"></p><p>一种是我知道的```生成代码块，另外一种就是图中先展示的。所以我们在生成代码块的时候最好统一用下面的形式，避免无意间用到上面的形式。</p><h1 id="空行和缩进"><a href="#空行和缩进" class="headerlink" title="空行和缩进"></a>空行和缩进</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp;或&amp;#8194; //半角的空格</span><br><span class="line">&amp;emsp;或&amp;#8195; //全角的空格</span><br><span class="line">&amp;nbsp;或&amp;#160;  //不断行的空格</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;内容 //中文作文一样的缩进</span><br><span class="line">&amp;nbsp; //放在一行中不加任何其他东西即生成空行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记(一)</title>
      <link href="//2e73a2c.html"/>
      <url>//2e73a2c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用#号创建标题，几个#对应的就是几级标题，最多6级。</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>​    用*或_包裹创建斜体文本</p><p>​        <em>斜体文本</em><em>斜体文本</em></p><p>​    用**或__包裹创建粗体文本</p><p>​        <strong>粗体文本</strong><strong>粗体文本</strong></p><p>​    用<em>*</em>或<em>_</em>包裹创建粗斜体文本    </p><p>​        <strong><em>粗斜体文本</em></strong><strong><em>粗斜体文本</em></strong></p><p>​    在一行中用三个以上的星号*、减号-、下划线_来建立一个分隔线，行内不能有其他东西。</p><hr><hr><hr><p>​    文字两端加上两个波浪线实现删除线的效果。</p><p>​        <del>删除线</del></p><p>​    下划线可以通过HTML的<u></u>标签包裹来实现：</p><p>​        <u>带下划线文本</u></p><p>​    脚注用<sup><a href="#fn_" id="reffn_"></a></sup>来生产：</p><p>​        学习Markdown语法<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="菜鸟教程">[1]</span></a></sup>。</p><p>​    无序列表使用星号*、加号+或是减号-作为列表标记，这些标记后面要添加一个空格，然后再填写内容:</p><ul><li>第一项</li><li><p>第二项</p><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li>第一项</li><li>第二项<ul><li>第一项</li></ul></li></ul><p>有序列表使用数字并加上.号来表示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li></ul><p>​    列表嵌套要在子列表中的选项前面添加四个空格：</p><ol><li>第一项：<ul><li>第一项</li><li>第二项</li></ul></li><li>第二项：<ul><li>第一项</li><li>第二项</li></ul></li></ol><p>​    Markdown区块引用实在段落开头使用&gt;符号，然后后面紧跟一个空格符号:</p><blockquote><p>区块引用</p><p>必须是一行的最左边好像才能生效</p></blockquote><p>​    区块是可以嵌套的，一个&gt;符号是最外层，两个&gt;符号是第一层嵌套，以此类推：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote></blockquote><p>​    区块中可以使用列表：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><p>​    列表中也可以使用区块：</p><ul><li><p>第一项</p><blockquote><p>区块示例</p><p>啦啦啦</p></blockquote></li><li><p>第二项</p><blockquote><p>啦啦啦</p></blockquote></li></ul><p>​    Markdown 表格:</p><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><p>Typora 中似乎设置完表头，表格就能可视化了。</p><p>​    段落中的代码可以用单个反引号`把它们包裹起来:</p><p>​        C语言中的<code>printf()</code>函数</p><p>​    可以用```(在最开头)包裹一段代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    链接使用方法:</p><ol><li><p>[链接名称] (链接地址)      ]和(中间没有空格,这里只为演示方便。</p></li><li><p>链接地址两边用尖括号包围</p><ul><li>第一种方法：<a href="[Snow&#39;s Blog (84dulu.github.io">我的博客</a>](<a href="https://84dulu.github.io/">https://84dulu.github.io/</a>))</li><li>第二种方法：&lt;<a href="https://84dulu.github.io/">Snow’s Blog (84dulu.github.io)</a>&gt;</li></ul></li></ol><p>​    我们可以用两组方括号通过变量来设置一个链接，第一组方括号里面填入我们想设置的名称，第二组方括号里面填入变量，变量赋值在文档末尾进行:</p><p>​        好友的博客<a href="Jonathan的小窝" title="jonathanbest7.github.io)](https://jonathanbest7.github.io/">bj777</a></p><p>​    </p><p>​    Markdown 图片语法格式:</p><ul><li><p>开头一个感叹号</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个圆括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的’title’属性的文字。</p><p> ​    <img src="https://www.ghibli.jp/gallery/thumb-totoro044.png" alt="pexels"></p><p> ​    Markdown没有办法指定图片的高度和宽度，如果需要，可以使用普通的 img 标签。</p><p> ​      </p><p> Markdown 还支持HTML元素，我不会用哈哈。kbd 标签定义键盘文本</p><p> ​    使用 <kbd>Ctrl</kbd>+<kbd>v</kbd>粘贴</p><p> 显示*等字符可以用反斜杠\来转义：</p><p> ​    <strong>文本加粗</strong></p></li></ul><p>**文本加粗**<br><img src="https://cdn.jsdelivr.net/gh/84DuLu/img/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-04-05%20164932.png" alt="111"></p><p>尝试下LaTeX:</p><script type="math/tex; mode=display">a^2 + b^2 = c^2</script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">菜鸟教程<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 笔记学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
